
cdc_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08007874  08007874  00017874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007904  08007904  0002016c  2**0
                  CONTENTS
  4 .ARM          00000008  08007904  08007904  00017904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800790c  0800790c  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800790c  0800790c  0001790c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007910  08007910  00017910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  08007914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002016c  2**0
                  CONTENTS
 10 .bss          00001c70  2000016c  2000016c  0002016c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001ddc  20001ddc  0002016c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de77  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000298d  00000000  00000000  0002e013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b58  00000000  00000000  000309a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a10  00000000  00000000  000314f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ecd  00000000  00000000  00031f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f19b  00000000  00000000  00054dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c42a1  00000000  00000000  00063f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00128211  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030ac  00000000  00000000  00128264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000016c 	.word	0x2000016c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800785c 	.word	0x0800785c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000170 	.word	0x20000170
 80001cc:	0800785c 	.word	0x0800785c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 f9a6 	bl	80008d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f806 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f86c 	bl	800066c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000594:	f005 ffa8 	bl	80064e8 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000598:	e7fe      	b.n	8000598 <main+0x14>
	...

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b094      	sub	sp, #80	; 0x50
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	2230      	movs	r2, #48	; 0x30
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f006 fce0 	bl	8006f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c0:	2300      	movs	r3, #0
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	4b27      	ldr	r3, [pc, #156]	; (8000664 <SystemClock_Config+0xc8>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	4a26      	ldr	r2, [pc, #152]	; (8000664 <SystemClock_Config+0xc8>)
 80005ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ce:	6413      	str	r3, [r2, #64]	; 0x40
 80005d0:	4b24      	ldr	r3, [pc, #144]	; (8000664 <SystemClock_Config+0xc8>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	4b21      	ldr	r3, [pc, #132]	; (8000668 <SystemClock_Config+0xcc>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a20      	ldr	r2, [pc, #128]	; (8000668 <SystemClock_Config+0xcc>)
 80005e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b1e      	ldr	r3, [pc, #120]	; (8000668 <SystemClock_Config+0xcc>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f8:	2302      	movs	r3, #2
 80005fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000600:	2310      	movs	r3, #16
 8000602:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000604:	2302      	movs	r3, #2
 8000606:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000608:	2300      	movs	r3, #0
 800060a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800060c:	2310      	movs	r3, #16
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000610:	23c0      	movs	r3, #192	; 0xc0
 8000612:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000618:	2304      	movs	r3, #4
 800061a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 0320 	add.w	r3, r7, #32
 8000620:	4618      	mov	r0, r3
 8000622:	f001 ff1b 	bl	800245c <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800062c:	f000 f846 	bl	80006bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	230f      	movs	r3, #15
 8000632:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f002 f97e 	bl	800294c <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000656:	f000 f831 	bl	80006bc <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3750      	adds	r7, #80	; 0x50
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_GPIO_Init+0x4c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a0f      	ldr	r2, [pc, #60]	; (80006b8 <MX_GPIO_Init+0x4c>)
 800067c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <MX_GPIO_Init+0x4c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	603b      	str	r3, [r7, #0]
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_GPIO_Init+0x4c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a08      	ldr	r2, [pc, #32]	; (80006b8 <MX_GPIO_Init+0x4c>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_GPIO_Init+0x4c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	683b      	ldr	r3, [r7, #0]

}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800

080006bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c0:	b672      	cpsid	i
}
 80006c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <Error_Handler+0x8>
	...

080006c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <HAL_MspInit+0x4c>)
 80006d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d6:	4a0f      	ldr	r2, [pc, #60]	; (8000714 <HAL_MspInit+0x4c>)
 80006d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006dc:	6453      	str	r3, [r2, #68]	; 0x44
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <HAL_MspInit+0x4c>)
 80006e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <HAL_MspInit+0x4c>)
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	4a08      	ldr	r2, [pc, #32]	; (8000714 <HAL_MspInit+0x4c>)
 80006f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f8:	6413      	str	r3, [r2, #64]	; 0x40
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_MspInit+0x4c>)
 80006fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800

08000718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800071c:	e7fe      	b.n	800071c <NMI_Handler+0x4>

0800071e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <HardFault_Handler+0x4>

08000724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <MemManage_Handler+0x4>

0800072a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <BusFault_Handler+0x4>

08000730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <UsageFault_Handler+0x4>

08000736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sayac++;
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <SysTick_Handler+0x68>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	3301      	adds	r3, #1
 800076a:	b29a      	uxth	r2, r3
 800076c:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <SysTick_Handler+0x68>)
 800076e:	801a      	strh	r2, [r3, #0]

	if(sayac%1000 == 0)
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <SysTick_Handler+0x68>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	4a15      	ldr	r2, [pc, #84]	; (80007cc <SysTick_Handler+0x6c>)
 8000776:	fba2 1203 	umull	r1, r2, r2, r3
 800077a:	0992      	lsrs	r2, r2, #6
 800077c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000780:	fb01 f202 	mul.w	r2, r1, r2
 8000784:	1a9b      	subs	r3, r3, r2
 8000786:	b29b      	uxth	r3, r3
 8000788:	2b00      	cmp	r3, #0
 800078a:	d118      	bne.n	80007be <SysTick_Handler+0x5e>
	{
		sayac2++;
 800078c:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <SysTick_Handler+0x70>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	3301      	adds	r3, #1
 8000792:	b29a      	uxth	r2, r3
 8000794:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <SysTick_Handler+0x70>)
 8000796:	801a      	strh	r2, [r3, #0]
		sprintf(buffer, "%x", sayac2);//stdio.h--->sprintf int to char, strtol strint char* to int
 8000798:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <SysTick_Handler+0x70>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	461a      	mov	r2, r3
 800079e:	490d      	ldr	r1, [pc, #52]	; (80007d4 <SysTick_Handler+0x74>)
 80007a0:	480d      	ldr	r0, [pc, #52]	; (80007d8 <SysTick_Handler+0x78>)
 80007a2:	f006 fbed 	bl	8006f80 <siprintf>
		CDC_Transmit_FS(send, strlen(send));
 80007a6:	480d      	ldr	r0, [pc, #52]	; (80007dc <SysTick_Handler+0x7c>)
 80007a8:	f7ff fd12 	bl	80001d0 <strlen>
 80007ac:	4603      	mov	r3, r0
 80007ae:	4619      	mov	r1, r3
 80007b0:	480a      	ldr	r0, [pc, #40]	; (80007dc <SysTick_Handler+0x7c>)
 80007b2:	f005 ff57 	bl	8006664 <CDC_Transmit_FS>
		CDC_Transmit_FS(buffer, sizeof(buffer));
 80007b6:	2128      	movs	r1, #40	; 0x28
 80007b8:	4807      	ldr	r0, [pc, #28]	; (80007d8 <SysTick_Handler+0x78>)
 80007ba:	f005 ff53 	bl	8006664 <CDC_Transmit_FS>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007be:	f000 f8dd 	bl	800097c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000188 	.word	0x20000188
 80007cc:	10624dd3 	.word	0x10624dd3
 80007d0:	200001b4 	.word	0x200001b4
 80007d4:	08007874 	.word	0x08007874
 80007d8:	2000018c 	.word	0x2000018c
 80007dc:	20000000 	.word	0x20000000

080007e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007e4:	4802      	ldr	r0, [pc, #8]	; (80007f0 <OTG_FS_IRQHandler+0x10>)
 80007e6:	f000 fd0b 	bl	8001200 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200016a0 	.word	0x200016a0

080007f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007fc:	4a14      	ldr	r2, [pc, #80]	; (8000850 <_sbrk+0x5c>)
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <_sbrk+0x60>)
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <_sbrk+0x64>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d102      	bne.n	8000816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <_sbrk+0x64>)
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <_sbrk+0x68>)
 8000814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <_sbrk+0x64>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	693a      	ldr	r2, [r7, #16]
 8000820:	429a      	cmp	r2, r3
 8000822:	d207      	bcs.n	8000834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000824:	f006 fb7a 	bl	8006f1c <__errno>
 8000828:	4603      	mov	r3, r0
 800082a:	220c      	movs	r2, #12
 800082c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800082e:	f04f 33ff 	mov.w	r3, #4294967295
 8000832:	e009      	b.n	8000848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <_sbrk+0x64>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800083a:	4b07      	ldr	r3, [pc, #28]	; (8000858 <_sbrk+0x64>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	4a05      	ldr	r2, [pc, #20]	; (8000858 <_sbrk+0x64>)
 8000844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000846:	68fb      	ldr	r3, [r7, #12]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20020000 	.word	0x20020000
 8000854:	00000400 	.word	0x00000400
 8000858:	200001b8 	.word	0x200001b8
 800085c:	20001de0 	.word	0x20001de0

08000860 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <SystemInit+0x20>)
 8000866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800086a:	4a05      	ldr	r2, [pc, #20]	; (8000880 <SystemInit+0x20>)
 800086c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000888:	480d      	ldr	r0, [pc, #52]	; (80008c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800088a:	490e      	ldr	r1, [pc, #56]	; (80008c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800088c:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000890:	e002      	b.n	8000898 <LoopCopyDataInit>

08000892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000896:	3304      	adds	r3, #4

08000898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800089c:	d3f9      	bcc.n	8000892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089e:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008a0:	4c0b      	ldr	r4, [pc, #44]	; (80008d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a4:	e001      	b.n	80008aa <LoopFillZerobss>

080008a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a8:	3204      	adds	r2, #4

080008aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ac:	d3fb      	bcc.n	80008a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008ae:	f7ff ffd7 	bl	8000860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008b2:	f006 fb39 	bl	8006f28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008b6:	f7ff fe65 	bl	8000584 <main>
  bx  lr    
 80008ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c4:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 80008c8:	08007914 	.word	0x08007914
  ldr r2, =_sbss
 80008cc:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 80008d0:	20001ddc 	.word	0x20001ddc

080008d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008d4:	e7fe      	b.n	80008d4 <ADC_IRQHandler>
	...

080008d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <HAL_Init+0x40>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a0d      	ldr	r2, [pc, #52]	; (8000918 <HAL_Init+0x40>)
 80008e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008e8:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <HAL_Init+0x40>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <HAL_Init+0x40>)
 80008ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <HAL_Init+0x40>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a07      	ldr	r2, [pc, #28]	; (8000918 <HAL_Init+0x40>)
 80008fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000900:	2003      	movs	r0, #3
 8000902:	f000 f94f 	bl	8000ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000906:	200f      	movs	r0, #15
 8000908:	f000 f808 	bl	800091c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800090c:	f7ff fedc 	bl	80006c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023c00 	.word	0x40023c00

0800091c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <HAL_InitTick+0x54>)
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <HAL_InitTick+0x58>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4619      	mov	r1, r3
 800092e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000932:	fbb3 f3f1 	udiv	r3, r3, r1
 8000936:	fbb2 f3f3 	udiv	r3, r2, r3
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f967 	bl	8000c0e <HAL_SYSTICK_Config>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
 8000948:	e00e      	b.n	8000968 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b0f      	cmp	r3, #15
 800094e:	d80a      	bhi.n	8000966 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000950:	2200      	movs	r2, #0
 8000952:	6879      	ldr	r1, [r7, #4]
 8000954:	f04f 30ff 	mov.w	r0, #4294967295
 8000958:	f000 f92f 	bl	8000bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800095c:	4a06      	ldr	r2, [pc, #24]	; (8000978 <HAL_InitTick+0x5c>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000962:	2300      	movs	r3, #0
 8000964:	e000      	b.n	8000968 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
}
 8000968:	4618      	mov	r0, r3
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	2000000c 	.word	0x2000000c
 8000974:	20000014 	.word	0x20000014
 8000978:	20000010 	.word	0x20000010

0800097c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_IncTick+0x20>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_IncTick+0x24>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4413      	add	r3, r2
 800098c:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <HAL_IncTick+0x24>)
 800098e:	6013      	str	r3, [r2, #0]
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	20000014 	.word	0x20000014
 80009a0:	200001bc 	.word	0x200001bc

080009a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return uwTick;
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <HAL_GetTick+0x14>)
 80009aa:	681b      	ldr	r3, [r3, #0]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	200001bc 	.word	0x200001bc

080009bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c4:	f7ff ffee 	bl	80009a4 <HAL_GetTick>
 80009c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d4:	d005      	beq.n	80009e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <HAL_Delay+0x44>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	461a      	mov	r2, r3
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	4413      	add	r3, r2
 80009e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009e2:	bf00      	nop
 80009e4:	f7ff ffde 	bl	80009a4 <HAL_GetTick>
 80009e8:	4602      	mov	r2, r0
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d8f7      	bhi.n	80009e4 <HAL_Delay+0x28>
  {
  }
}
 80009f4:	bf00      	nop
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000014 	.word	0x20000014

08000a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a20:	4013      	ands	r3, r2
 8000a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a36:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	60d3      	str	r3, [r2, #12]
}
 8000a3c:	bf00      	nop
 8000a3e:	3714      	adds	r7, #20
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <__NVIC_GetPriorityGrouping+0x18>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	f003 0307 	and.w	r3, r3, #7
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	db0b      	blt.n	8000a92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	f003 021f 	and.w	r2, r3, #31
 8000a80:	4907      	ldr	r1, [pc, #28]	; (8000aa0 <__NVIC_EnableIRQ+0x38>)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	095b      	lsrs	r3, r3, #5
 8000a88:	2001      	movs	r0, #1
 8000a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000e100 	.word	0xe000e100

08000aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	6039      	str	r1, [r7, #0]
 8000aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	db0a      	blt.n	8000ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	490c      	ldr	r1, [pc, #48]	; (8000af0 <__NVIC_SetPriority+0x4c>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	0112      	lsls	r2, r2, #4
 8000ac4:	b2d2      	uxtb	r2, r2
 8000ac6:	440b      	add	r3, r1
 8000ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000acc:	e00a      	b.n	8000ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4908      	ldr	r1, [pc, #32]	; (8000af4 <__NVIC_SetPriority+0x50>)
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	f003 030f 	and.w	r3, r3, #15
 8000ada:	3b04      	subs	r3, #4
 8000adc:	0112      	lsls	r2, r2, #4
 8000ade:	b2d2      	uxtb	r2, r2
 8000ae0:	440b      	add	r3, r1
 8000ae2:	761a      	strb	r2, [r3, #24]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000e100 	.word	0xe000e100
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b089      	sub	sp, #36	; 0x24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	f1c3 0307 	rsb	r3, r3, #7
 8000b12:	2b04      	cmp	r3, #4
 8000b14:	bf28      	it	cs
 8000b16:	2304      	movcs	r3, #4
 8000b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	2b06      	cmp	r3, #6
 8000b20:	d902      	bls.n	8000b28 <NVIC_EncodePriority+0x30>
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3b03      	subs	r3, #3
 8000b26:	e000      	b.n	8000b2a <NVIC_EncodePriority+0x32>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43da      	mvns	r2, r3
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b40:	f04f 31ff 	mov.w	r1, #4294967295
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4a:	43d9      	mvns	r1, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	4313      	orrs	r3, r2
         );
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3724      	adds	r7, #36	; 0x24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b70:	d301      	bcc.n	8000b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b72:	2301      	movs	r3, #1
 8000b74:	e00f      	b.n	8000b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b76:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <SysTick_Config+0x40>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b7e:	210f      	movs	r1, #15
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	f7ff ff8e 	bl	8000aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <SysTick_Config+0x40>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <SysTick_Config+0x40>)
 8000b90:	2207      	movs	r2, #7
 8000b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	e000e010 	.word	0xe000e010

08000ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ff29 	bl	8000a04 <__NVIC_SetPriorityGrouping>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b086      	sub	sp, #24
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607a      	str	r2, [r7, #4]
 8000bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bcc:	f7ff ff3e 	bl	8000a4c <__NVIC_GetPriorityGrouping>
 8000bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	68b9      	ldr	r1, [r7, #8]
 8000bd6:	6978      	ldr	r0, [r7, #20]
 8000bd8:	f7ff ff8e 	bl	8000af8 <NVIC_EncodePriority>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be2:	4611      	mov	r1, r2
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff5d 	bl	8000aa4 <__NVIC_SetPriority>
}
 8000bea:	bf00      	nop
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff31 	bl	8000a68 <__NVIC_EnableIRQ>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff ffa2 	bl	8000b60 <SysTick_Config>
 8000c1c:	4603      	mov	r3, r0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	; 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
 8000c42:	e16b      	b.n	8000f1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c44:	2201      	movs	r2, #1
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	f040 815a 	bne.w	8000f16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f003 0303 	and.w	r3, r3, #3
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d005      	beq.n	8000c7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d130      	bne.n	8000cdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	2203      	movs	r2, #3
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	68da      	ldr	r2, [r3, #12]
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	091b      	lsrs	r3, r3, #4
 8000cc6:	f003 0201 	and.w	r2, r3, #1
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 0303 	and.w	r3, r3, #3
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	d017      	beq.n	8000d18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	689a      	ldr	r2, [r3, #8]
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d123      	bne.n	8000d6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	08da      	lsrs	r2, r3, #3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3208      	adds	r2, #8
 8000d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	f003 0307 	and.w	r3, r3, #7
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	220f      	movs	r2, #15
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	691a      	ldr	r2, [r3, #16]
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	08da      	lsrs	r2, r3, #3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3208      	adds	r2, #8
 8000d66:	69b9      	ldr	r1, [r7, #24]
 8000d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0203 	and.w	r2, r3, #3
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f000 80b4 	beq.w	8000f16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b60      	ldr	r3, [pc, #384]	; (8000f34 <HAL_GPIO_Init+0x30c>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	4a5f      	ldr	r2, [pc, #380]	; (8000f34 <HAL_GPIO_Init+0x30c>)
 8000db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dbe:	4b5d      	ldr	r3, [pc, #372]	; (8000f34 <HAL_GPIO_Init+0x30c>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dca:	4a5b      	ldr	r2, [pc, #364]	; (8000f38 <HAL_GPIO_Init+0x310>)
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	220f      	movs	r2, #15
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a52      	ldr	r2, [pc, #328]	; (8000f3c <HAL_GPIO_Init+0x314>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d02b      	beq.n	8000e4e <HAL_GPIO_Init+0x226>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a51      	ldr	r2, [pc, #324]	; (8000f40 <HAL_GPIO_Init+0x318>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d025      	beq.n	8000e4a <HAL_GPIO_Init+0x222>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a50      	ldr	r2, [pc, #320]	; (8000f44 <HAL_GPIO_Init+0x31c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d01f      	beq.n	8000e46 <HAL_GPIO_Init+0x21e>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a4f      	ldr	r2, [pc, #316]	; (8000f48 <HAL_GPIO_Init+0x320>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d019      	beq.n	8000e42 <HAL_GPIO_Init+0x21a>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a4e      	ldr	r2, [pc, #312]	; (8000f4c <HAL_GPIO_Init+0x324>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d013      	beq.n	8000e3e <HAL_GPIO_Init+0x216>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a4d      	ldr	r2, [pc, #308]	; (8000f50 <HAL_GPIO_Init+0x328>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d00d      	beq.n	8000e3a <HAL_GPIO_Init+0x212>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a4c      	ldr	r2, [pc, #304]	; (8000f54 <HAL_GPIO_Init+0x32c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d007      	beq.n	8000e36 <HAL_GPIO_Init+0x20e>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a4b      	ldr	r2, [pc, #300]	; (8000f58 <HAL_GPIO_Init+0x330>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d101      	bne.n	8000e32 <HAL_GPIO_Init+0x20a>
 8000e2e:	2307      	movs	r3, #7
 8000e30:	e00e      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e32:	2308      	movs	r3, #8
 8000e34:	e00c      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e36:	2306      	movs	r3, #6
 8000e38:	e00a      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e3a:	2305      	movs	r3, #5
 8000e3c:	e008      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e3e:	2304      	movs	r3, #4
 8000e40:	e006      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e42:	2303      	movs	r3, #3
 8000e44:	e004      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e46:	2302      	movs	r3, #2
 8000e48:	e002      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e000      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e4e:	2300      	movs	r3, #0
 8000e50:	69fa      	ldr	r2, [r7, #28]
 8000e52:	f002 0203 	and.w	r2, r2, #3
 8000e56:	0092      	lsls	r2, r2, #2
 8000e58:	4093      	lsls	r3, r2
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e60:	4935      	ldr	r1, [pc, #212]	; (8000f38 <HAL_GPIO_Init+0x310>)
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	089b      	lsrs	r3, r3, #2
 8000e66:	3302      	adds	r3, #2
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e6e:	4b3b      	ldr	r3, [pc, #236]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e92:	4a32      	ldr	r2, [pc, #200]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e98:	4b30      	ldr	r3, [pc, #192]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ebc:	4a27      	ldr	r2, [pc, #156]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ec2:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ee6:	4a1d      	ldr	r2, [pc, #116]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eec:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f10:	4a12      	ldr	r2, [pc, #72]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	61fb      	str	r3, [r7, #28]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2b0f      	cmp	r3, #15
 8000f20:	f67f ae90 	bls.w	8000c44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3724      	adds	r7, #36	; 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40013800 	.word	0x40013800
 8000f3c:	40020000 	.word	0x40020000
 8000f40:	40020400 	.word	0x40020400
 8000f44:	40020800 	.word	0x40020800
 8000f48:	40020c00 	.word	0x40020c00
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40021400 	.word	0x40021400
 8000f54:	40021800 	.word	0x40021800
 8000f58:	40021c00 	.word	0x40021c00
 8000f5c:	40013c00 	.word	0x40013c00

08000f60 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f62:	b08f      	sub	sp, #60	; 0x3c
 8000f64:	af0a      	add	r7, sp, #40	; 0x28
 8000f66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e10f      	b.n	8001192 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d106      	bne.n	8000f92 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f005 fcb1 	bl	80068f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2203      	movs	r2, #3
 8000f96:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d102      	bne.n	8000fac <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f001 ff98 	bl	8002ee6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	687e      	ldr	r6, [r7, #4]
 8000fbe:	466d      	mov	r5, sp
 8000fc0:	f106 0410 	add.w	r4, r6, #16
 8000fc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fcc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fd0:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fd4:	1d33      	adds	r3, r6, #4
 8000fd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fd8:	6838      	ldr	r0, [r7, #0]
 8000fda:	f001 fe6f 	bl	8002cbc <USB_CoreInit>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d005      	beq.n	8000ff0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e0d0      	b.n	8001192 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f001 ff86 	bl	8002f08 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]
 8001000:	e04a      	b.n	8001098 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001002:	7bfa      	ldrb	r2, [r7, #15]
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	4613      	mov	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	4413      	add	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	440b      	add	r3, r1
 8001010:	333d      	adds	r3, #61	; 0x3d
 8001012:	2201      	movs	r2, #1
 8001014:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001016:	7bfa      	ldrb	r2, [r7, #15]
 8001018:	6879      	ldr	r1, [r7, #4]
 800101a:	4613      	mov	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	4413      	add	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	440b      	add	r3, r1
 8001024:	333c      	adds	r3, #60	; 0x3c
 8001026:	7bfa      	ldrb	r2, [r7, #15]
 8001028:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800102a:	7bfa      	ldrb	r2, [r7, #15]
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	b298      	uxth	r0, r3
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	4613      	mov	r3, r2
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	4413      	add	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	440b      	add	r3, r1
 800103c:	3344      	adds	r3, #68	; 0x44
 800103e:	4602      	mov	r2, r0
 8001040:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001042:	7bfa      	ldrb	r2, [r7, #15]
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	4613      	mov	r3, r2
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	4413      	add	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	440b      	add	r3, r1
 8001050:	3340      	adds	r3, #64	; 0x40
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001056:	7bfa      	ldrb	r2, [r7, #15]
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	4613      	mov	r3, r2
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	4413      	add	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	440b      	add	r3, r1
 8001064:	3348      	adds	r3, #72	; 0x48
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	6879      	ldr	r1, [r7, #4]
 800106e:	4613      	mov	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	440b      	add	r3, r1
 8001078:	334c      	adds	r3, #76	; 0x4c
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800107e:	7bfa      	ldrb	r2, [r7, #15]
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	4613      	mov	r3, r2
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	4413      	add	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	440b      	add	r3, r1
 800108c:	3354      	adds	r3, #84	; 0x54
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	3301      	adds	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
 8001098:	7bfa      	ldrb	r2, [r7, #15]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d3af      	bcc.n	8001002 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	73fb      	strb	r3, [r7, #15]
 80010a6:	e044      	b.n	8001132 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010a8:	7bfa      	ldrb	r2, [r7, #15]
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	4613      	mov	r3, r2
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	4413      	add	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	440b      	add	r3, r1
 80010b6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010be:	7bfa      	ldrb	r2, [r7, #15]
 80010c0:	6879      	ldr	r1, [r7, #4]
 80010c2:	4613      	mov	r3, r2
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	4413      	add	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	440b      	add	r3, r1
 80010cc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80010d0:	7bfa      	ldrb	r2, [r7, #15]
 80010d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010d4:	7bfa      	ldrb	r2, [r7, #15]
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	4613      	mov	r3, r2
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	4413      	add	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	440b      	add	r3, r1
 80010e2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010ea:	7bfa      	ldrb	r2, [r7, #15]
 80010ec:	6879      	ldr	r1, [r7, #4]
 80010ee:	4613      	mov	r3, r2
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	4413      	add	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	440b      	add	r3, r1
 80010f8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001100:	7bfa      	ldrb	r2, [r7, #15]
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	4413      	add	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	440b      	add	r3, r1
 800110e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001116:	7bfa      	ldrb	r2, [r7, #15]
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	4613      	mov	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	4413      	add	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	440b      	add	r3, r1
 8001124:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	3301      	adds	r3, #1
 8001130:	73fb      	strb	r3, [r7, #15]
 8001132:	7bfa      	ldrb	r2, [r7, #15]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	429a      	cmp	r2, r3
 800113a:	d3b5      	bcc.n	80010a8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	603b      	str	r3, [r7, #0]
 8001142:	687e      	ldr	r6, [r7, #4]
 8001144:	466d      	mov	r5, sp
 8001146:	f106 0410 	add.w	r4, r6, #16
 800114a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800114c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800114e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001150:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001152:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001156:	e885 0003 	stmia.w	r5, {r0, r1}
 800115a:	1d33      	adds	r3, r6, #4
 800115c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800115e:	6838      	ldr	r0, [r7, #0]
 8001160:	f001 ff1e 	bl	8002fa0 <USB_DevInit>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d005      	beq.n	8001176 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2202      	movs	r2, #2
 800116e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e00d      	b.n	8001192 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f003 f86d 	bl	800426a <USB_DevDisconnect>

  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800119a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b084      	sub	sp, #16
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d101      	bne.n	80011b6 <HAL_PCD_Start+0x1c>
 80011b2:	2302      	movs	r3, #2
 80011b4:	e020      	b.n	80011f8 <HAL_PCD_Start+0x5e>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d109      	bne.n	80011da <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d005      	beq.n	80011da <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f001 fe70 	bl	8002ec4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f003 f81d 	bl	8004228 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b08d      	sub	sp, #52	; 0x34
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800120e:	6a3b      	ldr	r3, [r7, #32]
 8001210:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f003 f8db 	bl	80043d2 <USB_GetMode>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	f040 848a 	bne.w	8001b38 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f003 f83f 	bl	80042ac <USB_ReadInterrupts>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 8480 	beq.w	8001b36 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	0a1b      	lsrs	r3, r3, #8
 8001240:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f003 f82c 	bl	80042ac <USB_ReadInterrupts>
 8001254:	4603      	mov	r3, r0
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b02      	cmp	r3, #2
 800125c:	d107      	bne.n	800126e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	695a      	ldr	r2, [r3, #20]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f002 0202 	and.w	r2, r2, #2
 800126c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f003 f81a 	bl	80042ac <USB_ReadInterrupts>
 8001278:	4603      	mov	r3, r0
 800127a:	f003 0310 	and.w	r3, r3, #16
 800127e:	2b10      	cmp	r3, #16
 8001280:	d161      	bne.n	8001346 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	699a      	ldr	r2, [r3, #24]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 0210 	bic.w	r2, r2, #16
 8001290:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001292:	6a3b      	ldr	r3, [r7, #32]
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	f003 020f 	and.w	r2, r3, #15
 800129e:	4613      	mov	r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	4413      	add	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	3304      	adds	r3, #4
 80012b0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	0c5b      	lsrs	r3, r3, #17
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d124      	bne.n	8001308 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80012c4:	4013      	ands	r3, r2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d035      	beq.n	8001336 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	091b      	lsrs	r3, r3, #4
 80012d2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012d8:	b29b      	uxth	r3, r3
 80012da:	461a      	mov	r2, r3
 80012dc:	6a38      	ldr	r0, [r7, #32]
 80012de:	f002 fe51 	bl	8003f84 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	691a      	ldr	r2, [r3, #16]
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ee:	441a      	add	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	6a1a      	ldr	r2, [r3, #32]
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	091b      	lsrs	r3, r3, #4
 80012fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001300:	441a      	add	r2, r3
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	621a      	str	r2, [r3, #32]
 8001306:	e016      	b.n	8001336 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	0c5b      	lsrs	r3, r3, #17
 800130c:	f003 030f 	and.w	r3, r3, #15
 8001310:	2b06      	cmp	r3, #6
 8001312:	d110      	bne.n	8001336 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800131a:	2208      	movs	r2, #8
 800131c:	4619      	mov	r1, r3
 800131e:	6a38      	ldr	r0, [r7, #32]
 8001320:	f002 fe30 	bl	8003f84 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	6a1a      	ldr	r2, [r3, #32]
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	091b      	lsrs	r3, r3, #4
 800132c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001330:	441a      	add	r2, r3
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	699a      	ldr	r2, [r3, #24]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f042 0210 	orr.w	r2, r2, #16
 8001344:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f002 ffae 	bl	80042ac <USB_ReadInterrupts>
 8001350:	4603      	mov	r3, r0
 8001352:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001356:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800135a:	f040 80a7 	bne.w	80014ac <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f002 ffb3 	bl	80042d2 <USB_ReadDevAllOutEpInterrupt>
 800136c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800136e:	e099      	b.n	80014a4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 808e 	beq.w	8001498 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	4611      	mov	r1, r2
 8001386:	4618      	mov	r0, r3
 8001388:	f002 ffd7 	bl	800433a <USB_ReadDevOutEPInterrupt>
 800138c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00c      	beq.n	80013b2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	015a      	lsls	r2, r3, #5
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	4413      	add	r3, r2
 80013a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013a4:	461a      	mov	r2, r3
 80013a6:	2301      	movs	r3, #1
 80013a8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80013aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 fec3 	bl	8002138 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	f003 0308 	and.w	r3, r3, #8
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00c      	beq.n	80013d6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	015a      	lsls	r2, r3, #5
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	4413      	add	r3, r2
 80013c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013c8:	461a      	mov	r2, r3
 80013ca:	2308      	movs	r3, #8
 80013cc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 ff99 	bl	8002308 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	f003 0310 	and.w	r3, r3, #16
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d008      	beq.n	80013f2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	015a      	lsls	r2, r3, #5
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	4413      	add	r3, r2
 80013e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ec:	461a      	mov	r2, r3
 80013ee:	2310      	movs	r3, #16
 80013f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d030      	beq.n	800145e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001404:	2b80      	cmp	r3, #128	; 0x80
 8001406:	d109      	bne.n	800141c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	69fa      	ldr	r2, [r7, #28]
 8001412:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001416:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800141a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800141c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800141e:	4613      	mov	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	4413      	add	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	3304      	adds	r3, #4
 8001430:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	78db      	ldrb	r3, [r3, #3]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d108      	bne.n	800144c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	2200      	movs	r2, #0
 800143e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	b2db      	uxtb	r3, r3
 8001444:	4619      	mov	r1, r3
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f005 fb5a 	bl	8006b00 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	015a      	lsls	r2, r3, #5
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	4413      	add	r3, r2
 8001454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001458:	461a      	mov	r2, r3
 800145a:	2302      	movs	r3, #2
 800145c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	f003 0320 	and.w	r3, r3, #32
 8001464:	2b00      	cmp	r3, #0
 8001466:	d008      	beq.n	800147a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	015a      	lsls	r2, r3, #5
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	4413      	add	r3, r2
 8001470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001474:	461a      	mov	r2, r3
 8001476:	2320      	movs	r3, #32
 8001478:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d009      	beq.n	8001498 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	015a      	lsls	r2, r3, #5
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	4413      	add	r3, r2
 800148c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001490:	461a      	mov	r2, r3
 8001492:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001496:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	3301      	adds	r3, #1
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800149e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a0:	085b      	lsrs	r3, r3, #1
 80014a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f47f af62 	bne.w	8001370 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f002 fefb 	bl	80042ac <USB_ReadInterrupts>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014c0:	f040 80db 	bne.w	800167a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f002 ff1c 	bl	8004306 <USB_ReadDevAllInEpInterrupt>
 80014ce:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80014d4:	e0cd      	b.n	8001672 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80c2 	beq.w	8001666 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f002 ff42 	bl	8004376 <USB_ReadDevInEPInterrupt>
 80014f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d057      	beq.n	80015ae <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	f003 030f 	and.w	r3, r3, #15
 8001504:	2201      	movs	r2, #1
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	43db      	mvns	r3, r3
 8001518:	69f9      	ldr	r1, [r7, #28]
 800151a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800151e:	4013      	ands	r3, r2
 8001520:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	015a      	lsls	r2, r3, #5
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	4413      	add	r3, r2
 800152a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800152e:	461a      	mov	r2, r3
 8001530:	2301      	movs	r3, #1
 8001532:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d132      	bne.n	80015a2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001540:	4613      	mov	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	4413      	add	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	440b      	add	r3, r1
 800154a:	334c      	adds	r3, #76	; 0x4c
 800154c:	6819      	ldr	r1, [r3, #0]
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001552:	4613      	mov	r3, r2
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	4413      	add	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4403      	add	r3, r0
 800155c:	3348      	adds	r3, #72	; 0x48
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4419      	add	r1, r3
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001566:	4613      	mov	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	4413      	add	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4403      	add	r3, r0
 8001570:	334c      	adds	r3, #76	; 0x4c
 8001572:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	2b00      	cmp	r3, #0
 8001578:	d113      	bne.n	80015a2 <HAL_PCD_IRQHandler+0x3a2>
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800157e:	4613      	mov	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	4413      	add	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	440b      	add	r3, r1
 8001588:	3354      	adds	r3, #84	; 0x54
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d108      	bne.n	80015a2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6818      	ldr	r0, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800159a:	461a      	mov	r2, r3
 800159c:	2101      	movs	r1, #1
 800159e:	f002 ff49 	bl	8004434 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4619      	mov	r1, r3
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f005 fa24 	bl	80069f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d008      	beq.n	80015ca <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	015a      	lsls	r2, r3, #5
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	4413      	add	r3, r2
 80015c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015c4:	461a      	mov	r2, r3
 80015c6:	2308      	movs	r3, #8
 80015c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	f003 0310 	and.w	r3, r3, #16
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d008      	beq.n	80015e6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	015a      	lsls	r2, r3, #5
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	4413      	add	r3, r2
 80015dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015e0:	461a      	mov	r2, r3
 80015e2:	2310      	movs	r3, #16
 80015e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d008      	beq.n	8001602 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	015a      	lsls	r2, r3, #5
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	4413      	add	r3, r2
 80015f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015fc:	461a      	mov	r2, r3
 80015fe:	2340      	movs	r3, #64	; 0x40
 8001600:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d023      	beq.n	8001654 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800160c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800160e:	6a38      	ldr	r0, [r7, #32]
 8001610:	f001 fe2a 	bl	8003268 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001616:	4613      	mov	r3, r2
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4413      	add	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	3338      	adds	r3, #56	; 0x38
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	4413      	add	r3, r2
 8001624:	3304      	adds	r3, #4
 8001626:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	78db      	ldrb	r3, [r3, #3]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d108      	bne.n	8001642 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	2200      	movs	r2, #0
 8001634:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	b2db      	uxtb	r3, r3
 800163a:	4619      	mov	r1, r3
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f005 fa71 	bl	8006b24 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	015a      	lsls	r2, r3, #5
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	4413      	add	r3, r2
 800164a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800164e:	461a      	mov	r2, r3
 8001650:	2302      	movs	r3, #2
 8001652:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800165e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f000 fcdb 	bl	800201c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	3301      	adds	r3, #1
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800166c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166e:	085b      	lsrs	r3, r3, #1
 8001670:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001674:	2b00      	cmp	r3, #0
 8001676:	f47f af2e 	bne.w	80014d6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f002 fe14 	bl	80042ac <USB_ReadInterrupts>
 8001684:	4603      	mov	r3, r0
 8001686:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800168a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800168e:	d122      	bne.n	80016d6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	69fa      	ldr	r2, [r7, #28]
 800169a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800169e:	f023 0301 	bic.w	r3, r3, #1
 80016a2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d108      	bne.n	80016c0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016b6:	2100      	movs	r1, #0
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 fec3 	bl	8002444 <HAL_PCDEx_LPM_Callback>
 80016be:	e002      	b.n	80016c6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f005 fa0f 	bl	8006ae4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	695a      	ldr	r2, [r3, #20]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80016d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f002 fde6 	bl	80042ac <USB_ReadInterrupts>
 80016e0:	4603      	mov	r3, r0
 80016e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016ea:	d112      	bne.n	8001712 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d102      	bne.n	8001702 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f005 f9cb 	bl	8006a98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	695a      	ldr	r2, [r3, #20]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001710:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f002 fdc8 	bl	80042ac <USB_ReadInterrupts>
 800171c:	4603      	mov	r3, r0
 800171e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001726:	f040 80b7 	bne.w	8001898 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	69fa      	ldr	r2, [r7, #28]
 8001734:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001738:	f023 0301 	bic.w	r3, r3, #1
 800173c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2110      	movs	r1, #16
 8001744:	4618      	mov	r0, r3
 8001746:	f001 fd8f 	bl	8003268 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800174a:	2300      	movs	r3, #0
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800174e:	e046      	b.n	80017de <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001752:	015a      	lsls	r2, r3, #5
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	4413      	add	r3, r2
 8001758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800175c:	461a      	mov	r2, r3
 800175e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001762:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001766:	015a      	lsls	r2, r3, #5
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	4413      	add	r3, r2
 800176c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001774:	0151      	lsls	r1, r2, #5
 8001776:	69fa      	ldr	r2, [r7, #28]
 8001778:	440a      	add	r2, r1
 800177a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800177e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001782:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001786:	015a      	lsls	r2, r3, #5
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	4413      	add	r3, r2
 800178c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001790:	461a      	mov	r2, r3
 8001792:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001796:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179a:	015a      	lsls	r2, r3, #5
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	4413      	add	r3, r2
 80017a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017a8:	0151      	lsls	r1, r2, #5
 80017aa:	69fa      	ldr	r2, [r7, #28]
 80017ac:	440a      	add	r2, r1
 80017ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017b6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80017b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ba:	015a      	lsls	r2, r3, #5
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	4413      	add	r3, r2
 80017c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017c8:	0151      	lsls	r1, r2, #5
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	440a      	add	r2, r1
 80017ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017d6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017da:	3301      	adds	r3, #1
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d3b3      	bcc.n	8001750 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	69fa      	ldr	r2, [r7, #28]
 80017f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017f6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80017fa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001800:	2b00      	cmp	r3, #0
 8001802:	d016      	beq.n	8001832 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800180a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800180e:	69fa      	ldr	r2, [r7, #28]
 8001810:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001814:	f043 030b 	orr.w	r3, r3, #11
 8001818:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001824:	69fa      	ldr	r2, [r7, #28]
 8001826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800182a:	f043 030b 	orr.w	r3, r3, #11
 800182e:	6453      	str	r3, [r2, #68]	; 0x44
 8001830:	e015      	b.n	800185e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	69fa      	ldr	r2, [r7, #28]
 800183c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001840:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001844:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001848:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	69fa      	ldr	r2, [r7, #28]
 8001854:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001858:	f043 030b 	orr.w	r3, r3, #11
 800185c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	69fa      	ldr	r2, [r7, #28]
 8001868:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800186c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001870:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6818      	ldr	r0, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001882:	461a      	mov	r2, r3
 8001884:	f002 fdd6 	bl	8004434 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	695a      	ldr	r2, [r3, #20]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001896:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f002 fd05 	bl	80042ac <USB_ReadInterrupts>
 80018a2:	4603      	mov	r3, r0
 80018a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ac:	d124      	bne.n	80018f8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f002 fd9b 	bl	80043ee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f001 fd50 	bl	8003362 <USB_GetDevSpeed>
 80018c2:	4603      	mov	r3, r0
 80018c4:	461a      	mov	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681c      	ldr	r4, [r3, #0]
 80018ce:	f001 f9e9 	bl	8002ca4 <HAL_RCC_GetHCLKFreq>
 80018d2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	461a      	mov	r2, r3
 80018dc:	4620      	mov	r0, r4
 80018de:	f001 fa4f 	bl	8002d80 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f005 f8af 	bl	8006a46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	695a      	ldr	r2, [r3, #20]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80018f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f002 fcd5 	bl	80042ac <USB_ReadInterrupts>
 8001902:	4603      	mov	r3, r0
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	2b08      	cmp	r3, #8
 800190a:	d10a      	bne.n	8001922 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f005 f88c 	bl	8006a2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	695a      	ldr	r2, [r3, #20]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f002 0208 	and.w	r2, r2, #8
 8001920:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f002 fcc0 	bl	80042ac <USB_ReadInterrupts>
 800192c:	4603      	mov	r3, r0
 800192e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001932:	2b80      	cmp	r3, #128	; 0x80
 8001934:	d122      	bne.n	800197c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001936:	6a3b      	ldr	r3, [r7, #32]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001942:	2301      	movs	r3, #1
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
 8001946:	e014      	b.n	8001972 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800194c:	4613      	mov	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d105      	bne.n	800196c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	b2db      	uxtb	r3, r3
 8001964:	4619      	mov	r1, r3
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 fb27 	bl	8001fba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	3301      	adds	r3, #1
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001978:	429a      	cmp	r2, r3
 800197a:	d3e5      	bcc.n	8001948 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f002 fc93 	bl	80042ac <USB_ReadInterrupts>
 8001986:	4603      	mov	r3, r0
 8001988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800198c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001990:	d13b      	bne.n	8001a0a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001992:	2301      	movs	r3, #1
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
 8001996:	e02b      	b.n	80019f0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	015a      	lsls	r2, r3, #5
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	4413      	add	r3, r2
 80019a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ac:	4613      	mov	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4413      	add	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	3340      	adds	r3, #64	; 0x40
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d115      	bne.n	80019ea <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80019be:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	da12      	bge.n	80019ea <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c8:	4613      	mov	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	4413      	add	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	333f      	adds	r3, #63	; 0x3f
 80019d4:	2201      	movs	r2, #1
 80019d6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	4619      	mov	r1, r3
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 fae8 	bl	8001fba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	3301      	adds	r3, #1
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d3ce      	bcc.n	8001998 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	695a      	ldr	r2, [r3, #20]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f002 fc4c 	bl	80042ac <USB_ReadInterrupts>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a1e:	d155      	bne.n	8001acc <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a20:	2301      	movs	r3, #1
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
 8001a24:	e045      	b.n	8001ab2 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	015a      	lsls	r2, r3, #5
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	4413      	add	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	440b      	add	r3, r1
 8001a44:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d12e      	bne.n	8001aac <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a4e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	da2b      	bge.n	8001aac <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001a60:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d121      	bne.n	8001aac <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	4413      	add	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	440b      	add	r3, r1
 8001a76:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10a      	bne.n	8001aac <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001aa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aa8:	6053      	str	r3, [r2, #4]
            break;
 8001aaa:	e007      	b.n	8001abc <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	3301      	adds	r3, #1
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d3b4      	bcc.n	8001a26 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	695a      	ldr	r2, [r3, #20]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001aca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f002 fbeb 	bl	80042ac <USB_ReadInterrupts>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae0:	d10a      	bne.n	8001af8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f005 f830 	bl	8006b48 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	695a      	ldr	r2, [r3, #20]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001af6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f002 fbd5 	bl	80042ac <USB_ReadInterrupts>
 8001b02:	4603      	mov	r3, r0
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d115      	bne.n	8001b38 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f005 f820 	bl	8006b64 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6859      	ldr	r1, [r3, #4]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	e000      	b.n	8001b38 <HAL_PCD_IRQHandler+0x938>
      return;
 8001b36:	bf00      	nop
    }
  }
}
 8001b38:	3734      	adds	r7, #52	; 0x34
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd90      	pop	{r4, r7, pc}

08001b3e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	460b      	mov	r3, r1
 8001b48:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_PCD_SetAddress+0x1a>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e013      	b.n	8001b80 <HAL_PCD_SetAddress+0x42>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	78fa      	ldrb	r2, [r7, #3]
 8001b64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	78fa      	ldrb	r2, [r7, #3]
 8001b6e:	4611      	mov	r1, r2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f002 fb33 	bl	80041dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	4608      	mov	r0, r1
 8001b92:	4611      	mov	r1, r2
 8001b94:	461a      	mov	r2, r3
 8001b96:	4603      	mov	r3, r0
 8001b98:	70fb      	strb	r3, [r7, #3]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	803b      	strh	r3, [r7, #0]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ba6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	da0f      	bge.n	8001bce <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	f003 020f 	and.w	r2, r3, #15
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	4413      	add	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	3338      	adds	r3, #56	; 0x38
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	705a      	strb	r2, [r3, #1]
 8001bcc:	e00f      	b.n	8001bee <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bce:	78fb      	ldrb	r3, [r7, #3]
 8001bd0:	f003 020f 	and.w	r2, r3, #15
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	4413      	add	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	4413      	add	r3, r2
 8001be4:	3304      	adds	r3, #4
 8001be6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001bee:	78fb      	ldrb	r3, [r7, #3]
 8001bf0:	f003 030f 	and.w	r3, r3, #15
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001bfa:	883a      	ldrh	r2, [r7, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	78ba      	ldrb	r2, [r7, #2]
 8001c04:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	785b      	ldrb	r3, [r3, #1]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d004      	beq.n	8001c18 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c18:	78bb      	ldrb	r3, [r7, #2]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d102      	bne.n	8001c24 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d101      	bne.n	8001c32 <HAL_PCD_EP_Open+0xaa>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e00e      	b.n	8001c50 <HAL_PCD_EP_Open+0xc8>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68f9      	ldr	r1, [r7, #12]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f001 fbb3 	bl	80033ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001c4e:	7afb      	ldrb	r3, [r7, #11]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	da0f      	bge.n	8001c8c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c6c:	78fb      	ldrb	r3, [r7, #3]
 8001c6e:	f003 020f 	and.w	r2, r3, #15
 8001c72:	4613      	mov	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	4413      	add	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	3338      	adds	r3, #56	; 0x38
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	4413      	add	r3, r2
 8001c80:	3304      	adds	r3, #4
 8001c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2201      	movs	r2, #1
 8001c88:	705a      	strb	r2, [r3, #1]
 8001c8a:	e00f      	b.n	8001cac <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c8c:	78fb      	ldrb	r3, [r7, #3]
 8001c8e:	f003 020f 	and.w	r2, r3, #15
 8001c92:	4613      	mov	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4413      	add	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d101      	bne.n	8001cc6 <HAL_PCD_EP_Close+0x6e>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e00e      	b.n	8001ce4 <HAL_PCD_EP_Close+0x8c>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68f9      	ldr	r1, [r7, #12]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f001 fbf1 	bl	80034bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cfc:	7afb      	ldrb	r3, [r7, #11]
 8001cfe:	f003 020f 	and.w	r2, r3, #15
 8001d02:	4613      	mov	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4413      	add	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	4413      	add	r3, r2
 8001d12:	3304      	adds	r3, #4
 8001d14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2200      	movs	r2, #0
 8001d26:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d2e:	7afb      	ldrb	r3, [r7, #11]
 8001d30:	f003 030f 	and.w	r3, r3, #15
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d102      	bne.n	8001d48 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d48:	7afb      	ldrb	r3, [r7, #11]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d109      	bne.n	8001d66 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	6979      	ldr	r1, [r7, #20]
 8001d60:	f001 fed0 	bl	8003b04 <USB_EP0StartXfer>
 8001d64:	e008      	b.n	8001d78 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6818      	ldr	r0, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	461a      	mov	r2, r3
 8001d72:	6979      	ldr	r1, [r7, #20]
 8001d74:	f001 fc7e 	bl	8003674 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d8e:	78fb      	ldrb	r3, [r7, #3]
 8001d90:	f003 020f 	and.w	r2, r3, #15
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	440b      	add	r3, r1
 8001da0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001da4:	681b      	ldr	r3, [r3, #0]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b086      	sub	sp, #24
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	60f8      	str	r0, [r7, #12]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	603b      	str	r3, [r7, #0]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dc2:	7afb      	ldrb	r3, [r7, #11]
 8001dc4:	f003 020f 	and.w	r2, r3, #15
 8001dc8:	4613      	mov	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	3338      	adds	r3, #56	; 0x38
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	2200      	movs	r2, #0
 8001dea:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	2201      	movs	r2, #1
 8001df0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001df2:	7afb      	ldrb	r3, [r7, #11]
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d102      	bne.n	8001e0c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e0c:	7afb      	ldrb	r3, [r7, #11]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d109      	bne.n	8001e2a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	461a      	mov	r2, r3
 8001e22:	6979      	ldr	r1, [r7, #20]
 8001e24:	f001 fe6e 	bl	8003b04 <USB_EP0StartXfer>
 8001e28:	e008      	b.n	8001e3c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6818      	ldr	r0, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	461a      	mov	r2, r3
 8001e36:	6979      	ldr	r1, [r7, #20]
 8001e38:	f001 fc1c 	bl	8003674 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b084      	sub	sp, #16
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	f003 020f 	and.w	r2, r3, #15
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d901      	bls.n	8001e64 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e050      	b.n	8001f06 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	da0f      	bge.n	8001e8c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	f003 020f 	and.w	r2, r3, #15
 8001e72:	4613      	mov	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	4413      	add	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	3338      	adds	r3, #56	; 0x38
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	4413      	add	r3, r2
 8001e80:	3304      	adds	r3, #4
 8001e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2201      	movs	r2, #1
 8001e88:	705a      	strb	r2, [r3, #1]
 8001e8a:	e00d      	b.n	8001ea8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e8c:	78fa      	ldrb	r2, [r7, #3]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	4413      	add	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	f003 030f 	and.w	r3, r3, #15
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <HAL_PCD_EP_SetStall+0x82>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e01e      	b.n	8001f06 <HAL_PCD_EP_SetStall+0xc0>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68f9      	ldr	r1, [r7, #12]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f002 f8ac 	bl	8004034 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10a      	bne.n	8001efc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	b2d9      	uxtb	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f002 fa9c 	bl	8004434 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b084      	sub	sp, #16
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	460b      	mov	r3, r1
 8001f18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	f003 020f 	and.w	r2, r3, #15
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d901      	bls.n	8001f2c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e042      	b.n	8001fb2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	da0f      	bge.n	8001f54 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	f003 020f 	and.w	r2, r3, #15
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	3338      	adds	r3, #56	; 0x38
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	4413      	add	r3, r2
 8001f48:	3304      	adds	r3, #4
 8001f4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	705a      	strb	r2, [r3, #1]
 8001f52:	e00f      	b.n	8001f74 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	f003 020f 	and.w	r2, r3, #15
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	4413      	add	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f7a:	78fb      	ldrb	r3, [r7, #3]
 8001f7c:	f003 030f 	and.w	r3, r3, #15
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d101      	bne.n	8001f94 <HAL_PCD_EP_ClrStall+0x86>
 8001f90:	2302      	movs	r3, #2
 8001f92:	e00e      	b.n	8001fb2 <HAL_PCD_EP_ClrStall+0xa4>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68f9      	ldr	r1, [r7, #12]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f002 f8b4 	bl	8004110 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b084      	sub	sp, #16
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001fc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	da0c      	bge.n	8001fe8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fce:	78fb      	ldrb	r3, [r7, #3]
 8001fd0:	f003 020f 	and.w	r2, r3, #15
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4413      	add	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	3338      	adds	r3, #56	; 0x38
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	e00c      	b.n	8002002 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fe8:	78fb      	ldrb	r3, [r7, #3]
 8001fea:	f003 020f 	and.w	r2, r3, #15
 8001fee:	4613      	mov	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3304      	adds	r3, #4
 8002000:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68f9      	ldr	r1, [r7, #12]
 8002008:	4618      	mov	r0, r3
 800200a:	f001 fed3 	bl	8003db4 <USB_EPStopXfer>
 800200e:	4603      	mov	r3, r0
 8002010:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002012:	7afb      	ldrb	r3, [r7, #11]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	; 0x28
 8002020:	af02      	add	r7, sp, #8
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	4613      	mov	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4413      	add	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	3338      	adds	r3, #56	; 0x38
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	4413      	add	r3, r2
 8002040:	3304      	adds	r3, #4
 8002042:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6a1a      	ldr	r2, [r3, #32]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	429a      	cmp	r2, r3
 800204e:	d901      	bls.n	8002054 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e06c      	b.n	800212e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	699a      	ldr	r2, [r3, #24]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	69fa      	ldr	r2, [r7, #28]
 8002066:	429a      	cmp	r2, r3
 8002068:	d902      	bls.n	8002070 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	3303      	adds	r3, #3
 8002074:	089b      	lsrs	r3, r3, #2
 8002076:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002078:	e02b      	b.n	80020d2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	699a      	ldr	r2, [r3, #24]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	429a      	cmp	r2, r3
 800208e:	d902      	bls.n	8002096 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3303      	adds	r3, #3
 800209a:	089b      	lsrs	r3, r3, #2
 800209c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6919      	ldr	r1, [r3, #16]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	4603      	mov	r3, r0
 80020b4:	6978      	ldr	r0, [r7, #20]
 80020b6:	f001 ff27 	bl	8003f08 <USB_WritePacket>

    ep->xfer_buff  += len;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	691a      	ldr	r2, [r3, #16]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	441a      	add	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6a1a      	ldr	r2, [r3, #32]
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	441a      	add	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	015a      	lsls	r2, r3, #5
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4413      	add	r3, r2
 80020da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d809      	bhi.n	80020fc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6a1a      	ldr	r2, [r3, #32]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d203      	bcs.n	80020fc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1be      	bne.n	800207a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	699a      	ldr	r2, [r3, #24]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	429a      	cmp	r2, r3
 8002106:	d811      	bhi.n	800212c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	2201      	movs	r2, #1
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800211c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	43db      	mvns	r3, r3
 8002122:	6939      	ldr	r1, [r7, #16]
 8002124:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002128:	4013      	ands	r3, r2
 800212a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3720      	adds	r7, #32
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	333c      	adds	r3, #60	; 0x3c
 8002150:	3304      	adds	r3, #4
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	015a      	lsls	r2, r3, #5
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	4413      	add	r3, r2
 800215e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d17b      	bne.n	8002266 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b00      	cmp	r3, #0
 8002176:	d015      	beq.n	80021a4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	4a61      	ldr	r2, [pc, #388]	; (8002300 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	f240 80b9 	bls.w	80022f4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 80b3 	beq.w	80022f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	015a      	lsls	r2, r3, #5
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	4413      	add	r3, r2
 8002196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800219a:	461a      	mov	r2, r3
 800219c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021a0:	6093      	str	r3, [r2, #8]
 80021a2:	e0a7      	b.n	80022f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	f003 0320 	and.w	r3, r3, #32
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d009      	beq.n	80021c2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ba:	461a      	mov	r2, r3
 80021bc:	2320      	movs	r3, #32
 80021be:	6093      	str	r3, [r2, #8]
 80021c0:	e098      	b.n	80022f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f040 8093 	bne.w	80022f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	4a4b      	ldr	r2, [pc, #300]	; (8002300 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d90f      	bls.n	80021f6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00a      	beq.n	80021f6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	015a      	lsls	r2, r3, #5
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	4413      	add	r3, r2
 80021e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ec:	461a      	mov	r2, r3
 80021ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021f2:	6093      	str	r3, [r2, #8]
 80021f4:	e07e      	b.n	80022f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	4613      	mov	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4413      	add	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	4413      	add	r3, r2
 8002208:	3304      	adds	r3, #4
 800220a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	69da      	ldr	r2, [r3, #28]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	0159      	lsls	r1, r3, #5
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	440b      	add	r3, r1
 8002218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002222:	1ad2      	subs	r2, r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d114      	bne.n	8002258 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6818      	ldr	r0, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002240:	461a      	mov	r2, r3
 8002242:	2101      	movs	r1, #1
 8002244:	f002 f8f6 	bl	8004434 <USB_EP0_OutStart>
 8002248:	e006      	b.n	8002258 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	691a      	ldr	r2, [r3, #16]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	441a      	add	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	4619      	mov	r1, r3
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f004 fbae 	bl	80069c0 <HAL_PCD_DataOutStageCallback>
 8002264:	e046      	b.n	80022f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	4a26      	ldr	r2, [pc, #152]	; (8002304 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d124      	bne.n	80022b8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00a      	beq.n	800228e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	4413      	add	r3, r2
 8002280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002284:	461a      	mov	r2, r3
 8002286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800228a:	6093      	str	r3, [r2, #8]
 800228c:	e032      	b.n	80022f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	f003 0320 	and.w	r3, r3, #32
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022a4:	461a      	mov	r2, r3
 80022a6:	2320      	movs	r3, #32
 80022a8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	4619      	mov	r1, r3
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f004 fb85 	bl	80069c0 <HAL_PCD_DataOutStageCallback>
 80022b6:	e01d      	b.n	80022f4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d114      	bne.n	80022e8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	4613      	mov	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	4413      	add	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	440b      	add	r3, r1
 80022cc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d108      	bne.n	80022e8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6818      	ldr	r0, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022e0:	461a      	mov	r2, r3
 80022e2:	2100      	movs	r1, #0
 80022e4:	f002 f8a6 	bl	8004434 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	4619      	mov	r1, r3
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f004 fb66 	bl	80069c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3720      	adds	r7, #32
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	4f54300a 	.word	0x4f54300a
 8002304:	4f54310a 	.word	0x4f54310a

08002308 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	333c      	adds	r3, #60	; 0x3c
 8002320:	3304      	adds	r3, #4
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	015a      	lsls	r2, r3, #5
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4413      	add	r3, r2
 800232e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	4a15      	ldr	r2, [pc, #84]	; (8002390 <PCD_EP_OutSetupPacket_int+0x88>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d90e      	bls.n	800235c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002344:	2b00      	cmp	r3, #0
 8002346:	d009      	beq.n	800235c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4413      	add	r3, r2
 8002350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002354:	461a      	mov	r2, r3
 8002356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800235a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f004 fb1d 	bl	800699c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <PCD_EP_OutSetupPacket_int+0x88>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d90c      	bls.n	8002384 <PCD_EP_OutSetupPacket_int+0x7c>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d108      	bne.n	8002384 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800237c:	461a      	mov	r2, r3
 800237e:	2101      	movs	r1, #1
 8002380:	f002 f858 	bl	8004434 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	4f54300a 	.word	0x4f54300a

08002394 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	70fb      	strb	r3, [r7, #3]
 80023a0:	4613      	mov	r3, r2
 80023a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023ac:	78fb      	ldrb	r3, [r7, #3]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d107      	bne.n	80023c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023b2:	883b      	ldrh	r3, [r7, #0]
 80023b4:	0419      	lsls	r1, r3, #16
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	430a      	orrs	r2, r1
 80023be:	629a      	str	r2, [r3, #40]	; 0x28
 80023c0:	e028      	b.n	8002414 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	0c1b      	lsrs	r3, r3, #16
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	4413      	add	r3, r2
 80023ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]
 80023d4:	e00d      	b.n	80023f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	3340      	adds	r3, #64	; 0x40
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	0c1b      	lsrs	r3, r3, #16
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	4413      	add	r3, r2
 80023ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
 80023ee:	3301      	adds	r3, #1
 80023f0:	73fb      	strb	r3, [r7, #15]
 80023f2:	7bfa      	ldrb	r2, [r7, #15]
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d3ec      	bcc.n	80023d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023fc:	883b      	ldrh	r3, [r7, #0]
 80023fe:	0418      	lsls	r0, r3, #16
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6819      	ldr	r1, [r3, #0]
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	3b01      	subs	r3, #1
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	4302      	orrs	r2, r0
 800240c:	3340      	adds	r3, #64	; 0x40
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	460b      	mov	r3, r1
 800242c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	887a      	ldrh	r2, [r7, #2]
 8002434:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e267      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d075      	beq.n	8002566 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800247a:	4b88      	ldr	r3, [pc, #544]	; (800269c <HAL_RCC_OscConfig+0x240>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 030c 	and.w	r3, r3, #12
 8002482:	2b04      	cmp	r3, #4
 8002484:	d00c      	beq.n	80024a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002486:	4b85      	ldr	r3, [pc, #532]	; (800269c <HAL_RCC_OscConfig+0x240>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800248e:	2b08      	cmp	r3, #8
 8002490:	d112      	bne.n	80024b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002492:	4b82      	ldr	r3, [pc, #520]	; (800269c <HAL_RCC_OscConfig+0x240>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800249a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800249e:	d10b      	bne.n	80024b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a0:	4b7e      	ldr	r3, [pc, #504]	; (800269c <HAL_RCC_OscConfig+0x240>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d05b      	beq.n	8002564 <HAL_RCC_OscConfig+0x108>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d157      	bne.n	8002564 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e242      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c0:	d106      	bne.n	80024d0 <HAL_RCC_OscConfig+0x74>
 80024c2:	4b76      	ldr	r3, [pc, #472]	; (800269c <HAL_RCC_OscConfig+0x240>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a75      	ldr	r2, [pc, #468]	; (800269c <HAL_RCC_OscConfig+0x240>)
 80024c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	e01d      	b.n	800250c <HAL_RCC_OscConfig+0xb0>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024d8:	d10c      	bne.n	80024f4 <HAL_RCC_OscConfig+0x98>
 80024da:	4b70      	ldr	r3, [pc, #448]	; (800269c <HAL_RCC_OscConfig+0x240>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a6f      	ldr	r2, [pc, #444]	; (800269c <HAL_RCC_OscConfig+0x240>)
 80024e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	4b6d      	ldr	r3, [pc, #436]	; (800269c <HAL_RCC_OscConfig+0x240>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a6c      	ldr	r2, [pc, #432]	; (800269c <HAL_RCC_OscConfig+0x240>)
 80024ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	e00b      	b.n	800250c <HAL_RCC_OscConfig+0xb0>
 80024f4:	4b69      	ldr	r3, [pc, #420]	; (800269c <HAL_RCC_OscConfig+0x240>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a68      	ldr	r2, [pc, #416]	; (800269c <HAL_RCC_OscConfig+0x240>)
 80024fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	4b66      	ldr	r3, [pc, #408]	; (800269c <HAL_RCC_OscConfig+0x240>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a65      	ldr	r2, [pc, #404]	; (800269c <HAL_RCC_OscConfig+0x240>)
 8002506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800250a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d013      	beq.n	800253c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002514:	f7fe fa46 	bl	80009a4 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800251c:	f7fe fa42 	bl	80009a4 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	; 0x64
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e207      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252e:	4b5b      	ldr	r3, [pc, #364]	; (800269c <HAL_RCC_OscConfig+0x240>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0xc0>
 800253a:	e014      	b.n	8002566 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7fe fa32 	bl	80009a4 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002544:	f7fe fa2e 	bl	80009a4 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	; 0x64
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e1f3      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002556:	4b51      	ldr	r3, [pc, #324]	; (800269c <HAL_RCC_OscConfig+0x240>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0xe8>
 8002562:	e000      	b.n	8002566 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d063      	beq.n	800263a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002572:	4b4a      	ldr	r3, [pc, #296]	; (800269c <HAL_RCC_OscConfig+0x240>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 030c 	and.w	r3, r3, #12
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00b      	beq.n	8002596 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800257e:	4b47      	ldr	r3, [pc, #284]	; (800269c <HAL_RCC_OscConfig+0x240>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002586:	2b08      	cmp	r3, #8
 8002588:	d11c      	bne.n	80025c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800258a:	4b44      	ldr	r3, [pc, #272]	; (800269c <HAL_RCC_OscConfig+0x240>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d116      	bne.n	80025c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002596:	4b41      	ldr	r3, [pc, #260]	; (800269c <HAL_RCC_OscConfig+0x240>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d005      	beq.n	80025ae <HAL_RCC_OscConfig+0x152>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d001      	beq.n	80025ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e1c7      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ae:	4b3b      	ldr	r3, [pc, #236]	; (800269c <HAL_RCC_OscConfig+0x240>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	4937      	ldr	r1, [pc, #220]	; (800269c <HAL_RCC_OscConfig+0x240>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c2:	e03a      	b.n	800263a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d020      	beq.n	800260e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025cc:	4b34      	ldr	r3, [pc, #208]	; (80026a0 <HAL_RCC_OscConfig+0x244>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d2:	f7fe f9e7 	bl	80009a4 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025da:	f7fe f9e3 	bl	80009a4 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e1a8      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ec:	4b2b      	ldr	r3, [pc, #172]	; (800269c <HAL_RCC_OscConfig+0x240>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0f0      	beq.n	80025da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f8:	4b28      	ldr	r3, [pc, #160]	; (800269c <HAL_RCC_OscConfig+0x240>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	4925      	ldr	r1, [pc, #148]	; (800269c <HAL_RCC_OscConfig+0x240>)
 8002608:	4313      	orrs	r3, r2
 800260a:	600b      	str	r3, [r1, #0]
 800260c:	e015      	b.n	800263a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800260e:	4b24      	ldr	r3, [pc, #144]	; (80026a0 <HAL_RCC_OscConfig+0x244>)
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002614:	f7fe f9c6 	bl	80009a4 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800261c:	f7fe f9c2 	bl	80009a4 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e187      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262e:	4b1b      	ldr	r3, [pc, #108]	; (800269c <HAL_RCC_OscConfig+0x240>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d036      	beq.n	80026b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d016      	beq.n	800267c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800264e:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <HAL_RCC_OscConfig+0x248>)
 8002650:	2201      	movs	r2, #1
 8002652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002654:	f7fe f9a6 	bl	80009a4 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800265c:	f7fe f9a2 	bl	80009a4 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e167      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800266e:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_RCC_OscConfig+0x240>)
 8002670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x200>
 800267a:	e01b      	b.n	80026b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800267c:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <HAL_RCC_OscConfig+0x248>)
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002682:	f7fe f98f 	bl	80009a4 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002688:	e00e      	b.n	80026a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800268a:	f7fe f98b 	bl	80009a4 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d907      	bls.n	80026a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e150      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
 800269c:	40023800 	.word	0x40023800
 80026a0:	42470000 	.word	0x42470000
 80026a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a8:	4b88      	ldr	r3, [pc, #544]	; (80028cc <HAL_RCC_OscConfig+0x470>)
 80026aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1ea      	bne.n	800268a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 8097 	beq.w	80027f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c2:	2300      	movs	r3, #0
 80026c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026c6:	4b81      	ldr	r3, [pc, #516]	; (80028cc <HAL_RCC_OscConfig+0x470>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10f      	bne.n	80026f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	4b7d      	ldr	r3, [pc, #500]	; (80028cc <HAL_RCC_OscConfig+0x470>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	4a7c      	ldr	r2, [pc, #496]	; (80028cc <HAL_RCC_OscConfig+0x470>)
 80026dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e0:	6413      	str	r3, [r2, #64]	; 0x40
 80026e2:	4b7a      	ldr	r3, [pc, #488]	; (80028cc <HAL_RCC_OscConfig+0x470>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ee:	2301      	movs	r3, #1
 80026f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f2:	4b77      	ldr	r3, [pc, #476]	; (80028d0 <HAL_RCC_OscConfig+0x474>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d118      	bne.n	8002730 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026fe:	4b74      	ldr	r3, [pc, #464]	; (80028d0 <HAL_RCC_OscConfig+0x474>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a73      	ldr	r2, [pc, #460]	; (80028d0 <HAL_RCC_OscConfig+0x474>)
 8002704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800270a:	f7fe f94b 	bl	80009a4 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002712:	f7fe f947 	bl	80009a4 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e10c      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002724:	4b6a      	ldr	r3, [pc, #424]	; (80028d0 <HAL_RCC_OscConfig+0x474>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d106      	bne.n	8002746 <HAL_RCC_OscConfig+0x2ea>
 8002738:	4b64      	ldr	r3, [pc, #400]	; (80028cc <HAL_RCC_OscConfig+0x470>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273c:	4a63      	ldr	r2, [pc, #396]	; (80028cc <HAL_RCC_OscConfig+0x470>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6713      	str	r3, [r2, #112]	; 0x70
 8002744:	e01c      	b.n	8002780 <HAL_RCC_OscConfig+0x324>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2b05      	cmp	r3, #5
 800274c:	d10c      	bne.n	8002768 <HAL_RCC_OscConfig+0x30c>
 800274e:	4b5f      	ldr	r3, [pc, #380]	; (80028cc <HAL_RCC_OscConfig+0x470>)
 8002750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002752:	4a5e      	ldr	r2, [pc, #376]	; (80028cc <HAL_RCC_OscConfig+0x470>)
 8002754:	f043 0304 	orr.w	r3, r3, #4
 8002758:	6713      	str	r3, [r2, #112]	; 0x70
 800275a:	4b5c      	ldr	r3, [pc, #368]	; (80028cc <HAL_RCC_OscConfig+0x470>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275e:	4a5b      	ldr	r2, [pc, #364]	; (80028cc <HAL_RCC_OscConfig+0x470>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6713      	str	r3, [r2, #112]	; 0x70
 8002766:	e00b      	b.n	8002780 <HAL_RCC_OscConfig+0x324>
 8002768:	4b58      	ldr	r3, [pc, #352]	; (80028cc <HAL_RCC_OscConfig+0x470>)
 800276a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276c:	4a57      	ldr	r2, [pc, #348]	; (80028cc <HAL_RCC_OscConfig+0x470>)
 800276e:	f023 0301 	bic.w	r3, r3, #1
 8002772:	6713      	str	r3, [r2, #112]	; 0x70
 8002774:	4b55      	ldr	r3, [pc, #340]	; (80028cc <HAL_RCC_OscConfig+0x470>)
 8002776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002778:	4a54      	ldr	r2, [pc, #336]	; (80028cc <HAL_RCC_OscConfig+0x470>)
 800277a:	f023 0304 	bic.w	r3, r3, #4
 800277e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d015      	beq.n	80027b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002788:	f7fe f90c 	bl	80009a4 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278e:	e00a      	b.n	80027a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002790:	f7fe f908 	bl	80009a4 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	f241 3288 	movw	r2, #5000	; 0x1388
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e0cb      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a6:	4b49      	ldr	r3, [pc, #292]	; (80028cc <HAL_RCC_OscConfig+0x470>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0ee      	beq.n	8002790 <HAL_RCC_OscConfig+0x334>
 80027b2:	e014      	b.n	80027de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b4:	f7fe f8f6 	bl	80009a4 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ba:	e00a      	b.n	80027d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027bc:	f7fe f8f2 	bl	80009a4 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e0b5      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d2:	4b3e      	ldr	r3, [pc, #248]	; (80028cc <HAL_RCC_OscConfig+0x470>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1ee      	bne.n	80027bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027de:	7dfb      	ldrb	r3, [r7, #23]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d105      	bne.n	80027f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e4:	4b39      	ldr	r3, [pc, #228]	; (80028cc <HAL_RCC_OscConfig+0x470>)
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	4a38      	ldr	r2, [pc, #224]	; (80028cc <HAL_RCC_OscConfig+0x470>)
 80027ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 80a1 	beq.w	800293c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027fa:	4b34      	ldr	r3, [pc, #208]	; (80028cc <HAL_RCC_OscConfig+0x470>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 030c 	and.w	r3, r3, #12
 8002802:	2b08      	cmp	r3, #8
 8002804:	d05c      	beq.n	80028c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	2b02      	cmp	r3, #2
 800280c:	d141      	bne.n	8002892 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280e:	4b31      	ldr	r3, [pc, #196]	; (80028d4 <HAL_RCC_OscConfig+0x478>)
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7fe f8c6 	bl	80009a4 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800281c:	f7fe f8c2 	bl	80009a4 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e087      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282e:	4b27      	ldr	r3, [pc, #156]	; (80028cc <HAL_RCC_OscConfig+0x470>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69da      	ldr	r2, [r3, #28]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	019b      	lsls	r3, r3, #6
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002850:	085b      	lsrs	r3, r3, #1
 8002852:	3b01      	subs	r3, #1
 8002854:	041b      	lsls	r3, r3, #16
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285c:	061b      	lsls	r3, r3, #24
 800285e:	491b      	ldr	r1, [pc, #108]	; (80028cc <HAL_RCC_OscConfig+0x470>)
 8002860:	4313      	orrs	r3, r2
 8002862:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002864:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <HAL_RCC_OscConfig+0x478>)
 8002866:	2201      	movs	r2, #1
 8002868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286a:	f7fe f89b 	bl	80009a4 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002872:	f7fe f897 	bl	80009a4 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e05c      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002884:	4b11      	ldr	r3, [pc, #68]	; (80028cc <HAL_RCC_OscConfig+0x470>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0f0      	beq.n	8002872 <HAL_RCC_OscConfig+0x416>
 8002890:	e054      	b.n	800293c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002892:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <HAL_RCC_OscConfig+0x478>)
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7fe f884 	bl	80009a4 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a0:	f7fe f880 	bl	80009a4 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e045      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_RCC_OscConfig+0x470>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x444>
 80028be:	e03d      	b.n	800293c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d107      	bne.n	80028d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e038      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40007000 	.word	0x40007000
 80028d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028d8:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <HAL_RCC_OscConfig+0x4ec>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d028      	beq.n	8002938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d121      	bne.n	8002938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fe:	429a      	cmp	r2, r3
 8002900:	d11a      	bne.n	8002938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002908:	4013      	ands	r3, r2
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800290e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002910:	4293      	cmp	r3, r2
 8002912:	d111      	bne.n	8002938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291e:	085b      	lsrs	r3, r3, #1
 8002920:	3b01      	subs	r3, #1
 8002922:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002924:	429a      	cmp	r2, r3
 8002926:	d107      	bne.n	8002938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002932:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002934:	429a      	cmp	r2, r3
 8002936:	d001      	beq.n	800293c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40023800 	.word	0x40023800

0800294c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0cc      	b.n	8002afa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002960:	4b68      	ldr	r3, [pc, #416]	; (8002b04 <HAL_RCC_ClockConfig+0x1b8>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d90c      	bls.n	8002988 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296e:	4b65      	ldr	r3, [pc, #404]	; (8002b04 <HAL_RCC_ClockConfig+0x1b8>)
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002976:	4b63      	ldr	r3, [pc, #396]	; (8002b04 <HAL_RCC_ClockConfig+0x1b8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0b8      	b.n	8002afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d020      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029a0:	4b59      	ldr	r3, [pc, #356]	; (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	4a58      	ldr	r2, [pc, #352]	; (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029b8:	4b53      	ldr	r3, [pc, #332]	; (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	4a52      	ldr	r2, [pc, #328]	; (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c4:	4b50      	ldr	r3, [pc, #320]	; (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	494d      	ldr	r1, [pc, #308]	; (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d044      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d107      	bne.n	80029fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ea:	4b47      	ldr	r3, [pc, #284]	; (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d119      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e07f      	b.n	8002afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d003      	beq.n	8002a0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d107      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a0a:	4b3f      	ldr	r3, [pc, #252]	; (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d109      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e06f      	b.n	8002afa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1a:	4b3b      	ldr	r3, [pc, #236]	; (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e067      	b.n	8002afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a2a:	4b37      	ldr	r3, [pc, #220]	; (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f023 0203 	bic.w	r2, r3, #3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	4934      	ldr	r1, [pc, #208]	; (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a3c:	f7fd ffb2 	bl	80009a4 <HAL_GetTick>
 8002a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a42:	e00a      	b.n	8002a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a44:	f7fd ffae 	bl	80009a4 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e04f      	b.n	8002afa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5a:	4b2b      	ldr	r3, [pc, #172]	; (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 020c 	and.w	r2, r3, #12
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d1eb      	bne.n	8002a44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a6c:	4b25      	ldr	r3, [pc, #148]	; (8002b04 <HAL_RCC_ClockConfig+0x1b8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d20c      	bcs.n	8002a94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7a:	4b22      	ldr	r3, [pc, #136]	; (8002b04 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	4b20      	ldr	r3, [pc, #128]	; (8002b04 <HAL_RCC_ClockConfig+0x1b8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e032      	b.n	8002afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa0:	4b19      	ldr	r3, [pc, #100]	; (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4916      	ldr	r1, [pc, #88]	; (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d009      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002abe:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	490e      	ldr	r1, [pc, #56]	; (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ad2:	f000 f821 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	091b      	lsrs	r3, r3, #4
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	490a      	ldr	r1, [pc, #40]	; (8002b0c <HAL_RCC_ClockConfig+0x1c0>)
 8002ae4:	5ccb      	ldrb	r3, [r1, r3]
 8002ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aea:	4a09      	ldr	r2, [pc, #36]	; (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aee:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fd ff12 	bl	800091c <HAL_InitTick>

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40023c00 	.word	0x40023c00
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	080078c0 	.word	0x080078c0
 8002b10:	2000000c 	.word	0x2000000c
 8002b14:	20000010 	.word	0x20000010

08002b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b1c:	b090      	sub	sp, #64	; 0x40
 8002b1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	637b      	str	r3, [r7, #52]	; 0x34
 8002b24:	2300      	movs	r3, #0
 8002b26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b28:	2300      	movs	r3, #0
 8002b2a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b30:	4b59      	ldr	r3, [pc, #356]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d00d      	beq.n	8002b58 <HAL_RCC_GetSysClockFreq+0x40>
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	f200 80a1 	bhi.w	8002c84 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d002      	beq.n	8002b4c <HAL_RCC_GetSysClockFreq+0x34>
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d003      	beq.n	8002b52 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b4a:	e09b      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b4c:	4b53      	ldr	r3, [pc, #332]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x184>)
 8002b4e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b50:	e09b      	b.n	8002c8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b52:	4b53      	ldr	r3, [pc, #332]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b56:	e098      	b.n	8002c8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b58:	4b4f      	ldr	r3, [pc, #316]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b60:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b62:	4b4d      	ldr	r3, [pc, #308]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d028      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b6e:	4b4a      	ldr	r3, [pc, #296]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	099b      	lsrs	r3, r3, #6
 8002b74:	2200      	movs	r2, #0
 8002b76:	623b      	str	r3, [r7, #32]
 8002b78:	627a      	str	r2, [r7, #36]	; 0x24
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b80:	2100      	movs	r1, #0
 8002b82:	4b47      	ldr	r3, [pc, #284]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b84:	fb03 f201 	mul.w	r2, r3, r1
 8002b88:	2300      	movs	r3, #0
 8002b8a:	fb00 f303 	mul.w	r3, r0, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	4a43      	ldr	r2, [pc, #268]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b92:	fba0 1202 	umull	r1, r2, r0, r2
 8002b96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b98:	460a      	mov	r2, r1
 8002b9a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b9e:	4413      	add	r3, r2
 8002ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	61bb      	str	r3, [r7, #24]
 8002ba8:	61fa      	str	r2, [r7, #28]
 8002baa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bb2:	f7fd fb65 	bl	8000280 <__aeabi_uldivmod>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4613      	mov	r3, r2
 8002bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bbe:	e053      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc0:	4b35      	ldr	r3, [pc, #212]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	099b      	lsrs	r3, r3, #6
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	617a      	str	r2, [r7, #20]
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002bd2:	f04f 0b00 	mov.w	fp, #0
 8002bd6:	4652      	mov	r2, sl
 8002bd8:	465b      	mov	r3, fp
 8002bda:	f04f 0000 	mov.w	r0, #0
 8002bde:	f04f 0100 	mov.w	r1, #0
 8002be2:	0159      	lsls	r1, r3, #5
 8002be4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002be8:	0150      	lsls	r0, r2, #5
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	ebb2 080a 	subs.w	r8, r2, sl
 8002bf2:	eb63 090b 	sbc.w	r9, r3, fp
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c02:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c06:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c0a:	ebb2 0408 	subs.w	r4, r2, r8
 8002c0e:	eb63 0509 	sbc.w	r5, r3, r9
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	00eb      	lsls	r3, r5, #3
 8002c1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c20:	00e2      	lsls	r2, r4, #3
 8002c22:	4614      	mov	r4, r2
 8002c24:	461d      	mov	r5, r3
 8002c26:	eb14 030a 	adds.w	r3, r4, sl
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	eb45 030b 	adc.w	r3, r5, fp
 8002c30:	607b      	str	r3, [r7, #4]
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	f04f 0300 	mov.w	r3, #0
 8002c3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c3e:	4629      	mov	r1, r5
 8002c40:	028b      	lsls	r3, r1, #10
 8002c42:	4621      	mov	r1, r4
 8002c44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c48:	4621      	mov	r1, r4
 8002c4a:	028a      	lsls	r2, r1, #10
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	4619      	mov	r1, r3
 8002c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c52:	2200      	movs	r2, #0
 8002c54:	60bb      	str	r3, [r7, #8]
 8002c56:	60fa      	str	r2, [r7, #12]
 8002c58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c5c:	f7fd fb10 	bl	8000280 <__aeabi_uldivmod>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4613      	mov	r3, r2
 8002c66:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	0c1b      	lsrs	r3, r3, #16
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	3301      	adds	r3, #1
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002c78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c82:	e002      	b.n	8002c8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x184>)
 8002c86:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3740      	adds	r7, #64	; 0x40
 8002c90:	46bd      	mov	sp, r7
 8002c92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c96:	bf00      	nop
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	00f42400 	.word	0x00f42400
 8002ca0:	017d7840 	.word	0x017d7840

08002ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca8:	4b03      	ldr	r3, [pc, #12]	; (8002cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002caa:	681b      	ldr	r3, [r3, #0]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	2000000c 	.word	0x2000000c

08002cbc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b084      	sub	sp, #16
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	f107 001c 	add.w	r0, r7, #28
 8002cca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d122      	bne.n	8002d1a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d105      	bne.n	8002d0e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f001 fbee 	bl	80044f0 <USB_CoreReset>
 8002d14:	4603      	mov	r3, r0
 8002d16:	73fb      	strb	r3, [r7, #15]
 8002d18:	e01a      	b.n	8002d50 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f001 fbe2 	bl	80044f0 <USB_CoreReset>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d106      	bne.n	8002d44 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	639a      	str	r2, [r3, #56]	; 0x38
 8002d42:	e005      	b.n	8002d50 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d10b      	bne.n	8002d6e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f043 0206 	orr.w	r2, r3, #6
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f043 0220 	orr.w	r2, r3, #32
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d7a:	b004      	add	sp, #16
 8002d7c:	4770      	bx	lr
	...

08002d80 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d165      	bne.n	8002e60 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4a41      	ldr	r2, [pc, #260]	; (8002e9c <USB_SetTurnaroundTime+0x11c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d906      	bls.n	8002daa <USB_SetTurnaroundTime+0x2a>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4a40      	ldr	r2, [pc, #256]	; (8002ea0 <USB_SetTurnaroundTime+0x120>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d202      	bcs.n	8002daa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002da4:	230f      	movs	r3, #15
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	e062      	b.n	8002e70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	4a3c      	ldr	r2, [pc, #240]	; (8002ea0 <USB_SetTurnaroundTime+0x120>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d306      	bcc.n	8002dc0 <USB_SetTurnaroundTime+0x40>
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	4a3b      	ldr	r2, [pc, #236]	; (8002ea4 <USB_SetTurnaroundTime+0x124>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d202      	bcs.n	8002dc0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002dba:	230e      	movs	r3, #14
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	e057      	b.n	8002e70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4a38      	ldr	r2, [pc, #224]	; (8002ea4 <USB_SetTurnaroundTime+0x124>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d306      	bcc.n	8002dd6 <USB_SetTurnaroundTime+0x56>
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	4a37      	ldr	r2, [pc, #220]	; (8002ea8 <USB_SetTurnaroundTime+0x128>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d202      	bcs.n	8002dd6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002dd0:	230d      	movs	r3, #13
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	e04c      	b.n	8002e70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	4a33      	ldr	r2, [pc, #204]	; (8002ea8 <USB_SetTurnaroundTime+0x128>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d306      	bcc.n	8002dec <USB_SetTurnaroundTime+0x6c>
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	4a32      	ldr	r2, [pc, #200]	; (8002eac <USB_SetTurnaroundTime+0x12c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d802      	bhi.n	8002dec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002de6:	230c      	movs	r3, #12
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	e041      	b.n	8002e70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4a2f      	ldr	r2, [pc, #188]	; (8002eac <USB_SetTurnaroundTime+0x12c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d906      	bls.n	8002e02 <USB_SetTurnaroundTime+0x82>
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4a2e      	ldr	r2, [pc, #184]	; (8002eb0 <USB_SetTurnaroundTime+0x130>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d802      	bhi.n	8002e02 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002dfc:	230b      	movs	r3, #11
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	e036      	b.n	8002e70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	4a2a      	ldr	r2, [pc, #168]	; (8002eb0 <USB_SetTurnaroundTime+0x130>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d906      	bls.n	8002e18 <USB_SetTurnaroundTime+0x98>
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	4a29      	ldr	r2, [pc, #164]	; (8002eb4 <USB_SetTurnaroundTime+0x134>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d802      	bhi.n	8002e18 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002e12:	230a      	movs	r3, #10
 8002e14:	617b      	str	r3, [r7, #20]
 8002e16:	e02b      	b.n	8002e70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4a26      	ldr	r2, [pc, #152]	; (8002eb4 <USB_SetTurnaroundTime+0x134>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d906      	bls.n	8002e2e <USB_SetTurnaroundTime+0xae>
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	4a25      	ldr	r2, [pc, #148]	; (8002eb8 <USB_SetTurnaroundTime+0x138>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d202      	bcs.n	8002e2e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002e28:	2309      	movs	r3, #9
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	e020      	b.n	8002e70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	4a21      	ldr	r2, [pc, #132]	; (8002eb8 <USB_SetTurnaroundTime+0x138>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d306      	bcc.n	8002e44 <USB_SetTurnaroundTime+0xc4>
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	4a20      	ldr	r2, [pc, #128]	; (8002ebc <USB_SetTurnaroundTime+0x13c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d802      	bhi.n	8002e44 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002e3e:	2308      	movs	r3, #8
 8002e40:	617b      	str	r3, [r7, #20]
 8002e42:	e015      	b.n	8002e70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4a1d      	ldr	r2, [pc, #116]	; (8002ebc <USB_SetTurnaroundTime+0x13c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d906      	bls.n	8002e5a <USB_SetTurnaroundTime+0xda>
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4a1c      	ldr	r2, [pc, #112]	; (8002ec0 <USB_SetTurnaroundTime+0x140>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d202      	bcs.n	8002e5a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002e54:	2307      	movs	r3, #7
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	e00a      	b.n	8002e70 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002e5a:	2306      	movs	r3, #6
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	e007      	b.n	8002e70 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d102      	bne.n	8002e6c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002e66:	2309      	movs	r3, #9
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	e001      	b.n	8002e70 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002e6c:	2309      	movs	r3, #9
 8002e6e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	029b      	lsls	r3, r3, #10
 8002e84:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	371c      	adds	r7, #28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	00d8acbf 	.word	0x00d8acbf
 8002ea0:	00e4e1c0 	.word	0x00e4e1c0
 8002ea4:	00f42400 	.word	0x00f42400
 8002ea8:	01067380 	.word	0x01067380
 8002eac:	011a499f 	.word	0x011a499f
 8002eb0:	01312cff 	.word	0x01312cff
 8002eb4:	014ca43f 	.word	0x014ca43f
 8002eb8:	016e3600 	.word	0x016e3600
 8002ebc:	01a6ab1f 	.word	0x01a6ab1f
 8002ec0:	01e84800 	.word	0x01e84800

08002ec4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f043 0201 	orr.w	r2, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f023 0201 	bic.w	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002f24:	78fb      	ldrb	r3, [r7, #3]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d115      	bne.n	8002f56 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002f36:	2001      	movs	r0, #1
 8002f38:	f7fd fd40 	bl	80009bc <HAL_Delay>
      ms++;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f001 fa45 	bl	80043d2 <USB_GetMode>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d01e      	beq.n	8002f8c <USB_SetCurrentMode+0x84>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b31      	cmp	r3, #49	; 0x31
 8002f52:	d9f0      	bls.n	8002f36 <USB_SetCurrentMode+0x2e>
 8002f54:	e01a      	b.n	8002f8c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d115      	bne.n	8002f88 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002f68:	2001      	movs	r0, #1
 8002f6a:	f7fd fd27 	bl	80009bc <HAL_Delay>
      ms++;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	3301      	adds	r3, #1
 8002f72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f001 fa2c 	bl	80043d2 <USB_GetMode>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <USB_SetCurrentMode+0x84>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2b31      	cmp	r3, #49	; 0x31
 8002f84:	d9f0      	bls.n	8002f68 <USB_SetCurrentMode+0x60>
 8002f86:	e001      	b.n	8002f8c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e005      	b.n	8002f98 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2b32      	cmp	r3, #50	; 0x32
 8002f90:	d101      	bne.n	8002f96 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002fa0:	b084      	sub	sp, #16
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b086      	sub	sp, #24
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002fae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002fba:	2300      	movs	r3, #0
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	e009      	b.n	8002fd4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	3340      	adds	r3, #64	; 0x40
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	2200      	movs	r2, #0
 8002fcc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	613b      	str	r3, [r7, #16]
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	2b0e      	cmp	r3, #14
 8002fd8:	d9f2      	bls.n	8002fc0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d11c      	bne.n	800301a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fee:	f043 0302 	orr.w	r3, r3, #2
 8002ff2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003004:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003010:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	639a      	str	r2, [r3, #56]	; 0x38
 8003018:	e00b      	b.n	8003032 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003038:	461a      	mov	r2, r3
 800303a:	2300      	movs	r3, #0
 800303c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003044:	4619      	mov	r1, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800304c:	461a      	mov	r2, r3
 800304e:	680b      	ldr	r3, [r1, #0]
 8003050:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003054:	2b01      	cmp	r3, #1
 8003056:	d10c      	bne.n	8003072 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305a:	2b00      	cmp	r3, #0
 800305c:	d104      	bne.n	8003068 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800305e:	2100      	movs	r1, #0
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f965 	bl	8003330 <USB_SetDevSpeed>
 8003066:	e008      	b.n	800307a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003068:	2101      	movs	r1, #1
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f960 	bl	8003330 <USB_SetDevSpeed>
 8003070:	e003      	b.n	800307a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003072:	2103      	movs	r1, #3
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f95b 	bl	8003330 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800307a:	2110      	movs	r1, #16
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f8f3 	bl	8003268 <USB_FlushTxFifo>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f91f 	bl	80032d0 <USB_FlushRxFifo>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a2:	461a      	mov	r2, r3
 80030a4:	2300      	movs	r3, #0
 80030a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ae:	461a      	mov	r2, r3
 80030b0:	2300      	movs	r3, #0
 80030b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ba:	461a      	mov	r2, r3
 80030bc:	2300      	movs	r3, #0
 80030be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030c0:	2300      	movs	r3, #0
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	e043      	b.n	800314e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	015a      	lsls	r2, r3, #5
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030dc:	d118      	bne.n	8003110 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10a      	bne.n	80030fa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	015a      	lsls	r2, r3, #5
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4413      	add	r3, r2
 80030ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f0:	461a      	mov	r2, r3
 80030f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030f6:	6013      	str	r3, [r2, #0]
 80030f8:	e013      	b.n	8003122 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	015a      	lsls	r2, r3, #5
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4413      	add	r3, r2
 8003102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003106:	461a      	mov	r2, r3
 8003108:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	e008      	b.n	8003122 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4413      	add	r3, r2
 8003118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800311c:	461a      	mov	r2, r3
 800311e:	2300      	movs	r3, #0
 8003120:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4413      	add	r3, r2
 800312a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800312e:	461a      	mov	r2, r3
 8003130:	2300      	movs	r3, #0
 8003132:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	015a      	lsls	r2, r3, #5
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4413      	add	r3, r2
 800313c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003140:	461a      	mov	r2, r3
 8003142:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003146:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	3301      	adds	r3, #1
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	429a      	cmp	r2, r3
 8003154:	d3b7      	bcc.n	80030c6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003156:	2300      	movs	r3, #0
 8003158:	613b      	str	r3, [r7, #16]
 800315a:	e043      	b.n	80031e4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	015a      	lsls	r2, r3, #5
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4413      	add	r3, r2
 8003164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800316e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003172:	d118      	bne.n	80031a6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10a      	bne.n	8003190 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4413      	add	r3, r2
 8003182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003186:	461a      	mov	r2, r3
 8003188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	e013      	b.n	80031b8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4413      	add	r3, r2
 8003198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800319c:	461a      	mov	r2, r3
 800319e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80031a2:	6013      	str	r3, [r2, #0]
 80031a4:	e008      	b.n	80031b8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b2:	461a      	mov	r2, r3
 80031b4:	2300      	movs	r3, #0
 80031b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	015a      	lsls	r2, r3, #5
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4413      	add	r3, r2
 80031c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c4:	461a      	mov	r2, r3
 80031c6:	2300      	movs	r3, #0
 80031c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	015a      	lsls	r2, r3, #5
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4413      	add	r3, r2
 80031d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d6:	461a      	mov	r2, r3
 80031d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	3301      	adds	r3, #1
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d3b7      	bcc.n	800315c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800320c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800320e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003210:	2b00      	cmp	r3, #0
 8003212:	d105      	bne.n	8003220 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	f043 0210 	orr.w	r2, r3, #16
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	699a      	ldr	r2, [r3, #24]
 8003224:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <USB_DevInit+0x2c4>)
 8003226:	4313      	orrs	r3, r2
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800322c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800322e:	2b00      	cmp	r3, #0
 8003230:	d005      	beq.n	800323e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	f043 0208 	orr.w	r2, r3, #8
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800323e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003240:	2b01      	cmp	r3, #1
 8003242:	d107      	bne.n	8003254 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800324c:	f043 0304 	orr.w	r3, r3, #4
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003254:	7dfb      	ldrb	r3, [r7, #23]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003260:	b004      	add	sp, #16
 8003262:	4770      	bx	lr
 8003264:	803c3800 	.word	0x803c3800

08003268 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	3301      	adds	r3, #1
 800327a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4a13      	ldr	r2, [pc, #76]	; (80032cc <USB_FlushTxFifo+0x64>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d901      	bls.n	8003288 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e01b      	b.n	80032c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	2b00      	cmp	r3, #0
 800328e:	daf2      	bge.n	8003276 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	019b      	lsls	r3, r3, #6
 8003298:	f043 0220 	orr.w	r2, r3, #32
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	3301      	adds	r3, #1
 80032a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4a08      	ldr	r2, [pc, #32]	; (80032cc <USB_FlushTxFifo+0x64>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e006      	b.n	80032c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f003 0320 	and.w	r3, r3, #32
 80032ba:	2b20      	cmp	r3, #32
 80032bc:	d0f0      	beq.n	80032a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	00030d40 	.word	0x00030d40

080032d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	3301      	adds	r3, #1
 80032e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4a11      	ldr	r2, [pc, #68]	; (800332c <USB_FlushRxFifo+0x5c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e018      	b.n	8003320 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	daf2      	bge.n	80032dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2210      	movs	r2, #16
 80032fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	3301      	adds	r3, #1
 8003304:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4a08      	ldr	r2, [pc, #32]	; (800332c <USB_FlushRxFifo+0x5c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d901      	bls.n	8003312 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e006      	b.n	8003320 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f003 0310 	and.w	r3, r3, #16
 800331a:	2b10      	cmp	r3, #16
 800331c:	d0f0      	beq.n	8003300 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	00030d40 	.word	0x00030d40

08003330 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	68f9      	ldr	r1, [r7, #12]
 800334c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003350:	4313      	orrs	r3, r2
 8003352:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003362:	b480      	push	{r7}
 8003364:	b087      	sub	sp, #28
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 0306 	and.w	r3, r3, #6
 800337a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d102      	bne.n	8003388 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003382:	2300      	movs	r3, #0
 8003384:	75fb      	strb	r3, [r7, #23]
 8003386:	e00a      	b.n	800339e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d002      	beq.n	8003394 <USB_GetDevSpeed+0x32>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2b06      	cmp	r3, #6
 8003392:	d102      	bne.n	800339a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003394:	2302      	movs	r3, #2
 8003396:	75fb      	strb	r3, [r7, #23]
 8003398:	e001      	b.n	800339e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800339a:	230f      	movs	r3, #15
 800339c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800339e:	7dfb      	ldrb	r3, [r7, #23]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	371c      	adds	r7, #28
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	785b      	ldrb	r3, [r3, #1]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d13a      	bne.n	800343e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ce:	69da      	ldr	r2, [r3, #28]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	2101      	movs	r1, #1
 80033da:	fa01 f303 	lsl.w	r3, r1, r3
 80033de:	b29b      	uxth	r3, r3
 80033e0:	68f9      	ldr	r1, [r7, #12]
 80033e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d155      	bne.n	80034ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4413      	add	r3, r2
 8003408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	791b      	ldrb	r3, [r3, #4]
 800341a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800341c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	059b      	lsls	r3, r3, #22
 8003422:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003424:	4313      	orrs	r3, r2
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	0151      	lsls	r1, r2, #5
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	440a      	add	r2, r1
 800342e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	e036      	b.n	80034ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003444:	69da      	ldr	r2, [r3, #28]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	2101      	movs	r1, #1
 8003450:	fa01 f303 	lsl.w	r3, r1, r3
 8003454:	041b      	lsls	r3, r3, #16
 8003456:	68f9      	ldr	r1, [r7, #12]
 8003458:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800345c:	4313      	orrs	r3, r2
 800345e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4413      	add	r3, r2
 8003468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d11a      	bne.n	80034ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4413      	add	r3, r2
 800347e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	791b      	ldrb	r3, [r3, #4]
 8003490:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003492:	430b      	orrs	r3, r1
 8003494:	4313      	orrs	r3, r2
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	0151      	lsls	r1, r2, #5
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	440a      	add	r2, r1
 800349e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
	...

080034bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	785b      	ldrb	r3, [r3, #1]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d161      	bne.n	800359c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034ee:	d11f      	bne.n	8003530 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	0151      	lsls	r1, r2, #5
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	440a      	add	r2, r1
 8003506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800350a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800350e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	015a      	lsls	r2, r3, #5
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4413      	add	r3, r2
 8003518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	0151      	lsls	r1, r2, #5
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	440a      	add	r2, r1
 8003526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800352a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800352e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	f003 030f 	and.w	r3, r3, #15
 8003540:	2101      	movs	r1, #1
 8003542:	fa01 f303 	lsl.w	r3, r1, r3
 8003546:	b29b      	uxth	r3, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	68f9      	ldr	r1, [r7, #12]
 800354c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003550:	4013      	ands	r3, r2
 8003552:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800355a:	69da      	ldr	r2, [r3, #28]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	2101      	movs	r1, #1
 8003566:	fa01 f303 	lsl.w	r3, r1, r3
 800356a:	b29b      	uxth	r3, r3
 800356c:	43db      	mvns	r3, r3
 800356e:	68f9      	ldr	r1, [r7, #12]
 8003570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003574:	4013      	ands	r3, r2
 8003576:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4413      	add	r3, r2
 8003580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	0159      	lsls	r1, r3, #5
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	440b      	add	r3, r1
 800358e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003592:	4619      	mov	r1, r3
 8003594:	4b35      	ldr	r3, [pc, #212]	; (800366c <USB_DeactivateEndpoint+0x1b0>)
 8003596:	4013      	ands	r3, r2
 8003598:	600b      	str	r3, [r1, #0]
 800359a:	e060      	b.n	800365e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	015a      	lsls	r2, r3, #5
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035b2:	d11f      	bne.n	80035f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	0151      	lsls	r1, r2, #5
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	440a      	add	r2, r1
 80035ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	0151      	lsls	r1, r2, #5
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	440a      	add	r2, r1
 80035ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	f003 030f 	and.w	r3, r3, #15
 8003604:	2101      	movs	r1, #1
 8003606:	fa01 f303 	lsl.w	r3, r1, r3
 800360a:	041b      	lsls	r3, r3, #16
 800360c:	43db      	mvns	r3, r3
 800360e:	68f9      	ldr	r1, [r7, #12]
 8003610:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003614:	4013      	ands	r3, r2
 8003616:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800361e:	69da      	ldr	r2, [r3, #28]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	f003 030f 	and.w	r3, r3, #15
 8003628:	2101      	movs	r1, #1
 800362a:	fa01 f303 	lsl.w	r3, r1, r3
 800362e:	041b      	lsls	r3, r3, #16
 8003630:	43db      	mvns	r3, r3
 8003632:	68f9      	ldr	r1, [r7, #12]
 8003634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003638:	4013      	ands	r3, r2
 800363a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4413      	add	r3, r2
 8003644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	0159      	lsls	r1, r3, #5
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	440b      	add	r3, r1
 8003652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003656:	4619      	mov	r1, r3
 8003658:	4b05      	ldr	r3, [pc, #20]	; (8003670 <USB_DeactivateEndpoint+0x1b4>)
 800365a:	4013      	ands	r3, r2
 800365c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	ec337800 	.word	0xec337800
 8003670:	eff37800 	.word	0xeff37800

08003674 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08a      	sub	sp, #40	; 0x28
 8003678:	af02      	add	r7, sp, #8
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	4613      	mov	r3, r2
 8003680:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	785b      	ldrb	r3, [r3, #1]
 8003690:	2b01      	cmp	r3, #1
 8003692:	f040 815c 	bne.w	800394e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d132      	bne.n	8003704 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	0151      	lsls	r1, r2, #5
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	440a      	add	r2, r1
 80036b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80036bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80036c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	015a      	lsls	r2, r3, #5
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	0151      	lsls	r1, r2, #5
 80036d4:	69fa      	ldr	r2, [r7, #28]
 80036d6:	440a      	add	r2, r1
 80036d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	015a      	lsls	r2, r3, #5
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	0151      	lsls	r1, r2, #5
 80036f4:	69fa      	ldr	r2, [r7, #28]
 80036f6:	440a      	add	r2, r1
 80036f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036fc:	0cdb      	lsrs	r3, r3, #19
 80036fe:	04db      	lsls	r3, r3, #19
 8003700:	6113      	str	r3, [r2, #16]
 8003702:	e074      	b.n	80037ee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	0151      	lsls	r1, r2, #5
 8003716:	69fa      	ldr	r2, [r7, #28]
 8003718:	440a      	add	r2, r1
 800371a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800371e:	0cdb      	lsrs	r3, r3, #19
 8003720:	04db      	lsls	r3, r3, #19
 8003722:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	4413      	add	r3, r2
 800372c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	0151      	lsls	r1, r2, #5
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	440a      	add	r2, r1
 800373a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800373e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003742:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003746:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	4413      	add	r3, r2
 8003750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003754:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	6999      	ldr	r1, [r3, #24]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	440b      	add	r3, r1
 8003760:	1e59      	subs	r1, r3, #1
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	fbb1 f3f3 	udiv	r3, r1, r3
 800376a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800376c:	4b9d      	ldr	r3, [pc, #628]	; (80039e4 <USB_EPStartXfer+0x370>)
 800376e:	400b      	ands	r3, r1
 8003770:	69b9      	ldr	r1, [r7, #24]
 8003772:	0148      	lsls	r0, r1, #5
 8003774:	69f9      	ldr	r1, [r7, #28]
 8003776:	4401      	add	r1, r0
 8003778:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800377c:	4313      	orrs	r3, r2
 800377e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	4413      	add	r3, r2
 8003788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800378c:	691a      	ldr	r2, [r3, #16]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003796:	69b9      	ldr	r1, [r7, #24]
 8003798:	0148      	lsls	r0, r1, #5
 800379a:	69f9      	ldr	r1, [r7, #28]
 800379c:	4401      	add	r1, r0
 800379e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80037a2:	4313      	orrs	r3, r2
 80037a4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	791b      	ldrb	r3, [r3, #4]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d11f      	bne.n	80037ee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	0151      	lsls	r1, r2, #5
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	440a      	add	r2, r1
 80037c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037c8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80037cc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	0151      	lsls	r1, r2, #5
 80037e0:	69fa      	ldr	r2, [r7, #28]
 80037e2:	440a      	add	r2, r1
 80037e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037ec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d14b      	bne.n	800388c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d009      	beq.n	8003810 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	4413      	add	r3, r2
 8003804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003808:	461a      	mov	r2, r3
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	791b      	ldrb	r3, [r3, #4]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d128      	bne.n	800386a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003824:	2b00      	cmp	r3, #0
 8003826:	d110      	bne.n	800384a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	4413      	add	r3, r2
 8003830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	0151      	lsls	r1, r2, #5
 800383a:	69fa      	ldr	r2, [r7, #28]
 800383c:	440a      	add	r2, r1
 800383e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003842:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003846:	6013      	str	r3, [r2, #0]
 8003848:	e00f      	b.n	800386a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	0151      	lsls	r1, r2, #5
 800385c:	69fa      	ldr	r2, [r7, #28]
 800385e:	440a      	add	r2, r1
 8003860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003868:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	4413      	add	r3, r2
 8003872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	0151      	lsls	r1, r2, #5
 800387c:	69fa      	ldr	r2, [r7, #28]
 800387e:	440a      	add	r2, r1
 8003880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003884:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	e133      	b.n	8003af4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	4413      	add	r3, r2
 8003894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	0151      	lsls	r1, r2, #5
 800389e:	69fa      	ldr	r2, [r7, #28]
 80038a0:	440a      	add	r2, r1
 80038a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038aa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	791b      	ldrb	r3, [r3, #4]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d015      	beq.n	80038e0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 811b 	beq.w	8003af4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	2101      	movs	r1, #1
 80038d0:	fa01 f303 	lsl.w	r3, r1, r3
 80038d4:	69f9      	ldr	r1, [r7, #28]
 80038d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038da:	4313      	orrs	r3, r2
 80038dc:	634b      	str	r3, [r1, #52]	; 0x34
 80038de:	e109      	b.n	8003af4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d110      	bne.n	8003912 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	0151      	lsls	r1, r2, #5
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	440a      	add	r2, r1
 8003906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800390a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	e00f      	b.n	8003932 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	4413      	add	r3, r2
 800391a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	0151      	lsls	r1, r2, #5
 8003924:	69fa      	ldr	r2, [r7, #28]
 8003926:	440a      	add	r2, r1
 8003928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800392c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003930:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	6919      	ldr	r1, [r3, #16]
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	781a      	ldrb	r2, [r3, #0]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	b298      	uxth	r0, r3
 8003940:	79fb      	ldrb	r3, [r7, #7]
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	4603      	mov	r3, r0
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 fade 	bl	8003f08 <USB_WritePacket>
 800394c:	e0d2      	b.n	8003af4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	4413      	add	r3, r2
 8003956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	0151      	lsls	r1, r2, #5
 8003960:	69fa      	ldr	r2, [r7, #28]
 8003962:	440a      	add	r2, r1
 8003964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003968:	0cdb      	lsrs	r3, r3, #19
 800396a:	04db      	lsls	r3, r3, #19
 800396c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	4413      	add	r3, r2
 8003976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	0151      	lsls	r1, r2, #5
 8003980:	69fa      	ldr	r2, [r7, #28]
 8003982:	440a      	add	r2, r1
 8003984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003988:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800398c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003990:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d126      	bne.n	80039e8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039b0:	69b9      	ldr	r1, [r7, #24]
 80039b2:	0148      	lsls	r0, r1, #5
 80039b4:	69f9      	ldr	r1, [r7, #28]
 80039b6:	4401      	add	r1, r0
 80039b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039bc:	4313      	orrs	r3, r2
 80039be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	0151      	lsls	r1, r2, #5
 80039d2:	69fa      	ldr	r2, [r7, #28]
 80039d4:	440a      	add	r2, r1
 80039d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039de:	6113      	str	r3, [r2, #16]
 80039e0:	e03a      	b.n	8003a58 <USB_EPStartXfer+0x3e4>
 80039e2:	bf00      	nop
 80039e4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	699a      	ldr	r2, [r3, #24]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	4413      	add	r3, r2
 80039f2:	1e5a      	subs	r2, r3, #1
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	8afa      	ldrh	r2, [r7, #22]
 8003a04:	fb03 f202 	mul.w	r2, r3, r2
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a18:	691a      	ldr	r2, [r3, #16]
 8003a1a:	8afb      	ldrh	r3, [r7, #22]
 8003a1c:	04d9      	lsls	r1, r3, #19
 8003a1e:	4b38      	ldr	r3, [pc, #224]	; (8003b00 <USB_EPStartXfer+0x48c>)
 8003a20:	400b      	ands	r3, r1
 8003a22:	69b9      	ldr	r1, [r7, #24]
 8003a24:	0148      	lsls	r0, r1, #5
 8003a26:	69f9      	ldr	r1, [r7, #28]
 8003a28:	4401      	add	r1, r0
 8003a2a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3e:	691a      	ldr	r2, [r3, #16]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a48:	69b9      	ldr	r1, [r7, #24]
 8003a4a:	0148      	lsls	r0, r1, #5
 8003a4c:	69f9      	ldr	r1, [r7, #28]
 8003a4e:	4401      	add	r1, r0
 8003a50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a54:	4313      	orrs	r3, r2
 8003a56:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003a58:	79fb      	ldrb	r3, [r7, #7]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d10d      	bne.n	8003a7a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d009      	beq.n	8003a7a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	6919      	ldr	r1, [r3, #16]
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a76:	460a      	mov	r2, r1
 8003a78:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	791b      	ldrb	r3, [r3, #4]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d128      	bne.n	8003ad4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d110      	bne.n	8003ab4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	0151      	lsls	r1, r2, #5
 8003aa4:	69fa      	ldr	r2, [r7, #28]
 8003aa6:	440a      	add	r2, r1
 8003aa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003aac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	e00f      	b.n	8003ad4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	015a      	lsls	r2, r3, #5
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	0151      	lsls	r1, r2, #5
 8003ac6:	69fa      	ldr	r2, [r7, #28]
 8003ac8:	440a      	add	r2, r1
 8003aca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	015a      	lsls	r2, r3, #5
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	4413      	add	r3, r2
 8003adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	0151      	lsls	r1, r2, #5
 8003ae6:	69fa      	ldr	r2, [r7, #28]
 8003ae8:	440a      	add	r2, r1
 8003aea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003aee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003af2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3720      	adds	r7, #32
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	1ff80000 	.word	0x1ff80000

08003b04 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	785b      	ldrb	r3, [r3, #1]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	f040 80ce 	bne.w	8003cc2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d132      	bne.n	8003b94 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	0151      	lsls	r1, r2, #5
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	440a      	add	r2, r1
 8003b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	0151      	lsls	r1, r2, #5
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	440a      	add	r2, r1
 8003b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	015a      	lsls	r2, r3, #5
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	4413      	add	r3, r2
 8003b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	0151      	lsls	r1, r2, #5
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	440a      	add	r2, r1
 8003b88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b8c:	0cdb      	lsrs	r3, r3, #19
 8003b8e:	04db      	lsls	r3, r3, #19
 8003b90:	6113      	str	r3, [r2, #16]
 8003b92:	e04e      	b.n	8003c32 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	0151      	lsls	r1, r2, #5
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	440a      	add	r2, r1
 8003baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bae:	0cdb      	lsrs	r3, r3, #19
 8003bb0:	04db      	lsls	r3, r3, #19
 8003bb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	0151      	lsls	r1, r2, #5
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	440a      	add	r2, r1
 8003bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003bd2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003bd6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	699a      	ldr	r2, [r3, #24]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d903      	bls.n	8003bec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	0151      	lsls	r1, r2, #5
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	440a      	add	r2, r1
 8003c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c18:	691a      	ldr	r2, [r3, #16]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c22:	6939      	ldr	r1, [r7, #16]
 8003c24:	0148      	lsls	r0, r1, #5
 8003c26:	6979      	ldr	r1, [r7, #20]
 8003c28:	4401      	add	r1, r0
 8003c2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d11e      	bne.n	8003c76 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d009      	beq.n	8003c54 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	0151      	lsls	r1, r2, #5
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	440a      	add	r2, r1
 8003c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	e097      	b.n	8003da6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	015a      	lsls	r2, r3, #5
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	0151      	lsls	r1, r2, #5
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	440a      	add	r2, r1
 8003c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c94:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 8083 	beq.w	8003da6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	f003 030f 	and.w	r3, r3, #15
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb6:	6979      	ldr	r1, [r7, #20]
 8003cb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	634b      	str	r3, [r1, #52]	; 0x34
 8003cc0:	e071      	b.n	8003da6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	0151      	lsls	r1, r2, #5
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	440a      	add	r2, r1
 8003cd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cdc:	0cdb      	lsrs	r3, r3, #19
 8003cde:	04db      	lsls	r3, r3, #19
 8003ce0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	0151      	lsls	r1, r2, #5
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	440a      	add	r2, r1
 8003cf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cfc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d04:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	0151      	lsls	r1, r2, #5
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	440a      	add	r2, r1
 8003d34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d54:	6939      	ldr	r1, [r7, #16]
 8003d56:	0148      	lsls	r0, r1, #5
 8003d58:	6979      	ldr	r1, [r7, #20]
 8003d5a:	4401      	add	r1, r0
 8003d5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d60:	4313      	orrs	r3, r2
 8003d62:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003d64:	79fb      	ldrb	r3, [r7, #7]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d10d      	bne.n	8003d86 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d009      	beq.n	8003d86 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	6919      	ldr	r1, [r3, #16]
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d82:	460a      	mov	r2, r1
 8003d84:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	015a      	lsls	r2, r3, #5
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	0151      	lsls	r1, r2, #5
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	440a      	add	r2, r1
 8003d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003da0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003da4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	785b      	ldrb	r3, [r3, #1]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d14a      	bne.n	8003e68 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003de6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dea:	f040 8086 	bne.w	8003efa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	7812      	ldrb	r2, [r2, #0]
 8003e02:	0151      	lsls	r1, r2, #5
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	440a      	add	r2, r1
 8003e08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e10:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	7812      	ldrb	r2, [r2, #0]
 8003e26:	0151      	lsls	r1, r2, #5
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	440a      	add	r2, r1
 8003e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e34:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d902      	bls.n	8003e4c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	75fb      	strb	r3, [r7, #23]
          break;
 8003e4a:	e056      	b.n	8003efa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e64:	d0e7      	beq.n	8003e36 <USB_EPStopXfer+0x82>
 8003e66:	e048      	b.n	8003efa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	015a      	lsls	r2, r3, #5
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	4413      	add	r3, r2
 8003e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e80:	d13b      	bne.n	8003efa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	7812      	ldrb	r2, [r2, #0]
 8003e96:	0151      	lsls	r1, r2, #5
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	440a      	add	r2, r1
 8003e9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ea0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ea4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	7812      	ldrb	r2, [r2, #0]
 8003eba:	0151      	lsls	r1, r2, #5
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	440a      	add	r2, r1
 8003ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ec4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ec8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d902      	bls.n	8003ee0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	75fb      	strb	r3, [r7, #23]
          break;
 8003ede:	e00c      	b.n	8003efa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ef4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ef8:	d0e7      	beq.n	8003eca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	371c      	adds	r7, #28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b089      	sub	sp, #36	; 0x24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	4611      	mov	r1, r2
 8003f14:	461a      	mov	r2, r3
 8003f16:	460b      	mov	r3, r1
 8003f18:	71fb      	strb	r3, [r7, #7]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003f26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d123      	bne.n	8003f76 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003f2e:	88bb      	ldrh	r3, [r7, #4]
 8003f30:	3303      	adds	r3, #3
 8003f32:	089b      	lsrs	r3, r3, #2
 8003f34:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003f36:	2300      	movs	r3, #0
 8003f38:	61bb      	str	r3, [r7, #24]
 8003f3a:	e018      	b.n	8003f6e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003f3c:	79fb      	ldrb	r3, [r7, #7]
 8003f3e:	031a      	lsls	r2, r3, #12
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f48:	461a      	mov	r2, r3
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	3301      	adds	r3, #1
 8003f54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	3301      	adds	r3, #1
 8003f66:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	61bb      	str	r3, [r7, #24]
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d3e2      	bcc.n	8003f3c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3724      	adds	r7, #36	; 0x24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b08b      	sub	sp, #44	; 0x2c
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003f9a:	88fb      	ldrh	r3, [r7, #6]
 8003f9c:	089b      	lsrs	r3, r3, #2
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003fa2:	88fb      	ldrh	r3, [r7, #6]
 8003fa4:	f003 0303 	and.w	r3, r3, #3
 8003fa8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003faa:	2300      	movs	r3, #0
 8003fac:	623b      	str	r3, [r7, #32]
 8003fae:	e014      	b.n	8003fda <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	601a      	str	r2, [r3, #0]
    pDest++;
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	3301      	adds	r3, #1
 8003fcc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	623b      	str	r3, [r7, #32]
 8003fda:	6a3a      	ldr	r2, [r7, #32]
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d3e6      	bcc.n	8003fb0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003fe2:	8bfb      	ldrh	r3, [r7, #30]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d01e      	beq.n	8004026 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f107 0310 	add.w	r3, r7, #16
 8003ff8:	6812      	ldr	r2, [r2, #0]
 8003ffa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	6a3b      	ldr	r3, [r7, #32]
 8004000:	b2db      	uxtb	r3, r3
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	fa22 f303 	lsr.w	r3, r2, r3
 8004008:	b2da      	uxtb	r2, r3
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	701a      	strb	r2, [r3, #0]
      i++;
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	3301      	adds	r3, #1
 8004012:	623b      	str	r3, [r7, #32]
      pDest++;
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	3301      	adds	r3, #1
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800401a:	8bfb      	ldrh	r3, [r7, #30]
 800401c:	3b01      	subs	r3, #1
 800401e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004020:	8bfb      	ldrh	r3, [r7, #30]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1ea      	bne.n	8003ffc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004028:	4618      	mov	r0, r3
 800402a:	372c      	adds	r7, #44	; 0x2c
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	785b      	ldrb	r3, [r3, #1]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d12c      	bne.n	80040aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	db12      	blt.n	8004088 <USB_EPSetStall+0x54>
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00f      	beq.n	8004088 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4413      	add	r3, r2
 8004070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	0151      	lsls	r1, r2, #5
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	440a      	add	r2, r1
 800407e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004082:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004086:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	0151      	lsls	r1, r2, #5
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	440a      	add	r2, r1
 800409e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040a6:	6013      	str	r3, [r2, #0]
 80040a8:	e02b      	b.n	8004102 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	db12      	blt.n	80040e2 <USB_EPSetStall+0xae>
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00f      	beq.n	80040e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	0151      	lsls	r1, r2, #5
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	440a      	add	r2, r1
 80040d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	0151      	lsls	r1, r2, #5
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	440a      	add	r2, r1
 80040f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004100:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	785b      	ldrb	r3, [r3, #1]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d128      	bne.n	800417e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	015a      	lsls	r2, r3, #5
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4413      	add	r3, r2
 8004134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	0151      	lsls	r1, r2, #5
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	440a      	add	r2, r1
 8004142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004146:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800414a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	791b      	ldrb	r3, [r3, #4]
 8004150:	2b03      	cmp	r3, #3
 8004152:	d003      	beq.n	800415c <USB_EPClearStall+0x4c>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	791b      	ldrb	r3, [r3, #4]
 8004158:	2b02      	cmp	r3, #2
 800415a:	d138      	bne.n	80041ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4413      	add	r3, r2
 8004164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	0151      	lsls	r1, r2, #5
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	440a      	add	r2, r1
 8004172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800417a:	6013      	str	r3, [r2, #0]
 800417c:	e027      	b.n	80041ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	4413      	add	r3, r2
 8004186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	0151      	lsls	r1, r2, #5
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	440a      	add	r2, r1
 8004194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004198:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800419c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	791b      	ldrb	r3, [r3, #4]
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	d003      	beq.n	80041ae <USB_EPClearStall+0x9e>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	791b      	ldrb	r3, [r3, #4]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d10f      	bne.n	80041ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	0151      	lsls	r1, r2, #5
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	440a      	add	r2, r1
 80041c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	460b      	mov	r3, r1
 80041e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80041fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004210:	68f9      	ldr	r1, [r7, #12]
 8004212:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004216:	4313      	orrs	r3, r2
 8004218:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004242:	f023 0303 	bic.w	r3, r3, #3
 8004246:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004256:	f023 0302 	bic.w	r3, r3, #2
 800425a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800426a:	b480      	push	{r7}
 800426c:	b085      	sub	sp, #20
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004284:	f023 0303 	bic.w	r3, r3, #3
 8004288:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004298:	f043 0302 	orr.w	r3, r3, #2
 800429c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	4013      	ands	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80042c4:	68fb      	ldr	r3, [r7, #12]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b085      	sub	sp, #20
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	4013      	ands	r3, r2
 80042f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	0c1b      	lsrs	r3, r3, #16
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004306:	b480      	push	{r7}
 8004308:	b085      	sub	sp, #20
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	4013      	ands	r3, r2
 8004328:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	b29b      	uxth	r3, r3
}
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800433a:	b480      	push	{r7}
 800433c:	b085      	sub	sp, #20
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	460b      	mov	r3, r1
 8004344:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800434a:	78fb      	ldrb	r3, [r7, #3]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4413      	add	r3, r2
 8004352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	4013      	ands	r3, r2
 8004366:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004368:	68bb      	ldr	r3, [r7, #8]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004376:	b480      	push	{r7}
 8004378:	b087      	sub	sp, #28
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	460b      	mov	r3, r1
 8004380:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004398:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800439a:	78fb      	ldrb	r3, [r7, #3]
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	fa22 f303 	lsr.w	r3, r2, r3
 80043a6:	01db      	lsls	r3, r3, #7
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80043b0:	78fb      	ldrb	r3, [r7, #3]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	4013      	ands	r3, r2
 80043c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80043c4:	68bb      	ldr	r3, [r7, #8]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	371c      	adds	r7, #28
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	f003 0301 	and.w	r3, r3, #1
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b085      	sub	sp, #20
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004408:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800440c:	f023 0307 	bic.w	r3, r3, #7
 8004410:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004424:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	460b      	mov	r3, r1
 800443e:	607a      	str	r2, [r7, #4]
 8004440:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	333c      	adds	r3, #60	; 0x3c
 800444a:	3304      	adds	r3, #4
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	4a26      	ldr	r2, [pc, #152]	; (80044ec <USB_EP0_OutStart+0xb8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d90a      	bls.n	800446e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004464:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004468:	d101      	bne.n	800446e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	e037      	b.n	80044de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004474:	461a      	mov	r2, r3
 8004476:	2300      	movs	r3, #0
 8004478:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004488:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800448c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800449c:	f043 0318 	orr.w	r3, r3, #24
 80044a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80044b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80044b6:	7afb      	ldrb	r3, [r7, #11]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d10f      	bne.n	80044dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c2:	461a      	mov	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80044da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	371c      	adds	r7, #28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	4f54300a 	.word	0x4f54300a

080044f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	3301      	adds	r3, #1
 8004500:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4a13      	ldr	r2, [pc, #76]	; (8004554 <USB_CoreReset+0x64>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d901      	bls.n	800450e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e01b      	b.n	8004546 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	daf2      	bge.n	80044fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	f043 0201 	orr.w	r2, r3, #1
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3301      	adds	r3, #1
 800452a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4a09      	ldr	r2, [pc, #36]	; (8004554 <USB_CoreReset+0x64>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d901      	bls.n	8004538 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e006      	b.n	8004546 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b01      	cmp	r3, #1
 8004542:	d0f0      	beq.n	8004526 <USB_CoreReset+0x36>

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	00030d40 	.word	0x00030d40

08004558 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004564:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004568:	f002 fc94 	bl	8006e94 <USBD_static_malloc>
 800456c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d109      	bne.n	8004588 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	32b0      	adds	r2, #176	; 0xb0
 800457e:	2100      	movs	r1, #0
 8004580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004584:	2302      	movs	r3, #2
 8004586:	e0d4      	b.n	8004732 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004588:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800458c:	2100      	movs	r1, #0
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f002 fcee 	bl	8006f70 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	32b0      	adds	r2, #176	; 0xb0
 800459e:	68f9      	ldr	r1, [r7, #12]
 80045a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	32b0      	adds	r2, #176	; 0xb0
 80045ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	7c1b      	ldrb	r3, [r3, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d138      	bne.n	8004632 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80045c0:	4b5e      	ldr	r3, [pc, #376]	; (800473c <USBD_CDC_Init+0x1e4>)
 80045c2:	7819      	ldrb	r1, [r3, #0]
 80045c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045c8:	2202      	movs	r2, #2
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f002 fb3f 	bl	8006c4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80045d0:	4b5a      	ldr	r3, [pc, #360]	; (800473c <USBD_CDC_Init+0x1e4>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	f003 020f 	and.w	r2, r3, #15
 80045d8:	6879      	ldr	r1, [r7, #4]
 80045da:	4613      	mov	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	440b      	add	r3, r1
 80045e4:	3324      	adds	r3, #36	; 0x24
 80045e6:	2201      	movs	r2, #1
 80045e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80045ea:	4b55      	ldr	r3, [pc, #340]	; (8004740 <USBD_CDC_Init+0x1e8>)
 80045ec:	7819      	ldrb	r1, [r3, #0]
 80045ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045f2:	2202      	movs	r2, #2
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f002 fb2a 	bl	8006c4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80045fa:	4b51      	ldr	r3, [pc, #324]	; (8004740 <USBD_CDC_Init+0x1e8>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	f003 020f 	and.w	r2, r3, #15
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	4613      	mov	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	440b      	add	r3, r1
 800460e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004612:	2201      	movs	r2, #1
 8004614:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004616:	4b4b      	ldr	r3, [pc, #300]	; (8004744 <USBD_CDC_Init+0x1ec>)
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	f003 020f 	and.w	r2, r3, #15
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	3326      	adds	r3, #38	; 0x26
 800462c:	2210      	movs	r2, #16
 800462e:	801a      	strh	r2, [r3, #0]
 8004630:	e035      	b.n	800469e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004632:	4b42      	ldr	r3, [pc, #264]	; (800473c <USBD_CDC_Init+0x1e4>)
 8004634:	7819      	ldrb	r1, [r3, #0]
 8004636:	2340      	movs	r3, #64	; 0x40
 8004638:	2202      	movs	r2, #2
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f002 fb07 	bl	8006c4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004640:	4b3e      	ldr	r3, [pc, #248]	; (800473c <USBD_CDC_Init+0x1e4>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	f003 020f 	and.w	r2, r3, #15
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	4613      	mov	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	440b      	add	r3, r1
 8004654:	3324      	adds	r3, #36	; 0x24
 8004656:	2201      	movs	r2, #1
 8004658:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800465a:	4b39      	ldr	r3, [pc, #228]	; (8004740 <USBD_CDC_Init+0x1e8>)
 800465c:	7819      	ldrb	r1, [r3, #0]
 800465e:	2340      	movs	r3, #64	; 0x40
 8004660:	2202      	movs	r2, #2
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f002 faf3 	bl	8006c4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004668:	4b35      	ldr	r3, [pc, #212]	; (8004740 <USBD_CDC_Init+0x1e8>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	f003 020f 	and.w	r2, r3, #15
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	4613      	mov	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	440b      	add	r3, r1
 800467c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004680:	2201      	movs	r2, #1
 8004682:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004684:	4b2f      	ldr	r3, [pc, #188]	; (8004744 <USBD_CDC_Init+0x1ec>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	f003 020f 	and.w	r2, r3, #15
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	4613      	mov	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	440b      	add	r3, r1
 8004698:	3326      	adds	r3, #38	; 0x26
 800469a:	2210      	movs	r2, #16
 800469c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800469e:	4b29      	ldr	r3, [pc, #164]	; (8004744 <USBD_CDC_Init+0x1ec>)
 80046a0:	7819      	ldrb	r1, [r3, #0]
 80046a2:	2308      	movs	r3, #8
 80046a4:	2203      	movs	r2, #3
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f002 fad1 	bl	8006c4e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80046ac:	4b25      	ldr	r3, [pc, #148]	; (8004744 <USBD_CDC_Init+0x1ec>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	f003 020f 	and.w	r2, r3, #15
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	4613      	mov	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	440b      	add	r3, r1
 80046c0:	3324      	adds	r3, #36	; 0x24
 80046c2:	2201      	movs	r2, #1
 80046c4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	33b0      	adds	r3, #176	; 0xb0
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80046fc:	2302      	movs	r3, #2
 80046fe:	e018      	b.n	8004732 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	7c1b      	ldrb	r3, [r3, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10a      	bne.n	800471e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004708:	4b0d      	ldr	r3, [pc, #52]	; (8004740 <USBD_CDC_Init+0x1e8>)
 800470a:	7819      	ldrb	r1, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004712:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f002 fb88 	bl	8006e2c <USBD_LL_PrepareReceive>
 800471c:	e008      	b.n	8004730 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800471e:	4b08      	ldr	r3, [pc, #32]	; (8004740 <USBD_CDC_Init+0x1e8>)
 8004720:	7819      	ldrb	r1, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004728:	2340      	movs	r3, #64	; 0x40
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f002 fb7e 	bl	8006e2c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	2000009f 	.word	0x2000009f
 8004740:	200000a0 	.word	0x200000a0
 8004744:	200000a1 	.word	0x200000a1

08004748 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	460b      	mov	r3, r1
 8004752:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004754:	4b3a      	ldr	r3, [pc, #232]	; (8004840 <USBD_CDC_DeInit+0xf8>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	4619      	mov	r1, r3
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f002 fa9d 	bl	8006c9a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004760:	4b37      	ldr	r3, [pc, #220]	; (8004840 <USBD_CDC_DeInit+0xf8>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	f003 020f 	and.w	r2, r3, #15
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	440b      	add	r3, r1
 8004774:	3324      	adds	r3, #36	; 0x24
 8004776:	2200      	movs	r2, #0
 8004778:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800477a:	4b32      	ldr	r3, [pc, #200]	; (8004844 <USBD_CDC_DeInit+0xfc>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	4619      	mov	r1, r3
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f002 fa8a 	bl	8006c9a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004786:	4b2f      	ldr	r3, [pc, #188]	; (8004844 <USBD_CDC_DeInit+0xfc>)
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	f003 020f 	and.w	r2, r3, #15
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	4613      	mov	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800479e:	2200      	movs	r2, #0
 80047a0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80047a2:	4b29      	ldr	r3, [pc, #164]	; (8004848 <USBD_CDC_DeInit+0x100>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	4619      	mov	r1, r3
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f002 fa76 	bl	8006c9a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80047ae:	4b26      	ldr	r3, [pc, #152]	; (8004848 <USBD_CDC_DeInit+0x100>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	f003 020f 	and.w	r2, r3, #15
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	4613      	mov	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	3324      	adds	r3, #36	; 0x24
 80047c4:	2200      	movs	r2, #0
 80047c6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80047c8:	4b1f      	ldr	r3, [pc, #124]	; (8004848 <USBD_CDC_DeInit+0x100>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	f003 020f 	and.w	r2, r3, #15
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	4613      	mov	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	440b      	add	r3, r1
 80047dc:	3326      	adds	r3, #38	; 0x26
 80047de:	2200      	movs	r2, #0
 80047e0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	32b0      	adds	r2, #176	; 0xb0
 80047ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d01f      	beq.n	8004834 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	33b0      	adds	r3, #176	; 0xb0
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	32b0      	adds	r2, #176	; 0xb0
 8004812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004816:	4618      	mov	r0, r3
 8004818:	f002 fb4a 	bl	8006eb0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	32b0      	adds	r2, #176	; 0xb0
 8004826:	2100      	movs	r1, #0
 8004828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	2000009f 	.word	0x2000009f
 8004844:	200000a0 	.word	0x200000a0
 8004848:	200000a1 	.word	0x200000a1

0800484c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	32b0      	adds	r2, #176	; 0xb0
 8004860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004864:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004878:	2303      	movs	r3, #3
 800487a:	e0bf      	b.n	80049fc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004884:	2b00      	cmp	r3, #0
 8004886:	d050      	beq.n	800492a <USBD_CDC_Setup+0xde>
 8004888:	2b20      	cmp	r3, #32
 800488a:	f040 80af 	bne.w	80049ec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	88db      	ldrh	r3, [r3, #6]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d03a      	beq.n	800490c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	b25b      	sxtb	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	da1b      	bge.n	80048d8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	33b0      	adds	r3, #176	; 0xb0
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80048b6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	88d2      	ldrh	r2, [r2, #6]
 80048bc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	88db      	ldrh	r3, [r3, #6]
 80048c2:	2b07      	cmp	r3, #7
 80048c4:	bf28      	it	cs
 80048c6:	2307      	movcs	r3, #7
 80048c8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	89fa      	ldrh	r2, [r7, #14]
 80048ce:	4619      	mov	r1, r3
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f001 fd89 	bl	80063e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80048d6:	e090      	b.n	80049fa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	785a      	ldrb	r2, [r3, #1]
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	88db      	ldrh	r3, [r3, #6]
 80048e6:	2b3f      	cmp	r3, #63	; 0x3f
 80048e8:	d803      	bhi.n	80048f2 <USBD_CDC_Setup+0xa6>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	88db      	ldrh	r3, [r3, #6]
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	e000      	b.n	80048f4 <USBD_CDC_Setup+0xa8>
 80048f2:	2240      	movs	r2, #64	; 0x40
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80048fa:	6939      	ldr	r1, [r7, #16]
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004902:	461a      	mov	r2, r3
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f001 fd9b 	bl	8006440 <USBD_CtlPrepareRx>
      break;
 800490a:	e076      	b.n	80049fa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	33b0      	adds	r3, #176	; 0xb0
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	7850      	ldrb	r0, [r2, #1]
 8004922:	2200      	movs	r2, #0
 8004924:	6839      	ldr	r1, [r7, #0]
 8004926:	4798      	blx	r3
      break;
 8004928:	e067      	b.n	80049fa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	785b      	ldrb	r3, [r3, #1]
 800492e:	2b0b      	cmp	r3, #11
 8004930:	d851      	bhi.n	80049d6 <USBD_CDC_Setup+0x18a>
 8004932:	a201      	add	r2, pc, #4	; (adr r2, 8004938 <USBD_CDC_Setup+0xec>)
 8004934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004938:	08004969 	.word	0x08004969
 800493c:	080049e5 	.word	0x080049e5
 8004940:	080049d7 	.word	0x080049d7
 8004944:	080049d7 	.word	0x080049d7
 8004948:	080049d7 	.word	0x080049d7
 800494c:	080049d7 	.word	0x080049d7
 8004950:	080049d7 	.word	0x080049d7
 8004954:	080049d7 	.word	0x080049d7
 8004958:	080049d7 	.word	0x080049d7
 800495c:	080049d7 	.word	0x080049d7
 8004960:	08004993 	.word	0x08004993
 8004964:	080049bd 	.word	0x080049bd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b03      	cmp	r3, #3
 8004972:	d107      	bne.n	8004984 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004974:	f107 030a 	add.w	r3, r7, #10
 8004978:	2202      	movs	r2, #2
 800497a:	4619      	mov	r1, r3
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f001 fd33 	bl	80063e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004982:	e032      	b.n	80049ea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004984:	6839      	ldr	r1, [r7, #0]
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f001 fcbd 	bl	8006306 <USBD_CtlError>
            ret = USBD_FAIL;
 800498c:	2303      	movs	r3, #3
 800498e:	75fb      	strb	r3, [r7, #23]
          break;
 8004990:	e02b      	b.n	80049ea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b03      	cmp	r3, #3
 800499c:	d107      	bne.n	80049ae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800499e:	f107 030d 	add.w	r3, r7, #13
 80049a2:	2201      	movs	r2, #1
 80049a4:	4619      	mov	r1, r3
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f001 fd1e 	bl	80063e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80049ac:	e01d      	b.n	80049ea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80049ae:	6839      	ldr	r1, [r7, #0]
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f001 fca8 	bl	8006306 <USBD_CtlError>
            ret = USBD_FAIL;
 80049b6:	2303      	movs	r3, #3
 80049b8:	75fb      	strb	r3, [r7, #23]
          break;
 80049ba:	e016      	b.n	80049ea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b03      	cmp	r3, #3
 80049c6:	d00f      	beq.n	80049e8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80049c8:	6839      	ldr	r1, [r7, #0]
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f001 fc9b 	bl	8006306 <USBD_CtlError>
            ret = USBD_FAIL;
 80049d0:	2303      	movs	r3, #3
 80049d2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80049d4:	e008      	b.n	80049e8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80049d6:	6839      	ldr	r1, [r7, #0]
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f001 fc94 	bl	8006306 <USBD_CtlError>
          ret = USBD_FAIL;
 80049de:	2303      	movs	r3, #3
 80049e0:	75fb      	strb	r3, [r7, #23]
          break;
 80049e2:	e002      	b.n	80049ea <USBD_CDC_Setup+0x19e>
          break;
 80049e4:	bf00      	nop
 80049e6:	e008      	b.n	80049fa <USBD_CDC_Setup+0x1ae>
          break;
 80049e8:	bf00      	nop
      }
      break;
 80049ea:	e006      	b.n	80049fa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80049ec:	6839      	ldr	r1, [r7, #0]
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f001 fc89 	bl	8006306 <USBD_CtlError>
      ret = USBD_FAIL;
 80049f4:	2303      	movs	r3, #3
 80049f6:	75fb      	strb	r3, [r7, #23]
      break;
 80049f8:	bf00      	nop
  }

  return (uint8_t)ret;
 80049fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3718      	adds	r7, #24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004a16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	32b0      	adds	r2, #176	; 0xb0
 8004a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e065      	b.n	8004afa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	32b0      	adds	r2, #176	; 0xb0
 8004a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a3c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004a3e:	78fb      	ldrb	r3, [r7, #3]
 8004a40:	f003 020f 	and.w	r2, r3, #15
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	4613      	mov	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	440b      	add	r3, r1
 8004a50:	3318      	adds	r3, #24
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d02f      	beq.n	8004ab8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004a58:	78fb      	ldrb	r3, [r7, #3]
 8004a5a:	f003 020f 	and.w	r2, r3, #15
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	4613      	mov	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	440b      	add	r3, r1
 8004a6a:	3318      	adds	r3, #24
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	78fb      	ldrb	r3, [r7, #3]
 8004a70:	f003 010f 	and.w	r1, r3, #15
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	460b      	mov	r3, r1
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	440b      	add	r3, r1
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4403      	add	r3, r0
 8004a80:	3348      	adds	r3, #72	; 0x48
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	fbb2 f1f3 	udiv	r1, r2, r3
 8004a88:	fb01 f303 	mul.w	r3, r1, r3
 8004a8c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d112      	bne.n	8004ab8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004a92:	78fb      	ldrb	r3, [r7, #3]
 8004a94:	f003 020f 	and.w	r2, r3, #15
 8004a98:	6879      	ldr	r1, [r7, #4]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	440b      	add	r3, r1
 8004aa4:	3318      	adds	r3, #24
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004aaa:	78f9      	ldrb	r1, [r7, #3]
 8004aac:	2300      	movs	r3, #0
 8004aae:	2200      	movs	r2, #0
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f002 f99a 	bl	8006dea <USBD_LL_Transmit>
 8004ab6:	e01f      	b.n	8004af8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	33b0      	adds	r3, #176	; 0xb0
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d010      	beq.n	8004af8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	33b0      	adds	r3, #176	; 0xb0
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004af4:	78fa      	ldrb	r2, [r7, #3]
 8004af6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b084      	sub	sp, #16
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	32b0      	adds	r2, #176	; 0xb0
 8004b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b1c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	32b0      	adds	r2, #176	; 0xb0
 8004b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e01a      	b.n	8004b6a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004b34:	78fb      	ldrb	r3, [r7, #3]
 8004b36:	4619      	mov	r1, r3
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f002 f998 	bl	8006e6e <USBD_LL_GetRxDataSize>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	33b0      	adds	r3, #176	; 0xb0
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004b64:	4611      	mov	r1, r2
 8004b66:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b084      	sub	sp, #16
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	32b0      	adds	r2, #176	; 0xb0
 8004b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b88:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e025      	b.n	8004be0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	33b0      	adds	r3, #176	; 0xb0
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d01a      	beq.n	8004bde <USBD_CDC_EP0_RxReady+0x6c>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004bae:	2bff      	cmp	r3, #255	; 0xff
 8004bb0:	d015      	beq.n	8004bde <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	33b0      	adds	r3, #176	; 0xb0
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004bca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004bd2:	b292      	uxth	r2, r2
 8004bd4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	22ff      	movs	r2, #255	; 0xff
 8004bda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004bf0:	2182      	movs	r1, #130	; 0x82
 8004bf2:	4818      	ldr	r0, [pc, #96]	; (8004c54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004bf4:	f000 fd4f 	bl	8005696 <USBD_GetEpDesc>
 8004bf8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	4815      	ldr	r0, [pc, #84]	; (8004c54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004bfe:	f000 fd4a 	bl	8005696 <USBD_GetEpDesc>
 8004c02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004c04:	2181      	movs	r1, #129	; 0x81
 8004c06:	4813      	ldr	r0, [pc, #76]	; (8004c54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004c08:	f000 fd45 	bl	8005696 <USBD_GetEpDesc>
 8004c0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d002      	beq.n	8004c1a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	2210      	movs	r2, #16
 8004c18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d006      	beq.n	8004c2e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c28:	711a      	strb	r2, [r3, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d006      	beq.n	8004c42 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c3c:	711a      	strb	r2, [r3, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2243      	movs	r2, #67	; 0x43
 8004c46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004c48:	4b02      	ldr	r3, [pc, #8]	; (8004c54 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	2000005c 	.word	0x2000005c

08004c58 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004c60:	2182      	movs	r1, #130	; 0x82
 8004c62:	4818      	ldr	r0, [pc, #96]	; (8004cc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c64:	f000 fd17 	bl	8005696 <USBD_GetEpDesc>
 8004c68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	4815      	ldr	r0, [pc, #84]	; (8004cc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c6e:	f000 fd12 	bl	8005696 <USBD_GetEpDesc>
 8004c72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004c74:	2181      	movs	r1, #129	; 0x81
 8004c76:	4813      	ldr	r0, [pc, #76]	; (8004cc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c78:	f000 fd0d 	bl	8005696 <USBD_GetEpDesc>
 8004c7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	2210      	movs	r2, #16
 8004c88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d006      	beq.n	8004c9e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	2200      	movs	r2, #0
 8004c94:	711a      	strb	r2, [r3, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f042 0202 	orr.w	r2, r2, #2
 8004c9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d006      	beq.n	8004cb2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	711a      	strb	r2, [r3, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f042 0202 	orr.w	r2, r2, #2
 8004cb0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2243      	movs	r2, #67	; 0x43
 8004cb6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004cb8:	4b02      	ldr	r3, [pc, #8]	; (8004cc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	2000005c 	.word	0x2000005c

08004cc8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004cd0:	2182      	movs	r1, #130	; 0x82
 8004cd2:	4818      	ldr	r0, [pc, #96]	; (8004d34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004cd4:	f000 fcdf 	bl	8005696 <USBD_GetEpDesc>
 8004cd8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004cda:	2101      	movs	r1, #1
 8004cdc:	4815      	ldr	r0, [pc, #84]	; (8004d34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004cde:	f000 fcda 	bl	8005696 <USBD_GetEpDesc>
 8004ce2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004ce4:	2181      	movs	r1, #129	; 0x81
 8004ce6:	4813      	ldr	r0, [pc, #76]	; (8004d34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004ce8:	f000 fcd5 	bl	8005696 <USBD_GetEpDesc>
 8004cec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	2210      	movs	r2, #16
 8004cf8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d006      	beq.n	8004d0e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d08:	711a      	strb	r2, [r3, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d006      	beq.n	8004d22 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d1c:	711a      	strb	r2, [r3, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2243      	movs	r2, #67	; 0x43
 8004d26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004d28:	4b02      	ldr	r3, [pc, #8]	; (8004d34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	2000005c 	.word	0x2000005c

08004d38 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	220a      	movs	r2, #10
 8004d44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004d46:	4b03      	ldr	r3, [pc, #12]	; (8004d54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	20000018 	.word	0x20000018

08004d58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e009      	b.n	8004d80 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	33b0      	adds	r3, #176	; 0xb0
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	32b0      	adds	r2, #176	; 0xb0
 8004da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004da6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e008      	b.n	8004dc4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	371c      	adds	r7, #28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	32b0      	adds	r2, #176	; 0xb0
 8004de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004de8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e004      	b.n	8004dfe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
	...

08004e0c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	32b0      	adds	r2, #176	; 0xb0
 8004e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e22:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004e24:	2301      	movs	r3, #1
 8004e26:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	32b0      	adds	r2, #176	; 0xb0
 8004e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e025      	b.n	8004e8a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d11f      	bne.n	8004e88 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004e50:	4b10      	ldr	r3, [pc, #64]	; (8004e94 <USBD_CDC_TransmitPacket+0x88>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	f003 020f 	and.w	r2, r3, #15
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	4613      	mov	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4403      	add	r3, r0
 8004e6a:	3318      	adds	r3, #24
 8004e6c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004e6e:	4b09      	ldr	r3, [pc, #36]	; (8004e94 <USBD_CDC_TransmitPacket+0x88>)
 8004e70:	7819      	ldrb	r1, [r3, #0]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f001 ffb3 	bl	8006dea <USBD_LL_Transmit>

    ret = USBD_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	2000009f 	.word	0x2000009f

08004e98 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	32b0      	adds	r2, #176	; 0xb0
 8004eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	32b0      	adds	r2, #176	; 0xb0
 8004eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e018      	b.n	8004ef8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	7c1b      	ldrb	r3, [r3, #16]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10a      	bne.n	8004ee4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004ece:	4b0c      	ldr	r3, [pc, #48]	; (8004f00 <USBD_CDC_ReceivePacket+0x68>)
 8004ed0:	7819      	ldrb	r1, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f001 ffa5 	bl	8006e2c <USBD_LL_PrepareReceive>
 8004ee2:	e008      	b.n	8004ef6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004ee4:	4b06      	ldr	r3, [pc, #24]	; (8004f00 <USBD_CDC_ReceivePacket+0x68>)
 8004ee6:	7819      	ldrb	r1, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004eee:	2340      	movs	r3, #64	; 0x40
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f001 ff9b 	bl	8006e2c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	200000a0 	.word	0x200000a0

08004f04 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e01f      	b.n	8004f5c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	79fa      	ldrb	r2, [r7, #7]
 8004f4e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f001 fe15 	bl	8006b80 <USBD_LL_Init>
 8004f56:	4603      	mov	r3, r0
 8004f58:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e025      	b.n	8004fc8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	32ae      	adds	r2, #174	; 0xae
 8004f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00f      	beq.n	8004fb8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	32ae      	adds	r2, #174	; 0xae
 8004fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa8:	f107 020e 	add.w	r2, r7, #14
 8004fac:	4610      	mov	r0, r2
 8004fae:	4798      	blx	r3
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f001 fe1d 	bl	8006c18 <USBD_LL_Start>
 8004fde:	4603      	mov	r3, r0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004ff0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b084      	sub	sp, #16
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	460b      	mov	r3, r1
 8005008:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800500a:	2300      	movs	r3, #0
 800500c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005014:	2b00      	cmp	r3, #0
 8005016:	d009      	beq.n	800502c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	78fa      	ldrb	r2, [r7, #3]
 8005022:	4611      	mov	r1, r2
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	4798      	blx	r3
 8005028:	4603      	mov	r3, r0
 800502a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800502c:	7bfb      	ldrb	r3, [r7, #15]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b084      	sub	sp, #16
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	460b      	mov	r3, r1
 8005040:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	78fa      	ldrb	r2, [r7, #3]
 8005050:	4611      	mov	r1, r2
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	4798      	blx	r3
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d001      	beq.n	8005060 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800505c:	2303      	movs	r3, #3
 800505e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005060:	7bfb      	ldrb	r3, [r7, #15]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b084      	sub	sp, #16
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800507a:	6839      	ldr	r1, [r7, #0]
 800507c:	4618      	mov	r0, r3
 800507e:	f001 f908 	bl	8006292 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005090:	461a      	mov	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800509e:	f003 031f 	and.w	r3, r3, #31
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d01a      	beq.n	80050dc <USBD_LL_SetupStage+0x72>
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d822      	bhi.n	80050f0 <USBD_LL_SetupStage+0x86>
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d002      	beq.n	80050b4 <USBD_LL_SetupStage+0x4a>
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d00a      	beq.n	80050c8 <USBD_LL_SetupStage+0x5e>
 80050b2:	e01d      	b.n	80050f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80050ba:	4619      	mov	r1, r3
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fb5f 	bl	8005780 <USBD_StdDevReq>
 80050c2:	4603      	mov	r3, r0
 80050c4:	73fb      	strb	r3, [r7, #15]
      break;
 80050c6:	e020      	b.n	800510a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80050ce:	4619      	mov	r1, r3
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fbc7 	bl	8005864 <USBD_StdItfReq>
 80050d6:	4603      	mov	r3, r0
 80050d8:	73fb      	strb	r3, [r7, #15]
      break;
 80050da:	e016      	b.n	800510a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80050e2:	4619      	mov	r1, r3
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 fc29 	bl	800593c <USBD_StdEPReq>
 80050ea:	4603      	mov	r3, r0
 80050ec:	73fb      	strb	r3, [r7, #15]
      break;
 80050ee:	e00c      	b.n	800510a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80050f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	4619      	mov	r1, r3
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f001 fdea 	bl	8006cd8 <USBD_LL_StallEP>
 8005104:	4603      	mov	r3, r0
 8005106:	73fb      	strb	r3, [r7, #15]
      break;
 8005108:	bf00      	nop
  }

  return ret;
 800510a:	7bfb      	ldrb	r3, [r7, #15]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	460b      	mov	r3, r1
 800511e:	607a      	str	r2, [r7, #4]
 8005120:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005122:	2300      	movs	r3, #0
 8005124:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005126:	7afb      	ldrb	r3, [r7, #11]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d16e      	bne.n	800520a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005132:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800513a:	2b03      	cmp	r3, #3
 800513c:	f040 8098 	bne.w	8005270 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	429a      	cmp	r2, r3
 800514a:	d913      	bls.n	8005174 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	1ad2      	subs	r2, r2, r3
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	4293      	cmp	r3, r2
 8005164:	bf28      	it	cs
 8005166:	4613      	movcs	r3, r2
 8005168:	461a      	mov	r2, r3
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f001 f984 	bl	800647a <USBD_CtlContinueRx>
 8005172:	e07d      	b.n	8005270 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800517a:	f003 031f 	and.w	r3, r3, #31
 800517e:	2b02      	cmp	r3, #2
 8005180:	d014      	beq.n	80051ac <USBD_LL_DataOutStage+0x98>
 8005182:	2b02      	cmp	r3, #2
 8005184:	d81d      	bhi.n	80051c2 <USBD_LL_DataOutStage+0xae>
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <USBD_LL_DataOutStage+0x7c>
 800518a:	2b01      	cmp	r3, #1
 800518c:	d003      	beq.n	8005196 <USBD_LL_DataOutStage+0x82>
 800518e:	e018      	b.n	80051c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	75bb      	strb	r3, [r7, #22]
            break;
 8005194:	e018      	b.n	80051c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800519c:	b2db      	uxtb	r3, r3
 800519e:	4619      	mov	r1, r3
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f000 fa5e 	bl	8005662 <USBD_CoreFindIF>
 80051a6:	4603      	mov	r3, r0
 80051a8:	75bb      	strb	r3, [r7, #22]
            break;
 80051aa:	e00d      	b.n	80051c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	4619      	mov	r1, r3
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 fa60 	bl	800567c <USBD_CoreFindEP>
 80051bc:	4603      	mov	r3, r0
 80051be:	75bb      	strb	r3, [r7, #22]
            break;
 80051c0:	e002      	b.n	80051c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	75bb      	strb	r3, [r7, #22]
            break;
 80051c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80051c8:	7dbb      	ldrb	r3, [r7, #22]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d119      	bne.n	8005202 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b03      	cmp	r3, #3
 80051d8:	d113      	bne.n	8005202 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80051da:	7dba      	ldrb	r2, [r7, #22]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	32ae      	adds	r2, #174	; 0xae
 80051e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00b      	beq.n	8005202 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80051ea:	7dba      	ldrb	r2, [r7, #22]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80051f2:	7dba      	ldrb	r2, [r7, #22]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	32ae      	adds	r2, #174	; 0xae
 80051f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f001 f94a 	bl	800649c <USBD_CtlSendStatus>
 8005208:	e032      	b.n	8005270 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800520a:	7afb      	ldrb	r3, [r7, #11]
 800520c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005210:	b2db      	uxtb	r3, r3
 8005212:	4619      	mov	r1, r3
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 fa31 	bl	800567c <USBD_CoreFindEP>
 800521a:	4603      	mov	r3, r0
 800521c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800521e:	7dbb      	ldrb	r3, [r7, #22]
 8005220:	2bff      	cmp	r3, #255	; 0xff
 8005222:	d025      	beq.n	8005270 <USBD_LL_DataOutStage+0x15c>
 8005224:	7dbb      	ldrb	r3, [r7, #22]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d122      	bne.n	8005270 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b03      	cmp	r3, #3
 8005234:	d117      	bne.n	8005266 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005236:	7dba      	ldrb	r2, [r7, #22]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	32ae      	adds	r2, #174	; 0xae
 800523c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00f      	beq.n	8005266 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005246:	7dba      	ldrb	r2, [r7, #22]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800524e:	7dba      	ldrb	r2, [r7, #22]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	32ae      	adds	r2, #174	; 0xae
 8005254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	7afa      	ldrb	r2, [r7, #11]
 800525c:	4611      	mov	r1, r2
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	4798      	blx	r3
 8005262:	4603      	mov	r3, r0
 8005264:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005266:	7dfb      	ldrb	r3, [r7, #23]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800526c:	7dfb      	ldrb	r3, [r7, #23]
 800526e:	e000      	b.n	8005272 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b086      	sub	sp, #24
 800527e:	af00      	add	r7, sp, #0
 8005280:	60f8      	str	r0, [r7, #12]
 8005282:	460b      	mov	r3, r1
 8005284:	607a      	str	r2, [r7, #4]
 8005286:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005288:	7afb      	ldrb	r3, [r7, #11]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d16f      	bne.n	800536e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	3314      	adds	r3, #20
 8005292:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800529a:	2b02      	cmp	r3, #2
 800529c:	d15a      	bne.n	8005354 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d914      	bls.n	80052d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	689a      	ldr	r2, [r3, #8]
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	1ad2      	subs	r2, r2, r3
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	461a      	mov	r2, r3
 80052be:	6879      	ldr	r1, [r7, #4]
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f001 f8ac 	bl	800641e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80052c6:	2300      	movs	r3, #0
 80052c8:	2200      	movs	r2, #0
 80052ca:	2100      	movs	r1, #0
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f001 fdad 	bl	8006e2c <USBD_LL_PrepareReceive>
 80052d2:	e03f      	b.n	8005354 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	68da      	ldr	r2, [r3, #12]
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d11c      	bne.n	800531a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d316      	bcc.n	800531a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d20f      	bcs.n	800531a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80052fa:	2200      	movs	r2, #0
 80052fc:	2100      	movs	r1, #0
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f001 f88d 	bl	800641e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800530c:	2300      	movs	r3, #0
 800530e:	2200      	movs	r2, #0
 8005310:	2100      	movs	r1, #0
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f001 fd8a 	bl	8006e2c <USBD_LL_PrepareReceive>
 8005318:	e01c      	b.n	8005354 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b03      	cmp	r3, #3
 8005324:	d10f      	bne.n	8005346 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d009      	beq.n	8005346 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005346:	2180      	movs	r1, #128	; 0x80
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f001 fcc5 	bl	8006cd8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f001 f8b7 	bl	80064c2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d03a      	beq.n	80053d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f7ff fe42 	bl	8004fe8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800536c:	e032      	b.n	80053d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800536e:	7afb      	ldrb	r3, [r7, #11]
 8005370:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005374:	b2db      	uxtb	r3, r3
 8005376:	4619      	mov	r1, r3
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f000 f97f 	bl	800567c <USBD_CoreFindEP>
 800537e:	4603      	mov	r3, r0
 8005380:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005382:	7dfb      	ldrb	r3, [r7, #23]
 8005384:	2bff      	cmp	r3, #255	; 0xff
 8005386:	d025      	beq.n	80053d4 <USBD_LL_DataInStage+0x15a>
 8005388:	7dfb      	ldrb	r3, [r7, #23]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d122      	bne.n	80053d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b03      	cmp	r3, #3
 8005398:	d11c      	bne.n	80053d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800539a:	7dfa      	ldrb	r2, [r7, #23]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	32ae      	adds	r2, #174	; 0xae
 80053a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d014      	beq.n	80053d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80053aa:	7dfa      	ldrb	r2, [r7, #23]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80053b2:	7dfa      	ldrb	r2, [r7, #23]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	32ae      	adds	r2, #174	; 0xae
 80053b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	7afa      	ldrb	r2, [r7, #11]
 80053c0:	4611      	mov	r1, r2
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	4798      	blx	r3
 80053c6:	4603      	mov	r3, r0
 80053c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80053ca:	7dbb      	ldrb	r3, [r7, #22]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80053d0:	7dbb      	ldrb	r3, [r7, #22]
 80053d2:	e000      	b.n	80053d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b084      	sub	sp, #16
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005416:	2b00      	cmp	r3, #0
 8005418:	d014      	beq.n	8005444 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00e      	beq.n	8005444 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	6852      	ldr	r2, [r2, #4]
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	4611      	mov	r1, r2
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	4798      	blx	r3
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005440:	2303      	movs	r3, #3
 8005442:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005444:	2340      	movs	r3, #64	; 0x40
 8005446:	2200      	movs	r2, #0
 8005448:	2100      	movs	r1, #0
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f001 fbff 	bl	8006c4e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2240      	movs	r2, #64	; 0x40
 800545c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005460:	2340      	movs	r3, #64	; 0x40
 8005462:	2200      	movs	r2, #0
 8005464:	2180      	movs	r1, #128	; 0x80
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f001 fbf1 	bl	8006c4e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2240      	movs	r2, #64	; 0x40
 8005476:	621a      	str	r2, [r3, #32]

  return ret;
 8005478:	7bfb      	ldrb	r3, [r7, #15]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
 800548a:	460b      	mov	r3, r1
 800548c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	78fa      	ldrb	r2, [r7, #3]
 8005492:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2204      	movs	r2, #4
 80054bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d106      	bne.n	80054f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b082      	sub	sp, #8
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b03      	cmp	r3, #3
 8005510:	d110      	bne.n	8005534 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00b      	beq.n	8005534 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d005      	beq.n	8005534 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800552e:	69db      	ldr	r3, [r3, #28]
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b082      	sub	sp, #8
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	460b      	mov	r3, r1
 8005548:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	32ae      	adds	r2, #174	; 0xae
 8005554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800555c:	2303      	movs	r3, #3
 800555e:	e01c      	b.n	800559a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b03      	cmp	r3, #3
 800556a:	d115      	bne.n	8005598 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	32ae      	adds	r2, #174	; 0xae
 8005576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00b      	beq.n	8005598 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	32ae      	adds	r2, #174	; 0xae
 800558a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	78fa      	ldrb	r2, [r7, #3]
 8005592:	4611      	mov	r1, r2
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b082      	sub	sp, #8
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	460b      	mov	r3, r1
 80055ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	32ae      	adds	r2, #174	; 0xae
 80055b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e01c      	b.n	80055fe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d115      	bne.n	80055fc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	32ae      	adds	r2, #174	; 0xae
 80055da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00b      	beq.n	80055fc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	32ae      	adds	r2, #174	; 0xae
 80055ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	78fa      	ldrb	r2, [r7, #3]
 80055f6:	4611      	mov	r1, r2
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005624:	2300      	movs	r3, #0
 8005626:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00e      	beq.n	8005658 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	6852      	ldr	r2, [r2, #4]
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	4611      	mov	r1, r2
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	4798      	blx	r3
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005654:	2303      	movs	r3, #3
 8005656:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005658:	7bfb      	ldrb	r3, [r7, #15]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
 800566a:	460b      	mov	r3, r1
 800566c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800566e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005670:	4618      	mov	r0, r3
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	460b      	mov	r3, r1
 8005686:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005688:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800568a:	4618      	mov	r0, r3
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b086      	sub	sp, #24
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	460b      	mov	r3, r1
 80056a0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80056aa:	2300      	movs	r3, #0
 80056ac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	885b      	ldrh	r3, [r3, #2]
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d920      	bls.n	8005700 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80056c6:	e013      	b.n	80056f0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80056c8:	f107 030a 	add.w	r3, r7, #10
 80056cc:	4619      	mov	r1, r3
 80056ce:	6978      	ldr	r0, [r7, #20]
 80056d0:	f000 f81b 	bl	800570a <USBD_GetNextDesc>
 80056d4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	785b      	ldrb	r3, [r3, #1]
 80056da:	2b05      	cmp	r3, #5
 80056dc:	d108      	bne.n	80056f0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	789b      	ldrb	r3, [r3, #2]
 80056e6:	78fa      	ldrb	r2, [r7, #3]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d008      	beq.n	80056fe <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80056ec:	2300      	movs	r3, #0
 80056ee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	885b      	ldrh	r3, [r3, #2]
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	897b      	ldrh	r3, [r7, #10]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d8e5      	bhi.n	80056c8 <USBD_GetEpDesc+0x32>
 80056fc:	e000      	b.n	8005700 <USBD_GetEpDesc+0x6a>
          break;
 80056fe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005700:	693b      	ldr	r3, [r7, #16]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800570a:	b480      	push	{r7}
 800570c:	b085      	sub	sp, #20
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	881a      	ldrh	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	b29b      	uxth	r3, r3
 8005722:	4413      	add	r3, r2
 8005724:	b29a      	uxth	r2, r3
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	461a      	mov	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4413      	add	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005736:	68fb      	ldr	r3, [r7, #12]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	3301      	adds	r3, #1
 800575a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005762:	8a3b      	ldrh	r3, [r7, #16]
 8005764:	021b      	lsls	r3, r3, #8
 8005766:	b21a      	sxth	r2, r3
 8005768:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800576c:	4313      	orrs	r3, r2
 800576e:	b21b      	sxth	r3, r3
 8005770:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005772:	89fb      	ldrh	r3, [r7, #14]
}
 8005774:	4618      	mov	r0, r3
 8005776:	371c      	adds	r7, #28
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800578a:	2300      	movs	r3, #0
 800578c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005796:	2b40      	cmp	r3, #64	; 0x40
 8005798:	d005      	beq.n	80057a6 <USBD_StdDevReq+0x26>
 800579a:	2b40      	cmp	r3, #64	; 0x40
 800579c:	d857      	bhi.n	800584e <USBD_StdDevReq+0xce>
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00f      	beq.n	80057c2 <USBD_StdDevReq+0x42>
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	d153      	bne.n	800584e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	32ae      	adds	r2, #174	; 0xae
 80057b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	6839      	ldr	r1, [r7, #0]
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	4798      	blx	r3
 80057bc:	4603      	mov	r3, r0
 80057be:	73fb      	strb	r3, [r7, #15]
      break;
 80057c0:	e04a      	b.n	8005858 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	785b      	ldrb	r3, [r3, #1]
 80057c6:	2b09      	cmp	r3, #9
 80057c8:	d83b      	bhi.n	8005842 <USBD_StdDevReq+0xc2>
 80057ca:	a201      	add	r2, pc, #4	; (adr r2, 80057d0 <USBD_StdDevReq+0x50>)
 80057cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d0:	08005825 	.word	0x08005825
 80057d4:	08005839 	.word	0x08005839
 80057d8:	08005843 	.word	0x08005843
 80057dc:	0800582f 	.word	0x0800582f
 80057e0:	08005843 	.word	0x08005843
 80057e4:	08005803 	.word	0x08005803
 80057e8:	080057f9 	.word	0x080057f9
 80057ec:	08005843 	.word	0x08005843
 80057f0:	0800581b 	.word	0x0800581b
 80057f4:	0800580d 	.word	0x0800580d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80057f8:	6839      	ldr	r1, [r7, #0]
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fa3c 	bl	8005c78 <USBD_GetDescriptor>
          break;
 8005800:	e024      	b.n	800584c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005802:	6839      	ldr	r1, [r7, #0]
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fba1 	bl	8005f4c <USBD_SetAddress>
          break;
 800580a:	e01f      	b.n	800584c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800580c:	6839      	ldr	r1, [r7, #0]
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fbe0 	bl	8005fd4 <USBD_SetConfig>
 8005814:	4603      	mov	r3, r0
 8005816:	73fb      	strb	r3, [r7, #15]
          break;
 8005818:	e018      	b.n	800584c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800581a:	6839      	ldr	r1, [r7, #0]
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fc83 	bl	8006128 <USBD_GetConfig>
          break;
 8005822:	e013      	b.n	800584c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005824:	6839      	ldr	r1, [r7, #0]
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fcb4 	bl	8006194 <USBD_GetStatus>
          break;
 800582c:	e00e      	b.n	800584c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800582e:	6839      	ldr	r1, [r7, #0]
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fce3 	bl	80061fc <USBD_SetFeature>
          break;
 8005836:	e009      	b.n	800584c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005838:	6839      	ldr	r1, [r7, #0]
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 fd07 	bl	800624e <USBD_ClrFeature>
          break;
 8005840:	e004      	b.n	800584c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005842:	6839      	ldr	r1, [r7, #0]
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 fd5e 	bl	8006306 <USBD_CtlError>
          break;
 800584a:	bf00      	nop
      }
      break;
 800584c:	e004      	b.n	8005858 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800584e:	6839      	ldr	r1, [r7, #0]
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fd58 	bl	8006306 <USBD_CtlError>
      break;
 8005856:	bf00      	nop
  }

  return ret;
 8005858:	7bfb      	ldrb	r3, [r7, #15]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop

08005864 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800587a:	2b40      	cmp	r3, #64	; 0x40
 800587c:	d005      	beq.n	800588a <USBD_StdItfReq+0x26>
 800587e:	2b40      	cmp	r3, #64	; 0x40
 8005880:	d852      	bhi.n	8005928 <USBD_StdItfReq+0xc4>
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <USBD_StdItfReq+0x26>
 8005886:	2b20      	cmp	r3, #32
 8005888:	d14e      	bne.n	8005928 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005890:	b2db      	uxtb	r3, r3
 8005892:	3b01      	subs	r3, #1
 8005894:	2b02      	cmp	r3, #2
 8005896:	d840      	bhi.n	800591a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	889b      	ldrh	r3, [r3, #4]
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d836      	bhi.n	8005910 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	889b      	ldrh	r3, [r3, #4]
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	4619      	mov	r1, r3
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7ff fed9 	bl	8005662 <USBD_CoreFindIF>
 80058b0:	4603      	mov	r3, r0
 80058b2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80058b4:	7bbb      	ldrb	r3, [r7, #14]
 80058b6:	2bff      	cmp	r3, #255	; 0xff
 80058b8:	d01d      	beq.n	80058f6 <USBD_StdItfReq+0x92>
 80058ba:	7bbb      	ldrb	r3, [r7, #14]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d11a      	bne.n	80058f6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80058c0:	7bba      	ldrb	r2, [r7, #14]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	32ae      	adds	r2, #174	; 0xae
 80058c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00f      	beq.n	80058f0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80058d0:	7bba      	ldrb	r2, [r7, #14]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80058d8:	7bba      	ldrb	r2, [r7, #14]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	32ae      	adds	r2, #174	; 0xae
 80058de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	6839      	ldr	r1, [r7, #0]
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	4798      	blx	r3
 80058ea:	4603      	mov	r3, r0
 80058ec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80058ee:	e004      	b.n	80058fa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80058f0:	2303      	movs	r3, #3
 80058f2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80058f4:	e001      	b.n	80058fa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80058f6:	2303      	movs	r3, #3
 80058f8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	88db      	ldrh	r3, [r3, #6]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d110      	bne.n	8005924 <USBD_StdItfReq+0xc0>
 8005902:	7bfb      	ldrb	r3, [r7, #15]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10d      	bne.n	8005924 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 fdc7 	bl	800649c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800590e:	e009      	b.n	8005924 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005910:	6839      	ldr	r1, [r7, #0]
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 fcf7 	bl	8006306 <USBD_CtlError>
          break;
 8005918:	e004      	b.n	8005924 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800591a:	6839      	ldr	r1, [r7, #0]
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fcf2 	bl	8006306 <USBD_CtlError>
          break;
 8005922:	e000      	b.n	8005926 <USBD_StdItfReq+0xc2>
          break;
 8005924:	bf00      	nop
      }
      break;
 8005926:	e004      	b.n	8005932 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005928:	6839      	ldr	r1, [r7, #0]
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fceb 	bl	8006306 <USBD_CtlError>
      break;
 8005930:	bf00      	nop
  }

  return ret;
 8005932:	7bfb      	ldrb	r3, [r7, #15]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	889b      	ldrh	r3, [r3, #4]
 800594e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005958:	2b40      	cmp	r3, #64	; 0x40
 800595a:	d007      	beq.n	800596c <USBD_StdEPReq+0x30>
 800595c:	2b40      	cmp	r3, #64	; 0x40
 800595e:	f200 817f 	bhi.w	8005c60 <USBD_StdEPReq+0x324>
 8005962:	2b00      	cmp	r3, #0
 8005964:	d02a      	beq.n	80059bc <USBD_StdEPReq+0x80>
 8005966:	2b20      	cmp	r3, #32
 8005968:	f040 817a 	bne.w	8005c60 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800596c:	7bbb      	ldrb	r3, [r7, #14]
 800596e:	4619      	mov	r1, r3
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7ff fe83 	bl	800567c <USBD_CoreFindEP>
 8005976:	4603      	mov	r3, r0
 8005978:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800597a:	7b7b      	ldrb	r3, [r7, #13]
 800597c:	2bff      	cmp	r3, #255	; 0xff
 800597e:	f000 8174 	beq.w	8005c6a <USBD_StdEPReq+0x32e>
 8005982:	7b7b      	ldrb	r3, [r7, #13]
 8005984:	2b00      	cmp	r3, #0
 8005986:	f040 8170 	bne.w	8005c6a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800598a:	7b7a      	ldrb	r2, [r7, #13]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005992:	7b7a      	ldrb	r2, [r7, #13]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	32ae      	adds	r2, #174	; 0xae
 8005998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f000 8163 	beq.w	8005c6a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80059a4:	7b7a      	ldrb	r2, [r7, #13]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	32ae      	adds	r2, #174	; 0xae
 80059aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	6839      	ldr	r1, [r7, #0]
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	4798      	blx	r3
 80059b6:	4603      	mov	r3, r0
 80059b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059ba:	e156      	b.n	8005c6a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	785b      	ldrb	r3, [r3, #1]
 80059c0:	2b03      	cmp	r3, #3
 80059c2:	d008      	beq.n	80059d6 <USBD_StdEPReq+0x9a>
 80059c4:	2b03      	cmp	r3, #3
 80059c6:	f300 8145 	bgt.w	8005c54 <USBD_StdEPReq+0x318>
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 809b 	beq.w	8005b06 <USBD_StdEPReq+0x1ca>
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d03c      	beq.n	8005a4e <USBD_StdEPReq+0x112>
 80059d4:	e13e      	b.n	8005c54 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d002      	beq.n	80059e8 <USBD_StdEPReq+0xac>
 80059e2:	2b03      	cmp	r3, #3
 80059e4:	d016      	beq.n	8005a14 <USBD_StdEPReq+0xd8>
 80059e6:	e02c      	b.n	8005a42 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059e8:	7bbb      	ldrb	r3, [r7, #14]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00d      	beq.n	8005a0a <USBD_StdEPReq+0xce>
 80059ee:	7bbb      	ldrb	r3, [r7, #14]
 80059f0:	2b80      	cmp	r3, #128	; 0x80
 80059f2:	d00a      	beq.n	8005a0a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80059f4:	7bbb      	ldrb	r3, [r7, #14]
 80059f6:	4619      	mov	r1, r3
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f001 f96d 	bl	8006cd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80059fe:	2180      	movs	r1, #128	; 0x80
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f001 f969 	bl	8006cd8 <USBD_LL_StallEP>
 8005a06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a08:	e020      	b.n	8005a4c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005a0a:	6839      	ldr	r1, [r7, #0]
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fc7a 	bl	8006306 <USBD_CtlError>
              break;
 8005a12:	e01b      	b.n	8005a4c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	885b      	ldrh	r3, [r3, #2]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10e      	bne.n	8005a3a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005a1c:	7bbb      	ldrb	r3, [r7, #14]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00b      	beq.n	8005a3a <USBD_StdEPReq+0xfe>
 8005a22:	7bbb      	ldrb	r3, [r7, #14]
 8005a24:	2b80      	cmp	r3, #128	; 0x80
 8005a26:	d008      	beq.n	8005a3a <USBD_StdEPReq+0xfe>
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	88db      	ldrh	r3, [r3, #6]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d104      	bne.n	8005a3a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a30:	7bbb      	ldrb	r3, [r7, #14]
 8005a32:	4619      	mov	r1, r3
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f001 f94f 	bl	8006cd8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fd2e 	bl	800649c <USBD_CtlSendStatus>

              break;
 8005a40:	e004      	b.n	8005a4c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005a42:	6839      	ldr	r1, [r7, #0]
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 fc5e 	bl	8006306 <USBD_CtlError>
              break;
 8005a4a:	bf00      	nop
          }
          break;
 8005a4c:	e107      	b.n	8005c5e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d002      	beq.n	8005a60 <USBD_StdEPReq+0x124>
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d016      	beq.n	8005a8c <USBD_StdEPReq+0x150>
 8005a5e:	e04b      	b.n	8005af8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a60:	7bbb      	ldrb	r3, [r7, #14]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00d      	beq.n	8005a82 <USBD_StdEPReq+0x146>
 8005a66:	7bbb      	ldrb	r3, [r7, #14]
 8005a68:	2b80      	cmp	r3, #128	; 0x80
 8005a6a:	d00a      	beq.n	8005a82 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a6c:	7bbb      	ldrb	r3, [r7, #14]
 8005a6e:	4619      	mov	r1, r3
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f001 f931 	bl	8006cd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a76:	2180      	movs	r1, #128	; 0x80
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f001 f92d 	bl	8006cd8 <USBD_LL_StallEP>
 8005a7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a80:	e040      	b.n	8005b04 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005a82:	6839      	ldr	r1, [r7, #0]
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 fc3e 	bl	8006306 <USBD_CtlError>
              break;
 8005a8a:	e03b      	b.n	8005b04 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	885b      	ldrh	r3, [r3, #2]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d136      	bne.n	8005b02 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005a94:	7bbb      	ldrb	r3, [r7, #14]
 8005a96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d004      	beq.n	8005aa8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005a9e:	7bbb      	ldrb	r3, [r7, #14]
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f001 f937 	bl	8006d16 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 fcf7 	bl	800649c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005aae:	7bbb      	ldrb	r3, [r7, #14]
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7ff fde2 	bl	800567c <USBD_CoreFindEP>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005abc:	7b7b      	ldrb	r3, [r7, #13]
 8005abe:	2bff      	cmp	r3, #255	; 0xff
 8005ac0:	d01f      	beq.n	8005b02 <USBD_StdEPReq+0x1c6>
 8005ac2:	7b7b      	ldrb	r3, [r7, #13]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d11c      	bne.n	8005b02 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005ac8:	7b7a      	ldrb	r2, [r7, #13]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005ad0:	7b7a      	ldrb	r2, [r7, #13]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	32ae      	adds	r2, #174	; 0xae
 8005ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d010      	beq.n	8005b02 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005ae0:	7b7a      	ldrb	r2, [r7, #13]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	32ae      	adds	r2, #174	; 0xae
 8005ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	6839      	ldr	r1, [r7, #0]
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	4798      	blx	r3
 8005af2:	4603      	mov	r3, r0
 8005af4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005af6:	e004      	b.n	8005b02 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005af8:	6839      	ldr	r1, [r7, #0]
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 fc03 	bl	8006306 <USBD_CtlError>
              break;
 8005b00:	e000      	b.n	8005b04 <USBD_StdEPReq+0x1c8>
              break;
 8005b02:	bf00      	nop
          }
          break;
 8005b04:	e0ab      	b.n	8005c5e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d002      	beq.n	8005b18 <USBD_StdEPReq+0x1dc>
 8005b12:	2b03      	cmp	r3, #3
 8005b14:	d032      	beq.n	8005b7c <USBD_StdEPReq+0x240>
 8005b16:	e097      	b.n	8005c48 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b18:	7bbb      	ldrb	r3, [r7, #14]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d007      	beq.n	8005b2e <USBD_StdEPReq+0x1f2>
 8005b1e:	7bbb      	ldrb	r3, [r7, #14]
 8005b20:	2b80      	cmp	r3, #128	; 0x80
 8005b22:	d004      	beq.n	8005b2e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005b24:	6839      	ldr	r1, [r7, #0]
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fbed 	bl	8006306 <USBD_CtlError>
                break;
 8005b2c:	e091      	b.n	8005c52 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	da0b      	bge.n	8005b4e <USBD_StdEPReq+0x212>
 8005b36:	7bbb      	ldrb	r3, [r7, #14]
 8005b38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	3310      	adds	r3, #16
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	4413      	add	r3, r2
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	e00b      	b.n	8005b66 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b4e:	7bbb      	ldrb	r3, [r7, #14]
 8005b50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b54:	4613      	mov	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	4413      	add	r3, r2
 8005b64:	3304      	adds	r3, #4
 8005b66:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2202      	movs	r2, #2
 8005b72:	4619      	mov	r1, r3
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 fc37 	bl	80063e8 <USBD_CtlSendData>
              break;
 8005b7a:	e06a      	b.n	8005c52 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005b7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	da11      	bge.n	8005ba8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b84:	7bbb      	ldrb	r3, [r7, #14]
 8005b86:	f003 020f 	and.w	r2, r3, #15
 8005b8a:	6879      	ldr	r1, [r7, #4]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	440b      	add	r3, r1
 8005b96:	3324      	adds	r3, #36	; 0x24
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d117      	bne.n	8005bce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005b9e:	6839      	ldr	r1, [r7, #0]
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 fbb0 	bl	8006306 <USBD_CtlError>
                  break;
 8005ba6:	e054      	b.n	8005c52 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005ba8:	7bbb      	ldrb	r3, [r7, #14]
 8005baa:	f003 020f 	and.w	r2, r3, #15
 8005bae:	6879      	ldr	r1, [r7, #4]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	440b      	add	r3, r1
 8005bba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d104      	bne.n	8005bce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005bc4:	6839      	ldr	r1, [r7, #0]
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fb9d 	bl	8006306 <USBD_CtlError>
                  break;
 8005bcc:	e041      	b.n	8005c52 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	da0b      	bge.n	8005bee <USBD_StdEPReq+0x2b2>
 8005bd6:	7bbb      	ldrb	r3, [r7, #14]
 8005bd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bdc:	4613      	mov	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	3310      	adds	r3, #16
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	4413      	add	r3, r2
 8005bea:	3304      	adds	r3, #4
 8005bec:	e00b      	b.n	8005c06 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005bee:	7bbb      	ldrb	r3, [r7, #14]
 8005bf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	4413      	add	r3, r2
 8005c04:	3304      	adds	r3, #4
 8005c06:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005c08:	7bbb      	ldrb	r3, [r7, #14]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <USBD_StdEPReq+0x2d8>
 8005c0e:	7bbb      	ldrb	r3, [r7, #14]
 8005c10:	2b80      	cmp	r3, #128	; 0x80
 8005c12:	d103      	bne.n	8005c1c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2200      	movs	r2, #0
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	e00e      	b.n	8005c3a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005c1c:	7bbb      	ldrb	r3, [r7, #14]
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f001 f897 	bl	8006d54 <USBD_LL_IsStallEP>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	e002      	b.n	8005c3a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	2200      	movs	r2, #0
 8005c38:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	2202      	movs	r2, #2
 8005c3e:	4619      	mov	r1, r3
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fbd1 	bl	80063e8 <USBD_CtlSendData>
              break;
 8005c46:	e004      	b.n	8005c52 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005c48:	6839      	ldr	r1, [r7, #0]
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fb5b 	bl	8006306 <USBD_CtlError>
              break;
 8005c50:	bf00      	nop
          }
          break;
 8005c52:	e004      	b.n	8005c5e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005c54:	6839      	ldr	r1, [r7, #0]
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fb55 	bl	8006306 <USBD_CtlError>
          break;
 8005c5c:	bf00      	nop
      }
      break;
 8005c5e:	e005      	b.n	8005c6c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005c60:	6839      	ldr	r1, [r7, #0]
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 fb4f 	bl	8006306 <USBD_CtlError>
      break;
 8005c68:	e000      	b.n	8005c6c <USBD_StdEPReq+0x330>
      break;
 8005c6a:	bf00      	nop
  }

  return ret;
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
	...

08005c78 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c82:	2300      	movs	r3, #0
 8005c84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005c86:	2300      	movs	r3, #0
 8005c88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	885b      	ldrh	r3, [r3, #2]
 8005c92:	0a1b      	lsrs	r3, r3, #8
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	3b01      	subs	r3, #1
 8005c98:	2b06      	cmp	r3, #6
 8005c9a:	f200 8128 	bhi.w	8005eee <USBD_GetDescriptor+0x276>
 8005c9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ca4 <USBD_GetDescriptor+0x2c>)
 8005ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca4:	08005cc1 	.word	0x08005cc1
 8005ca8:	08005cd9 	.word	0x08005cd9
 8005cac:	08005d19 	.word	0x08005d19
 8005cb0:	08005eef 	.word	0x08005eef
 8005cb4:	08005eef 	.word	0x08005eef
 8005cb8:	08005e8f 	.word	0x08005e8f
 8005cbc:	08005ebb 	.word	0x08005ebb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	7c12      	ldrb	r2, [r2, #16]
 8005ccc:	f107 0108 	add.w	r1, r7, #8
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	4798      	blx	r3
 8005cd4:	60f8      	str	r0, [r7, #12]
      break;
 8005cd6:	e112      	b.n	8005efe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	7c1b      	ldrb	r3, [r3, #16]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10d      	bne.n	8005cfc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce8:	f107 0208 	add.w	r2, r7, #8
 8005cec:	4610      	mov	r0, r2
 8005cee:	4798      	blx	r3
 8005cf0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005cfa:	e100      	b.n	8005efe <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d04:	f107 0208 	add.w	r2, r7, #8
 8005d08:	4610      	mov	r0, r2
 8005d0a:	4798      	blx	r3
 8005d0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	3301      	adds	r3, #1
 8005d12:	2202      	movs	r2, #2
 8005d14:	701a      	strb	r2, [r3, #0]
      break;
 8005d16:	e0f2      	b.n	8005efe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	885b      	ldrh	r3, [r3, #2]
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b05      	cmp	r3, #5
 8005d20:	f200 80ac 	bhi.w	8005e7c <USBD_GetDescriptor+0x204>
 8005d24:	a201      	add	r2, pc, #4	; (adr r2, 8005d2c <USBD_GetDescriptor+0xb4>)
 8005d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2a:	bf00      	nop
 8005d2c:	08005d45 	.word	0x08005d45
 8005d30:	08005d79 	.word	0x08005d79
 8005d34:	08005dad 	.word	0x08005dad
 8005d38:	08005de1 	.word	0x08005de1
 8005d3c:	08005e15 	.word	0x08005e15
 8005d40:	08005e49 	.word	0x08005e49
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00b      	beq.n	8005d68 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	7c12      	ldrb	r2, [r2, #16]
 8005d5c:	f107 0108 	add.w	r1, r7, #8
 8005d60:	4610      	mov	r0, r2
 8005d62:	4798      	blx	r3
 8005d64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d66:	e091      	b.n	8005e8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d68:	6839      	ldr	r1, [r7, #0]
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 facb 	bl	8006306 <USBD_CtlError>
            err++;
 8005d70:	7afb      	ldrb	r3, [r7, #11]
 8005d72:	3301      	adds	r3, #1
 8005d74:	72fb      	strb	r3, [r7, #11]
          break;
 8005d76:	e089      	b.n	8005e8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00b      	beq.n	8005d9c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	7c12      	ldrb	r2, [r2, #16]
 8005d90:	f107 0108 	add.w	r1, r7, #8
 8005d94:	4610      	mov	r0, r2
 8005d96:	4798      	blx	r3
 8005d98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d9a:	e077      	b.n	8005e8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d9c:	6839      	ldr	r1, [r7, #0]
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fab1 	bl	8006306 <USBD_CtlError>
            err++;
 8005da4:	7afb      	ldrb	r3, [r7, #11]
 8005da6:	3301      	adds	r3, #1
 8005da8:	72fb      	strb	r3, [r7, #11]
          break;
 8005daa:	e06f      	b.n	8005e8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00b      	beq.n	8005dd0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	7c12      	ldrb	r2, [r2, #16]
 8005dc4:	f107 0108 	add.w	r1, r7, #8
 8005dc8:	4610      	mov	r0, r2
 8005dca:	4798      	blx	r3
 8005dcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dce:	e05d      	b.n	8005e8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005dd0:	6839      	ldr	r1, [r7, #0]
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fa97 	bl	8006306 <USBD_CtlError>
            err++;
 8005dd8:	7afb      	ldrb	r3, [r7, #11]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	72fb      	strb	r3, [r7, #11]
          break;
 8005dde:	e055      	b.n	8005e8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00b      	beq.n	8005e04 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	7c12      	ldrb	r2, [r2, #16]
 8005df8:	f107 0108 	add.w	r1, r7, #8
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	4798      	blx	r3
 8005e00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e02:	e043      	b.n	8005e8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e04:	6839      	ldr	r1, [r7, #0]
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fa7d 	bl	8006306 <USBD_CtlError>
            err++;
 8005e0c:	7afb      	ldrb	r3, [r7, #11]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	72fb      	strb	r3, [r7, #11]
          break;
 8005e12:	e03b      	b.n	8005e8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00b      	beq.n	8005e38 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	7c12      	ldrb	r2, [r2, #16]
 8005e2c:	f107 0108 	add.w	r1, r7, #8
 8005e30:	4610      	mov	r0, r2
 8005e32:	4798      	blx	r3
 8005e34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e36:	e029      	b.n	8005e8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fa63 	bl	8006306 <USBD_CtlError>
            err++;
 8005e40:	7afb      	ldrb	r3, [r7, #11]
 8005e42:	3301      	adds	r3, #1
 8005e44:	72fb      	strb	r3, [r7, #11]
          break;
 8005e46:	e021      	b.n	8005e8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00b      	beq.n	8005e6c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	7c12      	ldrb	r2, [r2, #16]
 8005e60:	f107 0108 	add.w	r1, r7, #8
 8005e64:	4610      	mov	r0, r2
 8005e66:	4798      	blx	r3
 8005e68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e6a:	e00f      	b.n	8005e8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e6c:	6839      	ldr	r1, [r7, #0]
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fa49 	bl	8006306 <USBD_CtlError>
            err++;
 8005e74:	7afb      	ldrb	r3, [r7, #11]
 8005e76:	3301      	adds	r3, #1
 8005e78:	72fb      	strb	r3, [r7, #11]
          break;
 8005e7a:	e007      	b.n	8005e8c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005e7c:	6839      	ldr	r1, [r7, #0]
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fa41 	bl	8006306 <USBD_CtlError>
          err++;
 8005e84:	7afb      	ldrb	r3, [r7, #11]
 8005e86:	3301      	adds	r3, #1
 8005e88:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005e8a:	bf00      	nop
      }
      break;
 8005e8c:	e037      	b.n	8005efe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	7c1b      	ldrb	r3, [r3, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d109      	bne.n	8005eaa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9e:	f107 0208 	add.w	r2, r7, #8
 8005ea2:	4610      	mov	r0, r2
 8005ea4:	4798      	blx	r3
 8005ea6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ea8:	e029      	b.n	8005efe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005eaa:	6839      	ldr	r1, [r7, #0]
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fa2a 	bl	8006306 <USBD_CtlError>
        err++;
 8005eb2:	7afb      	ldrb	r3, [r7, #11]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	72fb      	strb	r3, [r7, #11]
      break;
 8005eb8:	e021      	b.n	8005efe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	7c1b      	ldrb	r3, [r3, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10d      	bne.n	8005ede <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eca:	f107 0208 	add.w	r2, r7, #8
 8005ece:	4610      	mov	r0, r2
 8005ed0:	4798      	blx	r3
 8005ed2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	2207      	movs	r2, #7
 8005eda:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005edc:	e00f      	b.n	8005efe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005ede:	6839      	ldr	r1, [r7, #0]
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fa10 	bl	8006306 <USBD_CtlError>
        err++;
 8005ee6:	7afb      	ldrb	r3, [r7, #11]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	72fb      	strb	r3, [r7, #11]
      break;
 8005eec:	e007      	b.n	8005efe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005eee:	6839      	ldr	r1, [r7, #0]
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 fa08 	bl	8006306 <USBD_CtlError>
      err++;
 8005ef6:	7afb      	ldrb	r3, [r7, #11]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	72fb      	strb	r3, [r7, #11]
      break;
 8005efc:	bf00      	nop
  }

  if (err != 0U)
 8005efe:	7afb      	ldrb	r3, [r7, #11]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d11e      	bne.n	8005f42 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	88db      	ldrh	r3, [r3, #6]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d016      	beq.n	8005f3a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005f0c:	893b      	ldrh	r3, [r7, #8]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00e      	beq.n	8005f30 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	88da      	ldrh	r2, [r3, #6]
 8005f16:	893b      	ldrh	r3, [r7, #8]
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	bf28      	it	cs
 8005f1c:	4613      	movcs	r3, r2
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005f22:	893b      	ldrh	r3, [r7, #8]
 8005f24:	461a      	mov	r2, r3
 8005f26:	68f9      	ldr	r1, [r7, #12]
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fa5d 	bl	80063e8 <USBD_CtlSendData>
 8005f2e:	e009      	b.n	8005f44 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005f30:	6839      	ldr	r1, [r7, #0]
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f9e7 	bl	8006306 <USBD_CtlError>
 8005f38:	e004      	b.n	8005f44 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 faae 	bl	800649c <USBD_CtlSendStatus>
 8005f40:	e000      	b.n	8005f44 <USBD_GetDescriptor+0x2cc>
    return;
 8005f42:	bf00      	nop
  }
}
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop

08005f4c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	889b      	ldrh	r3, [r3, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d131      	bne.n	8005fc2 <USBD_SetAddress+0x76>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	88db      	ldrh	r3, [r3, #6]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d12d      	bne.n	8005fc2 <USBD_SetAddress+0x76>
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	885b      	ldrh	r3, [r3, #2]
 8005f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8005f6c:	d829      	bhi.n	8005fc2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	885b      	ldrh	r3, [r3, #2]
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b03      	cmp	r3, #3
 8005f84:	d104      	bne.n	8005f90 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005f86:	6839      	ldr	r1, [r7, #0]
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f9bc 	bl	8006306 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f8e:	e01d      	b.n	8005fcc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	7bfa      	ldrb	r2, [r7, #15]
 8005f94:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005f98:	7bfb      	ldrb	r3, [r7, #15]
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 ff05 	bl	8006dac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fa7a 	bl	800649c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d004      	beq.n	8005fb8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2202      	movs	r2, #2
 8005fb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fb6:	e009      	b.n	8005fcc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fc0:	e004      	b.n	8005fcc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005fc2:	6839      	ldr	r1, [r7, #0]
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f99e 	bl	8006306 <USBD_CtlError>
  }
}
 8005fca:	bf00      	nop
 8005fcc:	bf00      	nop
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	885b      	ldrh	r3, [r3, #2]
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	4b4e      	ldr	r3, [pc, #312]	; (8006124 <USBD_SetConfig+0x150>)
 8005fea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005fec:	4b4d      	ldr	r3, [pc, #308]	; (8006124 <USBD_SetConfig+0x150>)
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d905      	bls.n	8006000 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005ff4:	6839      	ldr	r1, [r7, #0]
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f985 	bl	8006306 <USBD_CtlError>
    return USBD_FAIL;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e08c      	b.n	800611a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b02      	cmp	r3, #2
 800600a:	d002      	beq.n	8006012 <USBD_SetConfig+0x3e>
 800600c:	2b03      	cmp	r3, #3
 800600e:	d029      	beq.n	8006064 <USBD_SetConfig+0x90>
 8006010:	e075      	b.n	80060fe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006012:	4b44      	ldr	r3, [pc, #272]	; (8006124 <USBD_SetConfig+0x150>)
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d020      	beq.n	800605c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800601a:	4b42      	ldr	r3, [pc, #264]	; (8006124 <USBD_SetConfig+0x150>)
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	461a      	mov	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006024:	4b3f      	ldr	r3, [pc, #252]	; (8006124 <USBD_SetConfig+0x150>)
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	4619      	mov	r1, r3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7fe ffe7 	bl	8004ffe <USBD_SetClassConfig>
 8006030:	4603      	mov	r3, r0
 8006032:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006034:	7bfb      	ldrb	r3, [r7, #15]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d008      	beq.n	800604c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800603a:	6839      	ldr	r1, [r7, #0]
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f962 	bl	8006306 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2202      	movs	r2, #2
 8006046:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800604a:	e065      	b.n	8006118 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 fa25 	bl	800649c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2203      	movs	r2, #3
 8006056:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800605a:	e05d      	b.n	8006118 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fa1d 	bl	800649c <USBD_CtlSendStatus>
      break;
 8006062:	e059      	b.n	8006118 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006064:	4b2f      	ldr	r3, [pc, #188]	; (8006124 <USBD_SetConfig+0x150>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d112      	bne.n	8006092 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006074:	4b2b      	ldr	r3, [pc, #172]	; (8006124 <USBD_SetConfig+0x150>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	461a      	mov	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800607e:	4b29      	ldr	r3, [pc, #164]	; (8006124 <USBD_SetConfig+0x150>)
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	4619      	mov	r1, r3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f7fe ffd6 	bl	8005036 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fa06 	bl	800649c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006090:	e042      	b.n	8006118 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006092:	4b24      	ldr	r3, [pc, #144]	; (8006124 <USBD_SetConfig+0x150>)
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	429a      	cmp	r2, r3
 800609e:	d02a      	beq.n	80060f6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	4619      	mov	r1, r3
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7fe ffc4 	bl	8005036 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80060ae:	4b1d      	ldr	r3, [pc, #116]	; (8006124 <USBD_SetConfig+0x150>)
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80060b8:	4b1a      	ldr	r3, [pc, #104]	; (8006124 <USBD_SetConfig+0x150>)
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	4619      	mov	r1, r3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7fe ff9d 	bl	8004ffe <USBD_SetClassConfig>
 80060c4:	4603      	mov	r3, r0
 80060c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00f      	beq.n	80060ee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80060ce:	6839      	ldr	r1, [r7, #0]
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f918 	bl	8006306 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	4619      	mov	r1, r3
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f7fe ffa9 	bl	8005036 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80060ec:	e014      	b.n	8006118 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f9d4 	bl	800649c <USBD_CtlSendStatus>
      break;
 80060f4:	e010      	b.n	8006118 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f9d0 	bl	800649c <USBD_CtlSendStatus>
      break;
 80060fc:	e00c      	b.n	8006118 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80060fe:	6839      	ldr	r1, [r7, #0]
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f900 	bl	8006306 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006106:	4b07      	ldr	r3, [pc, #28]	; (8006124 <USBD_SetConfig+0x150>)
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	4619      	mov	r1, r3
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7fe ff92 	bl	8005036 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006112:	2303      	movs	r3, #3
 8006114:	73fb      	strb	r3, [r7, #15]
      break;
 8006116:	bf00      	nop
  }

  return ret;
 8006118:	7bfb      	ldrb	r3, [r7, #15]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	200001c0 	.word	0x200001c0

08006128 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	88db      	ldrh	r3, [r3, #6]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d004      	beq.n	8006144 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800613a:	6839      	ldr	r1, [r7, #0]
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f8e2 	bl	8006306 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006142:	e023      	b.n	800618c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b02      	cmp	r3, #2
 800614e:	dc02      	bgt.n	8006156 <USBD_GetConfig+0x2e>
 8006150:	2b00      	cmp	r3, #0
 8006152:	dc03      	bgt.n	800615c <USBD_GetConfig+0x34>
 8006154:	e015      	b.n	8006182 <USBD_GetConfig+0x5a>
 8006156:	2b03      	cmp	r3, #3
 8006158:	d00b      	beq.n	8006172 <USBD_GetConfig+0x4a>
 800615a:	e012      	b.n	8006182 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	3308      	adds	r3, #8
 8006166:	2201      	movs	r2, #1
 8006168:	4619      	mov	r1, r3
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f93c 	bl	80063e8 <USBD_CtlSendData>
        break;
 8006170:	e00c      	b.n	800618c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	3304      	adds	r3, #4
 8006176:	2201      	movs	r2, #1
 8006178:	4619      	mov	r1, r3
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f934 	bl	80063e8 <USBD_CtlSendData>
        break;
 8006180:	e004      	b.n	800618c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006182:	6839      	ldr	r1, [r7, #0]
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 f8be 	bl	8006306 <USBD_CtlError>
        break;
 800618a:	bf00      	nop
}
 800618c:	bf00      	nop
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	3b01      	subs	r3, #1
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d81e      	bhi.n	80061ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	88db      	ldrh	r3, [r3, #6]
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d004      	beq.n	80061be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80061b4:	6839      	ldr	r1, [r7, #0]
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f8a5 	bl	8006306 <USBD_CtlError>
        break;
 80061bc:	e01a      	b.n	80061f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d005      	beq.n	80061da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	f043 0202 	orr.w	r2, r3, #2
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	330c      	adds	r3, #12
 80061de:	2202      	movs	r2, #2
 80061e0:	4619      	mov	r1, r3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f900 	bl	80063e8 <USBD_CtlSendData>
      break;
 80061e8:	e004      	b.n	80061f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80061ea:	6839      	ldr	r1, [r7, #0]
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f88a 	bl	8006306 <USBD_CtlError>
      break;
 80061f2:	bf00      	nop
  }
}
 80061f4:	bf00      	nop
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	885b      	ldrh	r3, [r3, #2]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d107      	bne.n	800621e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f940 	bl	800649c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800621c:	e013      	b.n	8006246 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	885b      	ldrh	r3, [r3, #2]
 8006222:	2b02      	cmp	r3, #2
 8006224:	d10b      	bne.n	800623e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	889b      	ldrh	r3, [r3, #4]
 800622a:	0a1b      	lsrs	r3, r3, #8
 800622c:	b29b      	uxth	r3, r3
 800622e:	b2da      	uxtb	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f930 	bl	800649c <USBD_CtlSendStatus>
}
 800623c:	e003      	b.n	8006246 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800623e:	6839      	ldr	r1, [r7, #0]
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 f860 	bl	8006306 <USBD_CtlError>
}
 8006246:	bf00      	nop
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b082      	sub	sp, #8
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800625e:	b2db      	uxtb	r3, r3
 8006260:	3b01      	subs	r3, #1
 8006262:	2b02      	cmp	r3, #2
 8006264:	d80b      	bhi.n	800627e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	885b      	ldrh	r3, [r3, #2]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d10c      	bne.n	8006288 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f910 	bl	800649c <USBD_CtlSendStatus>
      }
      break;
 800627c:	e004      	b.n	8006288 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800627e:	6839      	ldr	r1, [r7, #0]
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f840 	bl	8006306 <USBD_CtlError>
      break;
 8006286:	e000      	b.n	800628a <USBD_ClrFeature+0x3c>
      break;
 8006288:	bf00      	nop
  }
}
 800628a:	bf00      	nop
 800628c:	3708      	adds	r7, #8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b084      	sub	sp, #16
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
 800629a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	781a      	ldrb	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	3301      	adds	r3, #1
 80062ac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	781a      	ldrb	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	3301      	adds	r3, #1
 80062ba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f7ff fa41 	bl	8005744 <SWAPBYTE>
 80062c2:	4603      	mov	r3, r0
 80062c4:	461a      	mov	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	3301      	adds	r3, #1
 80062ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	3301      	adds	r3, #1
 80062d4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f7ff fa34 	bl	8005744 <SWAPBYTE>
 80062dc:	4603      	mov	r3, r0
 80062de:	461a      	mov	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	3301      	adds	r3, #1
 80062e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3301      	adds	r3, #1
 80062ee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f7ff fa27 	bl	8005744 <SWAPBYTE>
 80062f6:	4603      	mov	r3, r0
 80062f8:	461a      	mov	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	80da      	strh	r2, [r3, #6]
}
 80062fe:	bf00      	nop
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b082      	sub	sp, #8
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
 800630e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006310:	2180      	movs	r1, #128	; 0x80
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fce0 	bl	8006cd8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006318:	2100      	movs	r1, #0
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fcdc 	bl	8006cd8 <USBD_LL_StallEP>
}
 8006320:	bf00      	nop
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006334:	2300      	movs	r3, #0
 8006336:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d036      	beq.n	80063ac <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006342:	6938      	ldr	r0, [r7, #16]
 8006344:	f000 f836 	bl	80063b4 <USBD_GetLen>
 8006348:	4603      	mov	r3, r0
 800634a:	3301      	adds	r3, #1
 800634c:	b29b      	uxth	r3, r3
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	b29a      	uxth	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006356:	7dfb      	ldrb	r3, [r7, #23]
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	4413      	add	r3, r2
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	7812      	ldrb	r2, [r2, #0]
 8006360:	701a      	strb	r2, [r3, #0]
  idx++;
 8006362:	7dfb      	ldrb	r3, [r7, #23]
 8006364:	3301      	adds	r3, #1
 8006366:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006368:	7dfb      	ldrb	r3, [r7, #23]
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	4413      	add	r3, r2
 800636e:	2203      	movs	r2, #3
 8006370:	701a      	strb	r2, [r3, #0]
  idx++;
 8006372:	7dfb      	ldrb	r3, [r7, #23]
 8006374:	3301      	adds	r3, #1
 8006376:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006378:	e013      	b.n	80063a2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800637a:	7dfb      	ldrb	r3, [r7, #23]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	4413      	add	r3, r2
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	7812      	ldrb	r2, [r2, #0]
 8006384:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	3301      	adds	r3, #1
 800638a:	613b      	str	r3, [r7, #16]
    idx++;
 800638c:	7dfb      	ldrb	r3, [r7, #23]
 800638e:	3301      	adds	r3, #1
 8006390:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006392:	7dfb      	ldrb	r3, [r7, #23]
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	4413      	add	r3, r2
 8006398:	2200      	movs	r2, #0
 800639a:	701a      	strb	r2, [r3, #0]
    idx++;
 800639c:	7dfb      	ldrb	r3, [r7, #23]
 800639e:	3301      	adds	r3, #1
 80063a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1e7      	bne.n	800637a <USBD_GetString+0x52>
 80063aa:	e000      	b.n	80063ae <USBD_GetString+0x86>
    return;
 80063ac:	bf00      	nop
  }
}
 80063ae:	3718      	adds	r7, #24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80063bc:	2300      	movs	r3, #0
 80063be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80063c4:	e005      	b.n	80063d2 <USBD_GetLen+0x1e>
  {
    len++;
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
 80063c8:	3301      	adds	r3, #1
 80063ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	3301      	adds	r3, #1
 80063d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1f5      	bne.n	80063c6 <USBD_GetLen+0x12>
  }

  return len;
 80063da:	7bfb      	ldrb	r3, [r7, #15]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	2100      	movs	r1, #0
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 fceb 	bl	8006dea <USBD_LL_Transmit>

  return USBD_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	60f8      	str	r0, [r7, #12]
 8006426:	60b9      	str	r1, [r7, #8]
 8006428:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	2100      	movs	r1, #0
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 fcda 	bl	8006dea <USBD_LL_Transmit>

  return USBD_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2203      	movs	r2, #3
 8006450:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	2100      	movs	r1, #0
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 fcde 	bl	8006e2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b084      	sub	sp, #16
 800647e:	af00      	add	r7, sp, #0
 8006480:	60f8      	str	r0, [r7, #12]
 8006482:	60b9      	str	r1, [r7, #8]
 8006484:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	2100      	movs	r1, #0
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 fccd 	bl	8006e2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2204      	movs	r2, #4
 80064a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80064ac:	2300      	movs	r3, #0
 80064ae:	2200      	movs	r2, #0
 80064b0:	2100      	movs	r1, #0
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fc99 	bl	8006dea <USBD_LL_Transmit>

  return USBD_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b082      	sub	sp, #8
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2205      	movs	r2, #5
 80064ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064d2:	2300      	movs	r3, #0
 80064d4:	2200      	movs	r2, #0
 80064d6:	2100      	movs	r1, #0
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fca7 	bl	8006e2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80064ec:	2200      	movs	r2, #0
 80064ee:	4912      	ldr	r1, [pc, #72]	; (8006538 <MX_USB_DEVICE_Init+0x50>)
 80064f0:	4812      	ldr	r0, [pc, #72]	; (800653c <MX_USB_DEVICE_Init+0x54>)
 80064f2:	f7fe fd07 	bl	8004f04 <USBD_Init>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80064fc:	f7fa f8de 	bl	80006bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006500:	490f      	ldr	r1, [pc, #60]	; (8006540 <MX_USB_DEVICE_Init+0x58>)
 8006502:	480e      	ldr	r0, [pc, #56]	; (800653c <MX_USB_DEVICE_Init+0x54>)
 8006504:	f7fe fd2e 	bl	8004f64 <USBD_RegisterClass>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800650e:	f7fa f8d5 	bl	80006bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006512:	490c      	ldr	r1, [pc, #48]	; (8006544 <MX_USB_DEVICE_Init+0x5c>)
 8006514:	4809      	ldr	r0, [pc, #36]	; (800653c <MX_USB_DEVICE_Init+0x54>)
 8006516:	f7fe fc1f 	bl	8004d58 <USBD_CDC_RegisterInterface>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d001      	beq.n	8006524 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006520:	f7fa f8cc 	bl	80006bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006524:	4805      	ldr	r0, [pc, #20]	; (800653c <MX_USB_DEVICE_Init+0x54>)
 8006526:	f7fe fd53 	bl	8004fd0 <USBD_Start>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006530:	f7fa f8c4 	bl	80006bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006534:	bf00      	nop
 8006536:	bd80      	pop	{r7, pc}
 8006538:	200000b8 	.word	0x200000b8
 800653c:	200001c4 	.word	0x200001c4
 8006540:	20000024 	.word	0x20000024
 8006544:	200000a4 	.word	0x200000a4

08006548 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800654c:	2200      	movs	r2, #0
 800654e:	4905      	ldr	r1, [pc, #20]	; (8006564 <CDC_Init_FS+0x1c>)
 8006550:	4805      	ldr	r0, [pc, #20]	; (8006568 <CDC_Init_FS+0x20>)
 8006552:	f7fe fc1b 	bl	8004d8c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006556:	4905      	ldr	r1, [pc, #20]	; (800656c <CDC_Init_FS+0x24>)
 8006558:	4803      	ldr	r0, [pc, #12]	; (8006568 <CDC_Init_FS+0x20>)
 800655a:	f7fe fc39 	bl	8004dd0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800655e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006560:	4618      	mov	r0, r3
 8006562:	bd80      	pop	{r7, pc}
 8006564:	20000ca0 	.word	0x20000ca0
 8006568:	200001c4 	.word	0x200001c4
 800656c:	200004a0 	.word	0x200004a0

08006570 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006570:	b480      	push	{r7}
 8006572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006574:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006576:	4618      	mov	r0, r3
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	4603      	mov	r3, r0
 8006588:	6039      	str	r1, [r7, #0]
 800658a:	71fb      	strb	r3, [r7, #7]
 800658c:	4613      	mov	r3, r2
 800658e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006590:	79fb      	ldrb	r3, [r7, #7]
 8006592:	2b23      	cmp	r3, #35	; 0x23
 8006594:	d84a      	bhi.n	800662c <CDC_Control_FS+0xac>
 8006596:	a201      	add	r2, pc, #4	; (adr r2, 800659c <CDC_Control_FS+0x1c>)
 8006598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659c:	0800662d 	.word	0x0800662d
 80065a0:	0800662d 	.word	0x0800662d
 80065a4:	0800662d 	.word	0x0800662d
 80065a8:	0800662d 	.word	0x0800662d
 80065ac:	0800662d 	.word	0x0800662d
 80065b0:	0800662d 	.word	0x0800662d
 80065b4:	0800662d 	.word	0x0800662d
 80065b8:	0800662d 	.word	0x0800662d
 80065bc:	0800662d 	.word	0x0800662d
 80065c0:	0800662d 	.word	0x0800662d
 80065c4:	0800662d 	.word	0x0800662d
 80065c8:	0800662d 	.word	0x0800662d
 80065cc:	0800662d 	.word	0x0800662d
 80065d0:	0800662d 	.word	0x0800662d
 80065d4:	0800662d 	.word	0x0800662d
 80065d8:	0800662d 	.word	0x0800662d
 80065dc:	0800662d 	.word	0x0800662d
 80065e0:	0800662d 	.word	0x0800662d
 80065e4:	0800662d 	.word	0x0800662d
 80065e8:	0800662d 	.word	0x0800662d
 80065ec:	0800662d 	.word	0x0800662d
 80065f0:	0800662d 	.word	0x0800662d
 80065f4:	0800662d 	.word	0x0800662d
 80065f8:	0800662d 	.word	0x0800662d
 80065fc:	0800662d 	.word	0x0800662d
 8006600:	0800662d 	.word	0x0800662d
 8006604:	0800662d 	.word	0x0800662d
 8006608:	0800662d 	.word	0x0800662d
 800660c:	0800662d 	.word	0x0800662d
 8006610:	0800662d 	.word	0x0800662d
 8006614:	0800662d 	.word	0x0800662d
 8006618:	0800662d 	.word	0x0800662d
 800661c:	0800662d 	.word	0x0800662d
 8006620:	0800662d 	.word	0x0800662d
 8006624:	0800662d 	.word	0x0800662d
 8006628:	0800662d 	.word	0x0800662d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800662c:	bf00      	nop
  }

  return (USBD_OK);
 800662e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006630:	4618      	mov	r0, r3
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006646:	6879      	ldr	r1, [r7, #4]
 8006648:	4805      	ldr	r0, [pc, #20]	; (8006660 <CDC_Receive_FS+0x24>)
 800664a:	f7fe fbc1 	bl	8004dd0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800664e:	4804      	ldr	r0, [pc, #16]	; (8006660 <CDC_Receive_FS+0x24>)
 8006650:	f7fe fc22 	bl	8004e98 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006654:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006656:	4618      	mov	r0, r3
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	200001c4 	.word	0x200001c4

08006664 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	460b      	mov	r3, r1
 800666e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006670:	2300      	movs	r3, #0
 8006672:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006674:	4b0d      	ldr	r3, [pc, #52]	; (80066ac <CDC_Transmit_FS+0x48>)
 8006676:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800667a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006686:	2301      	movs	r3, #1
 8006688:	e00b      	b.n	80066a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800668a:	887b      	ldrh	r3, [r7, #2]
 800668c:	461a      	mov	r2, r3
 800668e:	6879      	ldr	r1, [r7, #4]
 8006690:	4806      	ldr	r0, [pc, #24]	; (80066ac <CDC_Transmit_FS+0x48>)
 8006692:	f7fe fb7b 	bl	8004d8c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006696:	4805      	ldr	r0, [pc, #20]	; (80066ac <CDC_Transmit_FS+0x48>)
 8006698:	f7fe fbb8 	bl	8004e0c <USBD_CDC_TransmitPacket>
 800669c:	4603      	mov	r3, r0
 800669e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	200001c4 	.word	0x200001c4

080066b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b087      	sub	sp, #28
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	4613      	mov	r3, r2
 80066bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80066c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	371c      	adds	r7, #28
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
	...

080066d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	4603      	mov	r3, r0
 80066dc:	6039      	str	r1, [r7, #0]
 80066de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	2212      	movs	r2, #18
 80066e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80066e6:	4b03      	ldr	r3, [pc, #12]	; (80066f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr
 80066f4:	200000d4 	.word	0x200000d4

080066f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	4603      	mov	r3, r0
 8006700:	6039      	str	r1, [r7, #0]
 8006702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2204      	movs	r2, #4
 8006708:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800670a:	4b03      	ldr	r3, [pc, #12]	; (8006718 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800670c:	4618      	mov	r0, r3
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr
 8006718:	200000e8 	.word	0x200000e8

0800671c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	4603      	mov	r3, r0
 8006724:	6039      	str	r1, [r7, #0]
 8006726:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006728:	79fb      	ldrb	r3, [r7, #7]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d105      	bne.n	800673a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	4907      	ldr	r1, [pc, #28]	; (8006750 <USBD_FS_ProductStrDescriptor+0x34>)
 8006732:	4808      	ldr	r0, [pc, #32]	; (8006754 <USBD_FS_ProductStrDescriptor+0x38>)
 8006734:	f7ff fdf8 	bl	8006328 <USBD_GetString>
 8006738:	e004      	b.n	8006744 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	4904      	ldr	r1, [pc, #16]	; (8006750 <USBD_FS_ProductStrDescriptor+0x34>)
 800673e:	4805      	ldr	r0, [pc, #20]	; (8006754 <USBD_FS_ProductStrDescriptor+0x38>)
 8006740:	f7ff fdf2 	bl	8006328 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006744:	4b02      	ldr	r3, [pc, #8]	; (8006750 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006746:	4618      	mov	r0, r3
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	200014a0 	.word	0x200014a0
 8006754:	08007878 	.word	0x08007878

08006758 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	4603      	mov	r3, r0
 8006760:	6039      	str	r1, [r7, #0]
 8006762:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	4904      	ldr	r1, [pc, #16]	; (8006778 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006768:	4804      	ldr	r0, [pc, #16]	; (800677c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800676a:	f7ff fddd 	bl	8006328 <USBD_GetString>
  return USBD_StrDesc;
 800676e:	4b02      	ldr	r3, [pc, #8]	; (8006778 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006770:	4618      	mov	r0, r3
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	200014a0 	.word	0x200014a0
 800677c:	08007890 	.word	0x08007890

08006780 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	4603      	mov	r3, r0
 8006788:	6039      	str	r1, [r7, #0]
 800678a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	221a      	movs	r2, #26
 8006790:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006792:	f000 f843 	bl	800681c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006796:	4b02      	ldr	r3, [pc, #8]	; (80067a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006798:	4618      	mov	r0, r3
 800679a:	3708      	adds	r7, #8
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	200000ec 	.word	0x200000ec

080067a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	4603      	mov	r3, r0
 80067ac:	6039      	str	r1, [r7, #0]
 80067ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80067b0:	79fb      	ldrb	r3, [r7, #7]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d105      	bne.n	80067c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80067b6:	683a      	ldr	r2, [r7, #0]
 80067b8:	4907      	ldr	r1, [pc, #28]	; (80067d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80067ba:	4808      	ldr	r0, [pc, #32]	; (80067dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80067bc:	f7ff fdb4 	bl	8006328 <USBD_GetString>
 80067c0:	e004      	b.n	80067cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	4904      	ldr	r1, [pc, #16]	; (80067d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80067c6:	4805      	ldr	r0, [pc, #20]	; (80067dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80067c8:	f7ff fdae 	bl	8006328 <USBD_GetString>
  }
  return USBD_StrDesc;
 80067cc:	4b02      	ldr	r3, [pc, #8]	; (80067d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	200014a0 	.word	0x200014a0
 80067dc:	080078a4 	.word	0x080078a4

080067e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	4603      	mov	r3, r0
 80067e8:	6039      	str	r1, [r7, #0]
 80067ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80067ec:	79fb      	ldrb	r3, [r7, #7]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d105      	bne.n	80067fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	4907      	ldr	r1, [pc, #28]	; (8006814 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80067f6:	4808      	ldr	r0, [pc, #32]	; (8006818 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80067f8:	f7ff fd96 	bl	8006328 <USBD_GetString>
 80067fc:	e004      	b.n	8006808 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	4904      	ldr	r1, [pc, #16]	; (8006814 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006802:	4805      	ldr	r0, [pc, #20]	; (8006818 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006804:	f7ff fd90 	bl	8006328 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006808:	4b02      	ldr	r3, [pc, #8]	; (8006814 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800680a:	4618      	mov	r0, r3
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	200014a0 	.word	0x200014a0
 8006818:	080078b0 	.word	0x080078b0

0800681c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006822:	4b0f      	ldr	r3, [pc, #60]	; (8006860 <Get_SerialNum+0x44>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006828:	4b0e      	ldr	r3, [pc, #56]	; (8006864 <Get_SerialNum+0x48>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800682e:	4b0e      	ldr	r3, [pc, #56]	; (8006868 <Get_SerialNum+0x4c>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4413      	add	r3, r2
 800683a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d009      	beq.n	8006856 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006842:	2208      	movs	r2, #8
 8006844:	4909      	ldr	r1, [pc, #36]	; (800686c <Get_SerialNum+0x50>)
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f000 f814 	bl	8006874 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800684c:	2204      	movs	r2, #4
 800684e:	4908      	ldr	r1, [pc, #32]	; (8006870 <Get_SerialNum+0x54>)
 8006850:	68b8      	ldr	r0, [r7, #8]
 8006852:	f000 f80f 	bl	8006874 <IntToUnicode>
  }
}
 8006856:	bf00      	nop
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	1fff7a10 	.word	0x1fff7a10
 8006864:	1fff7a14 	.word	0x1fff7a14
 8006868:	1fff7a18 	.word	0x1fff7a18
 800686c:	200000ee 	.word	0x200000ee
 8006870:	200000fe 	.word	0x200000fe

08006874 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006874:	b480      	push	{r7}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	4613      	mov	r3, r2
 8006880:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006882:	2300      	movs	r3, #0
 8006884:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006886:	2300      	movs	r3, #0
 8006888:	75fb      	strb	r3, [r7, #23]
 800688a:	e027      	b.n	80068dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	0f1b      	lsrs	r3, r3, #28
 8006890:	2b09      	cmp	r3, #9
 8006892:	d80b      	bhi.n	80068ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	0f1b      	lsrs	r3, r3, #28
 8006898:	b2da      	uxtb	r2, r3
 800689a:	7dfb      	ldrb	r3, [r7, #23]
 800689c:	005b      	lsls	r3, r3, #1
 800689e:	4619      	mov	r1, r3
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	440b      	add	r3, r1
 80068a4:	3230      	adds	r2, #48	; 0x30
 80068a6:	b2d2      	uxtb	r2, r2
 80068a8:	701a      	strb	r2, [r3, #0]
 80068aa:	e00a      	b.n	80068c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	0f1b      	lsrs	r3, r3, #28
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	7dfb      	ldrb	r3, [r7, #23]
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	4619      	mov	r1, r3
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	440b      	add	r3, r1
 80068bc:	3237      	adds	r2, #55	; 0x37
 80068be:	b2d2      	uxtb	r2, r2
 80068c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	011b      	lsls	r3, r3, #4
 80068c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80068c8:	7dfb      	ldrb	r3, [r7, #23]
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	3301      	adds	r3, #1
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	4413      	add	r3, r2
 80068d2:	2200      	movs	r2, #0
 80068d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80068d6:	7dfb      	ldrb	r3, [r7, #23]
 80068d8:	3301      	adds	r3, #1
 80068da:	75fb      	strb	r3, [r7, #23]
 80068dc:	7dfa      	ldrb	r2, [r7, #23]
 80068de:	79fb      	ldrb	r3, [r7, #7]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d3d3      	bcc.n	800688c <IntToUnicode+0x18>
  }
}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop
 80068e8:	371c      	adds	r7, #28
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
	...

080068f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b08a      	sub	sp, #40	; 0x28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068fc:	f107 0314 	add.w	r3, r7, #20
 8006900:	2200      	movs	r2, #0
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	605a      	str	r2, [r3, #4]
 8006906:	609a      	str	r2, [r3, #8]
 8006908:	60da      	str	r2, [r3, #12]
 800690a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006914:	d13a      	bne.n	800698c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006916:	2300      	movs	r3, #0
 8006918:	613b      	str	r3, [r7, #16]
 800691a:	4b1e      	ldr	r3, [pc, #120]	; (8006994 <HAL_PCD_MspInit+0xa0>)
 800691c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691e:	4a1d      	ldr	r2, [pc, #116]	; (8006994 <HAL_PCD_MspInit+0xa0>)
 8006920:	f043 0301 	orr.w	r3, r3, #1
 8006924:	6313      	str	r3, [r2, #48]	; 0x30
 8006926:	4b1b      	ldr	r3, [pc, #108]	; (8006994 <HAL_PCD_MspInit+0xa0>)
 8006928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	613b      	str	r3, [r7, #16]
 8006930:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006932:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006938:	2302      	movs	r3, #2
 800693a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800693c:	2300      	movs	r3, #0
 800693e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006940:	2303      	movs	r3, #3
 8006942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006944:	230a      	movs	r3, #10
 8006946:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006948:	f107 0314 	add.w	r3, r7, #20
 800694c:	4619      	mov	r1, r3
 800694e:	4812      	ldr	r0, [pc, #72]	; (8006998 <HAL_PCD_MspInit+0xa4>)
 8006950:	f7fa f96a 	bl	8000c28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006954:	4b0f      	ldr	r3, [pc, #60]	; (8006994 <HAL_PCD_MspInit+0xa0>)
 8006956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006958:	4a0e      	ldr	r2, [pc, #56]	; (8006994 <HAL_PCD_MspInit+0xa0>)
 800695a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800695e:	6353      	str	r3, [r2, #52]	; 0x34
 8006960:	2300      	movs	r3, #0
 8006962:	60fb      	str	r3, [r7, #12]
 8006964:	4b0b      	ldr	r3, [pc, #44]	; (8006994 <HAL_PCD_MspInit+0xa0>)
 8006966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006968:	4a0a      	ldr	r2, [pc, #40]	; (8006994 <HAL_PCD_MspInit+0xa0>)
 800696a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800696e:	6453      	str	r3, [r2, #68]	; 0x44
 8006970:	4b08      	ldr	r3, [pc, #32]	; (8006994 <HAL_PCD_MspInit+0xa0>)
 8006972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006978:	60fb      	str	r3, [r7, #12]
 800697a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800697c:	2200      	movs	r2, #0
 800697e:	2100      	movs	r1, #0
 8006980:	2043      	movs	r0, #67	; 0x43
 8006982:	f7fa f91a 	bl	8000bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006986:	2043      	movs	r0, #67	; 0x43
 8006988:	f7fa f933 	bl	8000bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800698c:	bf00      	nop
 800698e:	3728      	adds	r7, #40	; 0x28
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	40023800 	.word	0x40023800
 8006998:	40020000 	.word	0x40020000

0800699c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80069b0:	4619      	mov	r1, r3
 80069b2:	4610      	mov	r0, r2
 80069b4:	f7fe fb59 	bl	800506a <USBD_LL_SetupStage>
}
 80069b8:	bf00      	nop
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	460b      	mov	r3, r1
 80069ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80069d2:	78fa      	ldrb	r2, [r7, #3]
 80069d4:	6879      	ldr	r1, [r7, #4]
 80069d6:	4613      	mov	r3, r2
 80069d8:	00db      	lsls	r3, r3, #3
 80069da:	4413      	add	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	440b      	add	r3, r1
 80069e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	78fb      	ldrb	r3, [r7, #3]
 80069e8:	4619      	mov	r1, r3
 80069ea:	f7fe fb93 	bl	8005114 <USBD_LL_DataOutStage>
}
 80069ee:	bf00      	nop
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b082      	sub	sp, #8
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	460b      	mov	r3, r1
 8006a00:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006a08:	78fa      	ldrb	r2, [r7, #3]
 8006a0a:	6879      	ldr	r1, [r7, #4]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	00db      	lsls	r3, r3, #3
 8006a10:	4413      	add	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	440b      	add	r3, r1
 8006a16:	334c      	adds	r3, #76	; 0x4c
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	78fb      	ldrb	r3, [r7, #3]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	f7fe fc2c 	bl	800527a <USBD_LL_DataInStage>
}
 8006a22:	bf00      	nop
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b082      	sub	sp, #8
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7fe fd60 	bl	80054fe <USBD_LL_SOF>
}
 8006a3e:	bf00      	nop
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b084      	sub	sp, #16
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d102      	bne.n	8006a60 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	73fb      	strb	r3, [r7, #15]
 8006a5e:	e008      	b.n	8006a72 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d102      	bne.n	8006a6e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	73fb      	strb	r3, [r7, #15]
 8006a6c:	e001      	b.n	8006a72 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006a6e:	f7f9 fe25 	bl	80006bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a78:	7bfa      	ldrb	r2, [r7, #15]
 8006a7a:	4611      	mov	r1, r2
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7fe fd00 	bl	8005482 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7fe fca8 	bl	80053de <USBD_LL_Reset>
}
 8006a8e:	bf00      	nop
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
	...

08006a98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fe fcfb 	bl	80054a2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	6812      	ldr	r2, [r2, #0]
 8006aba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006abe:	f043 0301 	orr.w	r3, r3, #1
 8006ac2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d005      	beq.n	8006ad8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006acc:	4b04      	ldr	r3, [pc, #16]	; (8006ae0 <HAL_PCD_SuspendCallback+0x48>)
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	4a03      	ldr	r2, [pc, #12]	; (8006ae0 <HAL_PCD_SuspendCallback+0x48>)
 8006ad2:	f043 0306 	orr.w	r3, r3, #6
 8006ad6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006ad8:	bf00      	nop
 8006ada:	3708      	adds	r7, #8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	e000ed00 	.word	0xe000ed00

08006ae4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fe fceb 	bl	80054ce <USBD_LL_Resume>
}
 8006af8:	bf00      	nop
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006b12:	78fa      	ldrb	r2, [r7, #3]
 8006b14:	4611      	mov	r1, r2
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7fe fd43 	bl	80055a2 <USBD_LL_IsoOUTIncomplete>
}
 8006b1c:	bf00      	nop
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006b36:	78fa      	ldrb	r2, [r7, #3]
 8006b38:	4611      	mov	r1, r2
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fe fcff 	bl	800553e <USBD_LL_IsoINIncomplete>
}
 8006b40:	bf00      	nop
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7fe fd55 	bl	8005606 <USBD_LL_DevConnected>
}
 8006b5c:	bf00      	nop
 8006b5e:	3708      	adds	r7, #8
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fe fd52 	bl	800561c <USBD_LL_DevDisconnected>
}
 8006b78:	bf00      	nop
 8006b7a:	3708      	adds	r7, #8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d13c      	bne.n	8006c0a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006b90:	4a20      	ldr	r2, [pc, #128]	; (8006c14 <USBD_LL_Init+0x94>)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a1e      	ldr	r2, [pc, #120]	; (8006c14 <USBD_LL_Init+0x94>)
 8006b9c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006ba0:	4b1c      	ldr	r3, [pc, #112]	; (8006c14 <USBD_LL_Init+0x94>)
 8006ba2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006ba6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006ba8:	4b1a      	ldr	r3, [pc, #104]	; (8006c14 <USBD_LL_Init+0x94>)
 8006baa:	2204      	movs	r2, #4
 8006bac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006bae:	4b19      	ldr	r3, [pc, #100]	; (8006c14 <USBD_LL_Init+0x94>)
 8006bb0:	2202      	movs	r2, #2
 8006bb2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006bb4:	4b17      	ldr	r3, [pc, #92]	; (8006c14 <USBD_LL_Init+0x94>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006bba:	4b16      	ldr	r3, [pc, #88]	; (8006c14 <USBD_LL_Init+0x94>)
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006bc0:	4b14      	ldr	r3, [pc, #80]	; (8006c14 <USBD_LL_Init+0x94>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006bc6:	4b13      	ldr	r3, [pc, #76]	; (8006c14 <USBD_LL_Init+0x94>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006bcc:	4b11      	ldr	r3, [pc, #68]	; (8006c14 <USBD_LL_Init+0x94>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006bd2:	4b10      	ldr	r3, [pc, #64]	; (8006c14 <USBD_LL_Init+0x94>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006bd8:	4b0e      	ldr	r3, [pc, #56]	; (8006c14 <USBD_LL_Init+0x94>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006bde:	480d      	ldr	r0, [pc, #52]	; (8006c14 <USBD_LL_Init+0x94>)
 8006be0:	f7fa f9be 	bl	8000f60 <HAL_PCD_Init>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d001      	beq.n	8006bee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006bea:	f7f9 fd67 	bl	80006bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006bee:	2180      	movs	r1, #128	; 0x80
 8006bf0:	4808      	ldr	r0, [pc, #32]	; (8006c14 <USBD_LL_Init+0x94>)
 8006bf2:	f7fb fc16 	bl	8002422 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006bf6:	2240      	movs	r2, #64	; 0x40
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	4806      	ldr	r0, [pc, #24]	; (8006c14 <USBD_LL_Init+0x94>)
 8006bfc:	f7fb fbca 	bl	8002394 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006c00:	2280      	movs	r2, #128	; 0x80
 8006c02:	2101      	movs	r1, #1
 8006c04:	4803      	ldr	r0, [pc, #12]	; (8006c14 <USBD_LL_Init+0x94>)
 8006c06:	f7fb fbc5 	bl	8002394 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3708      	adds	r7, #8
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	200016a0 	.word	0x200016a0

08006c18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c20:	2300      	movs	r3, #0
 8006c22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7fa fab3 	bl	800119a <HAL_PCD_Start>
 8006c34:	4603      	mov	r3, r0
 8006c36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c38:	7bfb      	ldrb	r3, [r7, #15]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 f942 	bl	8006ec4 <USBD_Get_USB_Status>
 8006c40:	4603      	mov	r3, r0
 8006c42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c44:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b084      	sub	sp, #16
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
 8006c56:	4608      	mov	r0, r1
 8006c58:	4611      	mov	r1, r2
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	70fb      	strb	r3, [r7, #3]
 8006c60:	460b      	mov	r3, r1
 8006c62:	70bb      	strb	r3, [r7, #2]
 8006c64:	4613      	mov	r3, r2
 8006c66:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006c76:	78bb      	ldrb	r3, [r7, #2]
 8006c78:	883a      	ldrh	r2, [r7, #0]
 8006c7a:	78f9      	ldrb	r1, [r7, #3]
 8006c7c:	f7fa ff84 	bl	8001b88 <HAL_PCD_EP_Open>
 8006c80:	4603      	mov	r3, r0
 8006c82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 f91c 	bl	8006ec4 <USBD_Get_USB_Status>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c90:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b084      	sub	sp, #16
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006caa:	2300      	movs	r3, #0
 8006cac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006cb4:	78fa      	ldrb	r2, [r7, #3]
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7fa ffcd 	bl	8001c58 <HAL_PCD_EP_Close>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 f8fd 	bl	8006ec4 <USBD_Get_USB_Status>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006cce:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006cf2:	78fa      	ldrb	r2, [r7, #3]
 8006cf4:	4611      	mov	r1, r2
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fb f8a5 	bl	8001e46 <HAL_PCD_EP_SetStall>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 f8de 	bl	8006ec4 <USBD_Get_USB_Status>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b084      	sub	sp, #16
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	460b      	mov	r3, r1
 8006d20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d22:	2300      	movs	r3, #0
 8006d24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d26:	2300      	movs	r3, #0
 8006d28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006d30:	78fa      	ldrb	r2, [r7, #3]
 8006d32:	4611      	mov	r1, r2
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7fb f8ea 	bl	8001f0e <HAL_PCD_EP_ClrStall>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d3e:	7bfb      	ldrb	r3, [r7, #15]
 8006d40:	4618      	mov	r0, r3
 8006d42:	f000 f8bf 	bl	8006ec4 <USBD_Get_USB_Status>
 8006d46:	4603      	mov	r3, r0
 8006d48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006d66:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006d68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	da0b      	bge.n	8006d88 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006d70:	78fb      	ldrb	r3, [r7, #3]
 8006d72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d76:	68f9      	ldr	r1, [r7, #12]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	00db      	lsls	r3, r3, #3
 8006d7c:	4413      	add	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	440b      	add	r3, r1
 8006d82:	333e      	adds	r3, #62	; 0x3e
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	e00b      	b.n	8006da0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006d88:	78fb      	ldrb	r3, [r7, #3]
 8006d8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d8e:	68f9      	ldr	r1, [r7, #12]
 8006d90:	4613      	mov	r3, r2
 8006d92:	00db      	lsls	r3, r3, #3
 8006d94:	4413      	add	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	440b      	add	r3, r1
 8006d9a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006d9e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	460b      	mov	r3, r1
 8006db6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006db8:	2300      	movs	r3, #0
 8006dba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006dc6:	78fa      	ldrb	r2, [r7, #3]
 8006dc8:	4611      	mov	r1, r2
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7fa feb7 	bl	8001b3e <HAL_PCD_SetAddress>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dd4:	7bfb      	ldrb	r3, [r7, #15]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 f874 	bl	8006ec4 <USBD_Get_USB_Status>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006de0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b086      	sub	sp, #24
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	60f8      	str	r0, [r7, #12]
 8006df2:	607a      	str	r2, [r7, #4]
 8006df4:	603b      	str	r3, [r7, #0]
 8006df6:	460b      	mov	r3, r1
 8006df8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006e08:	7af9      	ldrb	r1, [r7, #11]
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	f7fa ffd0 	bl	8001db2 <HAL_PCD_EP_Transmit>
 8006e12:	4603      	mov	r3, r0
 8006e14:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e16:	7dfb      	ldrb	r3, [r7, #23]
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f000 f853 	bl	8006ec4 <USBD_Get_USB_Status>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006e22:	7dbb      	ldrb	r3, [r7, #22]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3718      	adds	r7, #24
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	607a      	str	r2, [r7, #4]
 8006e36:	603b      	str	r3, [r7, #0]
 8006e38:	460b      	mov	r3, r1
 8006e3a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e40:	2300      	movs	r3, #0
 8006e42:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006e4a:	7af9      	ldrb	r1, [r7, #11]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	f7fa ff4c 	bl	8001cec <HAL_PCD_EP_Receive>
 8006e54:	4603      	mov	r3, r0
 8006e56:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e58:	7dfb      	ldrb	r3, [r7, #23]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 f832 	bl	8006ec4 <USBD_Get_USB_Status>
 8006e60:	4603      	mov	r3, r0
 8006e62:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006e64:	7dbb      	ldrb	r3, [r7, #22]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3718      	adds	r7, #24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b082      	sub	sp, #8
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	460b      	mov	r3, r1
 8006e78:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e80:	78fa      	ldrb	r2, [r7, #3]
 8006e82:	4611      	mov	r1, r2
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7fa ff7c 	bl	8001d82 <HAL_PCD_EP_GetRxCount>
 8006e8a:	4603      	mov	r3, r0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006e9c:	4b03      	ldr	r3, [pc, #12]	; (8006eac <USBD_static_malloc+0x18>)
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	20001bac 	.word	0x20001bac

08006eb0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]

}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	4603      	mov	r3, r0
 8006ecc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006ed2:	79fb      	ldrb	r3, [r7, #7]
 8006ed4:	2b03      	cmp	r3, #3
 8006ed6:	d817      	bhi.n	8006f08 <USBD_Get_USB_Status+0x44>
 8006ed8:	a201      	add	r2, pc, #4	; (adr r2, 8006ee0 <USBD_Get_USB_Status+0x1c>)
 8006eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ede:	bf00      	nop
 8006ee0:	08006ef1 	.word	0x08006ef1
 8006ee4:	08006ef7 	.word	0x08006ef7
 8006ee8:	08006efd 	.word	0x08006efd
 8006eec:	08006f03 	.word	0x08006f03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ef4:	e00b      	b.n	8006f0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	73fb      	strb	r3, [r7, #15]
    break;
 8006efa:	e008      	b.n	8006f0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006efc:	2301      	movs	r3, #1
 8006efe:	73fb      	strb	r3, [r7, #15]
    break;
 8006f00:	e005      	b.n	8006f0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006f02:	2303      	movs	r3, #3
 8006f04:	73fb      	strb	r3, [r7, #15]
    break;
 8006f06:	e002      	b.n	8006f0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	73fb      	strb	r3, [r7, #15]
    break;
 8006f0c:	bf00      	nop
  }
  return usb_status;
 8006f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3714      	adds	r7, #20
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <__errno>:
 8006f1c:	4b01      	ldr	r3, [pc, #4]	; (8006f24 <__errno+0x8>)
 8006f1e:	6818      	ldr	r0, [r3, #0]
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	20000108 	.word	0x20000108

08006f28 <__libc_init_array>:
 8006f28:	b570      	push	{r4, r5, r6, lr}
 8006f2a:	4d0d      	ldr	r5, [pc, #52]	; (8006f60 <__libc_init_array+0x38>)
 8006f2c:	4c0d      	ldr	r4, [pc, #52]	; (8006f64 <__libc_init_array+0x3c>)
 8006f2e:	1b64      	subs	r4, r4, r5
 8006f30:	10a4      	asrs	r4, r4, #2
 8006f32:	2600      	movs	r6, #0
 8006f34:	42a6      	cmp	r6, r4
 8006f36:	d109      	bne.n	8006f4c <__libc_init_array+0x24>
 8006f38:	4d0b      	ldr	r5, [pc, #44]	; (8006f68 <__libc_init_array+0x40>)
 8006f3a:	4c0c      	ldr	r4, [pc, #48]	; (8006f6c <__libc_init_array+0x44>)
 8006f3c:	f000 fc8e 	bl	800785c <_init>
 8006f40:	1b64      	subs	r4, r4, r5
 8006f42:	10a4      	asrs	r4, r4, #2
 8006f44:	2600      	movs	r6, #0
 8006f46:	42a6      	cmp	r6, r4
 8006f48:	d105      	bne.n	8006f56 <__libc_init_array+0x2e>
 8006f4a:	bd70      	pop	{r4, r5, r6, pc}
 8006f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f50:	4798      	blx	r3
 8006f52:	3601      	adds	r6, #1
 8006f54:	e7ee      	b.n	8006f34 <__libc_init_array+0xc>
 8006f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f5a:	4798      	blx	r3
 8006f5c:	3601      	adds	r6, #1
 8006f5e:	e7f2      	b.n	8006f46 <__libc_init_array+0x1e>
 8006f60:	0800790c 	.word	0x0800790c
 8006f64:	0800790c 	.word	0x0800790c
 8006f68:	0800790c 	.word	0x0800790c
 8006f6c:	08007910 	.word	0x08007910

08006f70 <memset>:
 8006f70:	4402      	add	r2, r0
 8006f72:	4603      	mov	r3, r0
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d100      	bne.n	8006f7a <memset+0xa>
 8006f78:	4770      	bx	lr
 8006f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f7e:	e7f9      	b.n	8006f74 <memset+0x4>

08006f80 <siprintf>:
 8006f80:	b40e      	push	{r1, r2, r3}
 8006f82:	b500      	push	{lr}
 8006f84:	b09c      	sub	sp, #112	; 0x70
 8006f86:	ab1d      	add	r3, sp, #116	; 0x74
 8006f88:	9002      	str	r0, [sp, #8]
 8006f8a:	9006      	str	r0, [sp, #24]
 8006f8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f90:	4809      	ldr	r0, [pc, #36]	; (8006fb8 <siprintf+0x38>)
 8006f92:	9107      	str	r1, [sp, #28]
 8006f94:	9104      	str	r1, [sp, #16]
 8006f96:	4909      	ldr	r1, [pc, #36]	; (8006fbc <siprintf+0x3c>)
 8006f98:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f9c:	9105      	str	r1, [sp, #20]
 8006f9e:	6800      	ldr	r0, [r0, #0]
 8006fa0:	9301      	str	r3, [sp, #4]
 8006fa2:	a902      	add	r1, sp, #8
 8006fa4:	f000 f868 	bl	8007078 <_svfiprintf_r>
 8006fa8:	9b02      	ldr	r3, [sp, #8]
 8006faa:	2200      	movs	r2, #0
 8006fac:	701a      	strb	r2, [r3, #0]
 8006fae:	b01c      	add	sp, #112	; 0x70
 8006fb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fb4:	b003      	add	sp, #12
 8006fb6:	4770      	bx	lr
 8006fb8:	20000108 	.word	0x20000108
 8006fbc:	ffff0208 	.word	0xffff0208

08006fc0 <__ssputs_r>:
 8006fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fc4:	688e      	ldr	r6, [r1, #8]
 8006fc6:	429e      	cmp	r6, r3
 8006fc8:	4682      	mov	sl, r0
 8006fca:	460c      	mov	r4, r1
 8006fcc:	4690      	mov	r8, r2
 8006fce:	461f      	mov	r7, r3
 8006fd0:	d838      	bhi.n	8007044 <__ssputs_r+0x84>
 8006fd2:	898a      	ldrh	r2, [r1, #12]
 8006fd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fd8:	d032      	beq.n	8007040 <__ssputs_r+0x80>
 8006fda:	6825      	ldr	r5, [r4, #0]
 8006fdc:	6909      	ldr	r1, [r1, #16]
 8006fde:	eba5 0901 	sub.w	r9, r5, r1
 8006fe2:	6965      	ldr	r5, [r4, #20]
 8006fe4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fe8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fec:	3301      	adds	r3, #1
 8006fee:	444b      	add	r3, r9
 8006ff0:	106d      	asrs	r5, r5, #1
 8006ff2:	429d      	cmp	r5, r3
 8006ff4:	bf38      	it	cc
 8006ff6:	461d      	movcc	r5, r3
 8006ff8:	0553      	lsls	r3, r2, #21
 8006ffa:	d531      	bpl.n	8007060 <__ssputs_r+0xa0>
 8006ffc:	4629      	mov	r1, r5
 8006ffe:	f000 fb63 	bl	80076c8 <_malloc_r>
 8007002:	4606      	mov	r6, r0
 8007004:	b950      	cbnz	r0, 800701c <__ssputs_r+0x5c>
 8007006:	230c      	movs	r3, #12
 8007008:	f8ca 3000 	str.w	r3, [sl]
 800700c:	89a3      	ldrh	r3, [r4, #12]
 800700e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007012:	81a3      	strh	r3, [r4, #12]
 8007014:	f04f 30ff 	mov.w	r0, #4294967295
 8007018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800701c:	6921      	ldr	r1, [r4, #16]
 800701e:	464a      	mov	r2, r9
 8007020:	f000 fabe 	bl	80075a0 <memcpy>
 8007024:	89a3      	ldrh	r3, [r4, #12]
 8007026:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800702a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800702e:	81a3      	strh	r3, [r4, #12]
 8007030:	6126      	str	r6, [r4, #16]
 8007032:	6165      	str	r5, [r4, #20]
 8007034:	444e      	add	r6, r9
 8007036:	eba5 0509 	sub.w	r5, r5, r9
 800703a:	6026      	str	r6, [r4, #0]
 800703c:	60a5      	str	r5, [r4, #8]
 800703e:	463e      	mov	r6, r7
 8007040:	42be      	cmp	r6, r7
 8007042:	d900      	bls.n	8007046 <__ssputs_r+0x86>
 8007044:	463e      	mov	r6, r7
 8007046:	6820      	ldr	r0, [r4, #0]
 8007048:	4632      	mov	r2, r6
 800704a:	4641      	mov	r1, r8
 800704c:	f000 fab6 	bl	80075bc <memmove>
 8007050:	68a3      	ldr	r3, [r4, #8]
 8007052:	1b9b      	subs	r3, r3, r6
 8007054:	60a3      	str	r3, [r4, #8]
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	4433      	add	r3, r6
 800705a:	6023      	str	r3, [r4, #0]
 800705c:	2000      	movs	r0, #0
 800705e:	e7db      	b.n	8007018 <__ssputs_r+0x58>
 8007060:	462a      	mov	r2, r5
 8007062:	f000 fba5 	bl	80077b0 <_realloc_r>
 8007066:	4606      	mov	r6, r0
 8007068:	2800      	cmp	r0, #0
 800706a:	d1e1      	bne.n	8007030 <__ssputs_r+0x70>
 800706c:	6921      	ldr	r1, [r4, #16]
 800706e:	4650      	mov	r0, sl
 8007070:	f000 fabe 	bl	80075f0 <_free_r>
 8007074:	e7c7      	b.n	8007006 <__ssputs_r+0x46>
	...

08007078 <_svfiprintf_r>:
 8007078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800707c:	4698      	mov	r8, r3
 800707e:	898b      	ldrh	r3, [r1, #12]
 8007080:	061b      	lsls	r3, r3, #24
 8007082:	b09d      	sub	sp, #116	; 0x74
 8007084:	4607      	mov	r7, r0
 8007086:	460d      	mov	r5, r1
 8007088:	4614      	mov	r4, r2
 800708a:	d50e      	bpl.n	80070aa <_svfiprintf_r+0x32>
 800708c:	690b      	ldr	r3, [r1, #16]
 800708e:	b963      	cbnz	r3, 80070aa <_svfiprintf_r+0x32>
 8007090:	2140      	movs	r1, #64	; 0x40
 8007092:	f000 fb19 	bl	80076c8 <_malloc_r>
 8007096:	6028      	str	r0, [r5, #0]
 8007098:	6128      	str	r0, [r5, #16]
 800709a:	b920      	cbnz	r0, 80070a6 <_svfiprintf_r+0x2e>
 800709c:	230c      	movs	r3, #12
 800709e:	603b      	str	r3, [r7, #0]
 80070a0:	f04f 30ff 	mov.w	r0, #4294967295
 80070a4:	e0d1      	b.n	800724a <_svfiprintf_r+0x1d2>
 80070a6:	2340      	movs	r3, #64	; 0x40
 80070a8:	616b      	str	r3, [r5, #20]
 80070aa:	2300      	movs	r3, #0
 80070ac:	9309      	str	r3, [sp, #36]	; 0x24
 80070ae:	2320      	movs	r3, #32
 80070b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80070b8:	2330      	movs	r3, #48	; 0x30
 80070ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007264 <_svfiprintf_r+0x1ec>
 80070be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070c2:	f04f 0901 	mov.w	r9, #1
 80070c6:	4623      	mov	r3, r4
 80070c8:	469a      	mov	sl, r3
 80070ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070ce:	b10a      	cbz	r2, 80070d4 <_svfiprintf_r+0x5c>
 80070d0:	2a25      	cmp	r2, #37	; 0x25
 80070d2:	d1f9      	bne.n	80070c8 <_svfiprintf_r+0x50>
 80070d4:	ebba 0b04 	subs.w	fp, sl, r4
 80070d8:	d00b      	beq.n	80070f2 <_svfiprintf_r+0x7a>
 80070da:	465b      	mov	r3, fp
 80070dc:	4622      	mov	r2, r4
 80070de:	4629      	mov	r1, r5
 80070e0:	4638      	mov	r0, r7
 80070e2:	f7ff ff6d 	bl	8006fc0 <__ssputs_r>
 80070e6:	3001      	adds	r0, #1
 80070e8:	f000 80aa 	beq.w	8007240 <_svfiprintf_r+0x1c8>
 80070ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070ee:	445a      	add	r2, fp
 80070f0:	9209      	str	r2, [sp, #36]	; 0x24
 80070f2:	f89a 3000 	ldrb.w	r3, [sl]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f000 80a2 	beq.w	8007240 <_svfiprintf_r+0x1c8>
 80070fc:	2300      	movs	r3, #0
 80070fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007102:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007106:	f10a 0a01 	add.w	sl, sl, #1
 800710a:	9304      	str	r3, [sp, #16]
 800710c:	9307      	str	r3, [sp, #28]
 800710e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007112:	931a      	str	r3, [sp, #104]	; 0x68
 8007114:	4654      	mov	r4, sl
 8007116:	2205      	movs	r2, #5
 8007118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800711c:	4851      	ldr	r0, [pc, #324]	; (8007264 <_svfiprintf_r+0x1ec>)
 800711e:	f7f9 f85f 	bl	80001e0 <memchr>
 8007122:	9a04      	ldr	r2, [sp, #16]
 8007124:	b9d8      	cbnz	r0, 800715e <_svfiprintf_r+0xe6>
 8007126:	06d0      	lsls	r0, r2, #27
 8007128:	bf44      	itt	mi
 800712a:	2320      	movmi	r3, #32
 800712c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007130:	0711      	lsls	r1, r2, #28
 8007132:	bf44      	itt	mi
 8007134:	232b      	movmi	r3, #43	; 0x2b
 8007136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800713a:	f89a 3000 	ldrb.w	r3, [sl]
 800713e:	2b2a      	cmp	r3, #42	; 0x2a
 8007140:	d015      	beq.n	800716e <_svfiprintf_r+0xf6>
 8007142:	9a07      	ldr	r2, [sp, #28]
 8007144:	4654      	mov	r4, sl
 8007146:	2000      	movs	r0, #0
 8007148:	f04f 0c0a 	mov.w	ip, #10
 800714c:	4621      	mov	r1, r4
 800714e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007152:	3b30      	subs	r3, #48	; 0x30
 8007154:	2b09      	cmp	r3, #9
 8007156:	d94e      	bls.n	80071f6 <_svfiprintf_r+0x17e>
 8007158:	b1b0      	cbz	r0, 8007188 <_svfiprintf_r+0x110>
 800715a:	9207      	str	r2, [sp, #28]
 800715c:	e014      	b.n	8007188 <_svfiprintf_r+0x110>
 800715e:	eba0 0308 	sub.w	r3, r0, r8
 8007162:	fa09 f303 	lsl.w	r3, r9, r3
 8007166:	4313      	orrs	r3, r2
 8007168:	9304      	str	r3, [sp, #16]
 800716a:	46a2      	mov	sl, r4
 800716c:	e7d2      	b.n	8007114 <_svfiprintf_r+0x9c>
 800716e:	9b03      	ldr	r3, [sp, #12]
 8007170:	1d19      	adds	r1, r3, #4
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	9103      	str	r1, [sp, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	bfbb      	ittet	lt
 800717a:	425b      	neglt	r3, r3
 800717c:	f042 0202 	orrlt.w	r2, r2, #2
 8007180:	9307      	strge	r3, [sp, #28]
 8007182:	9307      	strlt	r3, [sp, #28]
 8007184:	bfb8      	it	lt
 8007186:	9204      	strlt	r2, [sp, #16]
 8007188:	7823      	ldrb	r3, [r4, #0]
 800718a:	2b2e      	cmp	r3, #46	; 0x2e
 800718c:	d10c      	bne.n	80071a8 <_svfiprintf_r+0x130>
 800718e:	7863      	ldrb	r3, [r4, #1]
 8007190:	2b2a      	cmp	r3, #42	; 0x2a
 8007192:	d135      	bne.n	8007200 <_svfiprintf_r+0x188>
 8007194:	9b03      	ldr	r3, [sp, #12]
 8007196:	1d1a      	adds	r2, r3, #4
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	9203      	str	r2, [sp, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	bfb8      	it	lt
 80071a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80071a4:	3402      	adds	r4, #2
 80071a6:	9305      	str	r3, [sp, #20]
 80071a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007274 <_svfiprintf_r+0x1fc>
 80071ac:	7821      	ldrb	r1, [r4, #0]
 80071ae:	2203      	movs	r2, #3
 80071b0:	4650      	mov	r0, sl
 80071b2:	f7f9 f815 	bl	80001e0 <memchr>
 80071b6:	b140      	cbz	r0, 80071ca <_svfiprintf_r+0x152>
 80071b8:	2340      	movs	r3, #64	; 0x40
 80071ba:	eba0 000a 	sub.w	r0, r0, sl
 80071be:	fa03 f000 	lsl.w	r0, r3, r0
 80071c2:	9b04      	ldr	r3, [sp, #16]
 80071c4:	4303      	orrs	r3, r0
 80071c6:	3401      	adds	r4, #1
 80071c8:	9304      	str	r3, [sp, #16]
 80071ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071ce:	4826      	ldr	r0, [pc, #152]	; (8007268 <_svfiprintf_r+0x1f0>)
 80071d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071d4:	2206      	movs	r2, #6
 80071d6:	f7f9 f803 	bl	80001e0 <memchr>
 80071da:	2800      	cmp	r0, #0
 80071dc:	d038      	beq.n	8007250 <_svfiprintf_r+0x1d8>
 80071de:	4b23      	ldr	r3, [pc, #140]	; (800726c <_svfiprintf_r+0x1f4>)
 80071e0:	bb1b      	cbnz	r3, 800722a <_svfiprintf_r+0x1b2>
 80071e2:	9b03      	ldr	r3, [sp, #12]
 80071e4:	3307      	adds	r3, #7
 80071e6:	f023 0307 	bic.w	r3, r3, #7
 80071ea:	3308      	adds	r3, #8
 80071ec:	9303      	str	r3, [sp, #12]
 80071ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071f0:	4433      	add	r3, r6
 80071f2:	9309      	str	r3, [sp, #36]	; 0x24
 80071f4:	e767      	b.n	80070c6 <_svfiprintf_r+0x4e>
 80071f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80071fa:	460c      	mov	r4, r1
 80071fc:	2001      	movs	r0, #1
 80071fe:	e7a5      	b.n	800714c <_svfiprintf_r+0xd4>
 8007200:	2300      	movs	r3, #0
 8007202:	3401      	adds	r4, #1
 8007204:	9305      	str	r3, [sp, #20]
 8007206:	4619      	mov	r1, r3
 8007208:	f04f 0c0a 	mov.w	ip, #10
 800720c:	4620      	mov	r0, r4
 800720e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007212:	3a30      	subs	r2, #48	; 0x30
 8007214:	2a09      	cmp	r2, #9
 8007216:	d903      	bls.n	8007220 <_svfiprintf_r+0x1a8>
 8007218:	2b00      	cmp	r3, #0
 800721a:	d0c5      	beq.n	80071a8 <_svfiprintf_r+0x130>
 800721c:	9105      	str	r1, [sp, #20]
 800721e:	e7c3      	b.n	80071a8 <_svfiprintf_r+0x130>
 8007220:	fb0c 2101 	mla	r1, ip, r1, r2
 8007224:	4604      	mov	r4, r0
 8007226:	2301      	movs	r3, #1
 8007228:	e7f0      	b.n	800720c <_svfiprintf_r+0x194>
 800722a:	ab03      	add	r3, sp, #12
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	462a      	mov	r2, r5
 8007230:	4b0f      	ldr	r3, [pc, #60]	; (8007270 <_svfiprintf_r+0x1f8>)
 8007232:	a904      	add	r1, sp, #16
 8007234:	4638      	mov	r0, r7
 8007236:	f3af 8000 	nop.w
 800723a:	1c42      	adds	r2, r0, #1
 800723c:	4606      	mov	r6, r0
 800723e:	d1d6      	bne.n	80071ee <_svfiprintf_r+0x176>
 8007240:	89ab      	ldrh	r3, [r5, #12]
 8007242:	065b      	lsls	r3, r3, #25
 8007244:	f53f af2c 	bmi.w	80070a0 <_svfiprintf_r+0x28>
 8007248:	9809      	ldr	r0, [sp, #36]	; 0x24
 800724a:	b01d      	add	sp, #116	; 0x74
 800724c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007250:	ab03      	add	r3, sp, #12
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	462a      	mov	r2, r5
 8007256:	4b06      	ldr	r3, [pc, #24]	; (8007270 <_svfiprintf_r+0x1f8>)
 8007258:	a904      	add	r1, sp, #16
 800725a:	4638      	mov	r0, r7
 800725c:	f000 f87a 	bl	8007354 <_printf_i>
 8007260:	e7eb      	b.n	800723a <_svfiprintf_r+0x1c2>
 8007262:	bf00      	nop
 8007264:	080078d0 	.word	0x080078d0
 8007268:	080078da 	.word	0x080078da
 800726c:	00000000 	.word	0x00000000
 8007270:	08006fc1 	.word	0x08006fc1
 8007274:	080078d6 	.word	0x080078d6

08007278 <_printf_common>:
 8007278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800727c:	4616      	mov	r6, r2
 800727e:	4699      	mov	r9, r3
 8007280:	688a      	ldr	r2, [r1, #8]
 8007282:	690b      	ldr	r3, [r1, #16]
 8007284:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007288:	4293      	cmp	r3, r2
 800728a:	bfb8      	it	lt
 800728c:	4613      	movlt	r3, r2
 800728e:	6033      	str	r3, [r6, #0]
 8007290:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007294:	4607      	mov	r7, r0
 8007296:	460c      	mov	r4, r1
 8007298:	b10a      	cbz	r2, 800729e <_printf_common+0x26>
 800729a:	3301      	adds	r3, #1
 800729c:	6033      	str	r3, [r6, #0]
 800729e:	6823      	ldr	r3, [r4, #0]
 80072a0:	0699      	lsls	r1, r3, #26
 80072a2:	bf42      	ittt	mi
 80072a4:	6833      	ldrmi	r3, [r6, #0]
 80072a6:	3302      	addmi	r3, #2
 80072a8:	6033      	strmi	r3, [r6, #0]
 80072aa:	6825      	ldr	r5, [r4, #0]
 80072ac:	f015 0506 	ands.w	r5, r5, #6
 80072b0:	d106      	bne.n	80072c0 <_printf_common+0x48>
 80072b2:	f104 0a19 	add.w	sl, r4, #25
 80072b6:	68e3      	ldr	r3, [r4, #12]
 80072b8:	6832      	ldr	r2, [r6, #0]
 80072ba:	1a9b      	subs	r3, r3, r2
 80072bc:	42ab      	cmp	r3, r5
 80072be:	dc26      	bgt.n	800730e <_printf_common+0x96>
 80072c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072c4:	1e13      	subs	r3, r2, #0
 80072c6:	6822      	ldr	r2, [r4, #0]
 80072c8:	bf18      	it	ne
 80072ca:	2301      	movne	r3, #1
 80072cc:	0692      	lsls	r2, r2, #26
 80072ce:	d42b      	bmi.n	8007328 <_printf_common+0xb0>
 80072d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072d4:	4649      	mov	r1, r9
 80072d6:	4638      	mov	r0, r7
 80072d8:	47c0      	blx	r8
 80072da:	3001      	adds	r0, #1
 80072dc:	d01e      	beq.n	800731c <_printf_common+0xa4>
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	68e5      	ldr	r5, [r4, #12]
 80072e2:	6832      	ldr	r2, [r6, #0]
 80072e4:	f003 0306 	and.w	r3, r3, #6
 80072e8:	2b04      	cmp	r3, #4
 80072ea:	bf08      	it	eq
 80072ec:	1aad      	subeq	r5, r5, r2
 80072ee:	68a3      	ldr	r3, [r4, #8]
 80072f0:	6922      	ldr	r2, [r4, #16]
 80072f2:	bf0c      	ite	eq
 80072f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072f8:	2500      	movne	r5, #0
 80072fa:	4293      	cmp	r3, r2
 80072fc:	bfc4      	itt	gt
 80072fe:	1a9b      	subgt	r3, r3, r2
 8007300:	18ed      	addgt	r5, r5, r3
 8007302:	2600      	movs	r6, #0
 8007304:	341a      	adds	r4, #26
 8007306:	42b5      	cmp	r5, r6
 8007308:	d11a      	bne.n	8007340 <_printf_common+0xc8>
 800730a:	2000      	movs	r0, #0
 800730c:	e008      	b.n	8007320 <_printf_common+0xa8>
 800730e:	2301      	movs	r3, #1
 8007310:	4652      	mov	r2, sl
 8007312:	4649      	mov	r1, r9
 8007314:	4638      	mov	r0, r7
 8007316:	47c0      	blx	r8
 8007318:	3001      	adds	r0, #1
 800731a:	d103      	bne.n	8007324 <_printf_common+0xac>
 800731c:	f04f 30ff 	mov.w	r0, #4294967295
 8007320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007324:	3501      	adds	r5, #1
 8007326:	e7c6      	b.n	80072b6 <_printf_common+0x3e>
 8007328:	18e1      	adds	r1, r4, r3
 800732a:	1c5a      	adds	r2, r3, #1
 800732c:	2030      	movs	r0, #48	; 0x30
 800732e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007332:	4422      	add	r2, r4
 8007334:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007338:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800733c:	3302      	adds	r3, #2
 800733e:	e7c7      	b.n	80072d0 <_printf_common+0x58>
 8007340:	2301      	movs	r3, #1
 8007342:	4622      	mov	r2, r4
 8007344:	4649      	mov	r1, r9
 8007346:	4638      	mov	r0, r7
 8007348:	47c0      	blx	r8
 800734a:	3001      	adds	r0, #1
 800734c:	d0e6      	beq.n	800731c <_printf_common+0xa4>
 800734e:	3601      	adds	r6, #1
 8007350:	e7d9      	b.n	8007306 <_printf_common+0x8e>
	...

08007354 <_printf_i>:
 8007354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007358:	7e0f      	ldrb	r7, [r1, #24]
 800735a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800735c:	2f78      	cmp	r7, #120	; 0x78
 800735e:	4691      	mov	r9, r2
 8007360:	4680      	mov	r8, r0
 8007362:	460c      	mov	r4, r1
 8007364:	469a      	mov	sl, r3
 8007366:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800736a:	d807      	bhi.n	800737c <_printf_i+0x28>
 800736c:	2f62      	cmp	r7, #98	; 0x62
 800736e:	d80a      	bhi.n	8007386 <_printf_i+0x32>
 8007370:	2f00      	cmp	r7, #0
 8007372:	f000 80d8 	beq.w	8007526 <_printf_i+0x1d2>
 8007376:	2f58      	cmp	r7, #88	; 0x58
 8007378:	f000 80a3 	beq.w	80074c2 <_printf_i+0x16e>
 800737c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007380:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007384:	e03a      	b.n	80073fc <_printf_i+0xa8>
 8007386:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800738a:	2b15      	cmp	r3, #21
 800738c:	d8f6      	bhi.n	800737c <_printf_i+0x28>
 800738e:	a101      	add	r1, pc, #4	; (adr r1, 8007394 <_printf_i+0x40>)
 8007390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007394:	080073ed 	.word	0x080073ed
 8007398:	08007401 	.word	0x08007401
 800739c:	0800737d 	.word	0x0800737d
 80073a0:	0800737d 	.word	0x0800737d
 80073a4:	0800737d 	.word	0x0800737d
 80073a8:	0800737d 	.word	0x0800737d
 80073ac:	08007401 	.word	0x08007401
 80073b0:	0800737d 	.word	0x0800737d
 80073b4:	0800737d 	.word	0x0800737d
 80073b8:	0800737d 	.word	0x0800737d
 80073bc:	0800737d 	.word	0x0800737d
 80073c0:	0800750d 	.word	0x0800750d
 80073c4:	08007431 	.word	0x08007431
 80073c8:	080074ef 	.word	0x080074ef
 80073cc:	0800737d 	.word	0x0800737d
 80073d0:	0800737d 	.word	0x0800737d
 80073d4:	0800752f 	.word	0x0800752f
 80073d8:	0800737d 	.word	0x0800737d
 80073dc:	08007431 	.word	0x08007431
 80073e0:	0800737d 	.word	0x0800737d
 80073e4:	0800737d 	.word	0x0800737d
 80073e8:	080074f7 	.word	0x080074f7
 80073ec:	682b      	ldr	r3, [r5, #0]
 80073ee:	1d1a      	adds	r2, r3, #4
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	602a      	str	r2, [r5, #0]
 80073f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073fc:	2301      	movs	r3, #1
 80073fe:	e0a3      	b.n	8007548 <_printf_i+0x1f4>
 8007400:	6820      	ldr	r0, [r4, #0]
 8007402:	6829      	ldr	r1, [r5, #0]
 8007404:	0606      	lsls	r6, r0, #24
 8007406:	f101 0304 	add.w	r3, r1, #4
 800740a:	d50a      	bpl.n	8007422 <_printf_i+0xce>
 800740c:	680e      	ldr	r6, [r1, #0]
 800740e:	602b      	str	r3, [r5, #0]
 8007410:	2e00      	cmp	r6, #0
 8007412:	da03      	bge.n	800741c <_printf_i+0xc8>
 8007414:	232d      	movs	r3, #45	; 0x2d
 8007416:	4276      	negs	r6, r6
 8007418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800741c:	485e      	ldr	r0, [pc, #376]	; (8007598 <_printf_i+0x244>)
 800741e:	230a      	movs	r3, #10
 8007420:	e019      	b.n	8007456 <_printf_i+0x102>
 8007422:	680e      	ldr	r6, [r1, #0]
 8007424:	602b      	str	r3, [r5, #0]
 8007426:	f010 0f40 	tst.w	r0, #64	; 0x40
 800742a:	bf18      	it	ne
 800742c:	b236      	sxthne	r6, r6
 800742e:	e7ef      	b.n	8007410 <_printf_i+0xbc>
 8007430:	682b      	ldr	r3, [r5, #0]
 8007432:	6820      	ldr	r0, [r4, #0]
 8007434:	1d19      	adds	r1, r3, #4
 8007436:	6029      	str	r1, [r5, #0]
 8007438:	0601      	lsls	r1, r0, #24
 800743a:	d501      	bpl.n	8007440 <_printf_i+0xec>
 800743c:	681e      	ldr	r6, [r3, #0]
 800743e:	e002      	b.n	8007446 <_printf_i+0xf2>
 8007440:	0646      	lsls	r6, r0, #25
 8007442:	d5fb      	bpl.n	800743c <_printf_i+0xe8>
 8007444:	881e      	ldrh	r6, [r3, #0]
 8007446:	4854      	ldr	r0, [pc, #336]	; (8007598 <_printf_i+0x244>)
 8007448:	2f6f      	cmp	r7, #111	; 0x6f
 800744a:	bf0c      	ite	eq
 800744c:	2308      	moveq	r3, #8
 800744e:	230a      	movne	r3, #10
 8007450:	2100      	movs	r1, #0
 8007452:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007456:	6865      	ldr	r5, [r4, #4]
 8007458:	60a5      	str	r5, [r4, #8]
 800745a:	2d00      	cmp	r5, #0
 800745c:	bfa2      	ittt	ge
 800745e:	6821      	ldrge	r1, [r4, #0]
 8007460:	f021 0104 	bicge.w	r1, r1, #4
 8007464:	6021      	strge	r1, [r4, #0]
 8007466:	b90e      	cbnz	r6, 800746c <_printf_i+0x118>
 8007468:	2d00      	cmp	r5, #0
 800746a:	d04d      	beq.n	8007508 <_printf_i+0x1b4>
 800746c:	4615      	mov	r5, r2
 800746e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007472:	fb03 6711 	mls	r7, r3, r1, r6
 8007476:	5dc7      	ldrb	r7, [r0, r7]
 8007478:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800747c:	4637      	mov	r7, r6
 800747e:	42bb      	cmp	r3, r7
 8007480:	460e      	mov	r6, r1
 8007482:	d9f4      	bls.n	800746e <_printf_i+0x11a>
 8007484:	2b08      	cmp	r3, #8
 8007486:	d10b      	bne.n	80074a0 <_printf_i+0x14c>
 8007488:	6823      	ldr	r3, [r4, #0]
 800748a:	07de      	lsls	r6, r3, #31
 800748c:	d508      	bpl.n	80074a0 <_printf_i+0x14c>
 800748e:	6923      	ldr	r3, [r4, #16]
 8007490:	6861      	ldr	r1, [r4, #4]
 8007492:	4299      	cmp	r1, r3
 8007494:	bfde      	ittt	le
 8007496:	2330      	movle	r3, #48	; 0x30
 8007498:	f805 3c01 	strble.w	r3, [r5, #-1]
 800749c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80074a0:	1b52      	subs	r2, r2, r5
 80074a2:	6122      	str	r2, [r4, #16]
 80074a4:	f8cd a000 	str.w	sl, [sp]
 80074a8:	464b      	mov	r3, r9
 80074aa:	aa03      	add	r2, sp, #12
 80074ac:	4621      	mov	r1, r4
 80074ae:	4640      	mov	r0, r8
 80074b0:	f7ff fee2 	bl	8007278 <_printf_common>
 80074b4:	3001      	adds	r0, #1
 80074b6:	d14c      	bne.n	8007552 <_printf_i+0x1fe>
 80074b8:	f04f 30ff 	mov.w	r0, #4294967295
 80074bc:	b004      	add	sp, #16
 80074be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074c2:	4835      	ldr	r0, [pc, #212]	; (8007598 <_printf_i+0x244>)
 80074c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80074c8:	6829      	ldr	r1, [r5, #0]
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80074d0:	6029      	str	r1, [r5, #0]
 80074d2:	061d      	lsls	r5, r3, #24
 80074d4:	d514      	bpl.n	8007500 <_printf_i+0x1ac>
 80074d6:	07df      	lsls	r7, r3, #31
 80074d8:	bf44      	itt	mi
 80074da:	f043 0320 	orrmi.w	r3, r3, #32
 80074de:	6023      	strmi	r3, [r4, #0]
 80074e0:	b91e      	cbnz	r6, 80074ea <_printf_i+0x196>
 80074e2:	6823      	ldr	r3, [r4, #0]
 80074e4:	f023 0320 	bic.w	r3, r3, #32
 80074e8:	6023      	str	r3, [r4, #0]
 80074ea:	2310      	movs	r3, #16
 80074ec:	e7b0      	b.n	8007450 <_printf_i+0xfc>
 80074ee:	6823      	ldr	r3, [r4, #0]
 80074f0:	f043 0320 	orr.w	r3, r3, #32
 80074f4:	6023      	str	r3, [r4, #0]
 80074f6:	2378      	movs	r3, #120	; 0x78
 80074f8:	4828      	ldr	r0, [pc, #160]	; (800759c <_printf_i+0x248>)
 80074fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074fe:	e7e3      	b.n	80074c8 <_printf_i+0x174>
 8007500:	0659      	lsls	r1, r3, #25
 8007502:	bf48      	it	mi
 8007504:	b2b6      	uxthmi	r6, r6
 8007506:	e7e6      	b.n	80074d6 <_printf_i+0x182>
 8007508:	4615      	mov	r5, r2
 800750a:	e7bb      	b.n	8007484 <_printf_i+0x130>
 800750c:	682b      	ldr	r3, [r5, #0]
 800750e:	6826      	ldr	r6, [r4, #0]
 8007510:	6961      	ldr	r1, [r4, #20]
 8007512:	1d18      	adds	r0, r3, #4
 8007514:	6028      	str	r0, [r5, #0]
 8007516:	0635      	lsls	r5, r6, #24
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	d501      	bpl.n	8007520 <_printf_i+0x1cc>
 800751c:	6019      	str	r1, [r3, #0]
 800751e:	e002      	b.n	8007526 <_printf_i+0x1d2>
 8007520:	0670      	lsls	r0, r6, #25
 8007522:	d5fb      	bpl.n	800751c <_printf_i+0x1c8>
 8007524:	8019      	strh	r1, [r3, #0]
 8007526:	2300      	movs	r3, #0
 8007528:	6123      	str	r3, [r4, #16]
 800752a:	4615      	mov	r5, r2
 800752c:	e7ba      	b.n	80074a4 <_printf_i+0x150>
 800752e:	682b      	ldr	r3, [r5, #0]
 8007530:	1d1a      	adds	r2, r3, #4
 8007532:	602a      	str	r2, [r5, #0]
 8007534:	681d      	ldr	r5, [r3, #0]
 8007536:	6862      	ldr	r2, [r4, #4]
 8007538:	2100      	movs	r1, #0
 800753a:	4628      	mov	r0, r5
 800753c:	f7f8 fe50 	bl	80001e0 <memchr>
 8007540:	b108      	cbz	r0, 8007546 <_printf_i+0x1f2>
 8007542:	1b40      	subs	r0, r0, r5
 8007544:	6060      	str	r0, [r4, #4]
 8007546:	6863      	ldr	r3, [r4, #4]
 8007548:	6123      	str	r3, [r4, #16]
 800754a:	2300      	movs	r3, #0
 800754c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007550:	e7a8      	b.n	80074a4 <_printf_i+0x150>
 8007552:	6923      	ldr	r3, [r4, #16]
 8007554:	462a      	mov	r2, r5
 8007556:	4649      	mov	r1, r9
 8007558:	4640      	mov	r0, r8
 800755a:	47d0      	blx	sl
 800755c:	3001      	adds	r0, #1
 800755e:	d0ab      	beq.n	80074b8 <_printf_i+0x164>
 8007560:	6823      	ldr	r3, [r4, #0]
 8007562:	079b      	lsls	r3, r3, #30
 8007564:	d413      	bmi.n	800758e <_printf_i+0x23a>
 8007566:	68e0      	ldr	r0, [r4, #12]
 8007568:	9b03      	ldr	r3, [sp, #12]
 800756a:	4298      	cmp	r0, r3
 800756c:	bfb8      	it	lt
 800756e:	4618      	movlt	r0, r3
 8007570:	e7a4      	b.n	80074bc <_printf_i+0x168>
 8007572:	2301      	movs	r3, #1
 8007574:	4632      	mov	r2, r6
 8007576:	4649      	mov	r1, r9
 8007578:	4640      	mov	r0, r8
 800757a:	47d0      	blx	sl
 800757c:	3001      	adds	r0, #1
 800757e:	d09b      	beq.n	80074b8 <_printf_i+0x164>
 8007580:	3501      	adds	r5, #1
 8007582:	68e3      	ldr	r3, [r4, #12]
 8007584:	9903      	ldr	r1, [sp, #12]
 8007586:	1a5b      	subs	r3, r3, r1
 8007588:	42ab      	cmp	r3, r5
 800758a:	dcf2      	bgt.n	8007572 <_printf_i+0x21e>
 800758c:	e7eb      	b.n	8007566 <_printf_i+0x212>
 800758e:	2500      	movs	r5, #0
 8007590:	f104 0619 	add.w	r6, r4, #25
 8007594:	e7f5      	b.n	8007582 <_printf_i+0x22e>
 8007596:	bf00      	nop
 8007598:	080078e1 	.word	0x080078e1
 800759c:	080078f2 	.word	0x080078f2

080075a0 <memcpy>:
 80075a0:	440a      	add	r2, r1
 80075a2:	4291      	cmp	r1, r2
 80075a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80075a8:	d100      	bne.n	80075ac <memcpy+0xc>
 80075aa:	4770      	bx	lr
 80075ac:	b510      	push	{r4, lr}
 80075ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075b6:	4291      	cmp	r1, r2
 80075b8:	d1f9      	bne.n	80075ae <memcpy+0xe>
 80075ba:	bd10      	pop	{r4, pc}

080075bc <memmove>:
 80075bc:	4288      	cmp	r0, r1
 80075be:	b510      	push	{r4, lr}
 80075c0:	eb01 0402 	add.w	r4, r1, r2
 80075c4:	d902      	bls.n	80075cc <memmove+0x10>
 80075c6:	4284      	cmp	r4, r0
 80075c8:	4623      	mov	r3, r4
 80075ca:	d807      	bhi.n	80075dc <memmove+0x20>
 80075cc:	1e43      	subs	r3, r0, #1
 80075ce:	42a1      	cmp	r1, r4
 80075d0:	d008      	beq.n	80075e4 <memmove+0x28>
 80075d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075da:	e7f8      	b.n	80075ce <memmove+0x12>
 80075dc:	4402      	add	r2, r0
 80075de:	4601      	mov	r1, r0
 80075e0:	428a      	cmp	r2, r1
 80075e2:	d100      	bne.n	80075e6 <memmove+0x2a>
 80075e4:	bd10      	pop	{r4, pc}
 80075e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075ee:	e7f7      	b.n	80075e0 <memmove+0x24>

080075f0 <_free_r>:
 80075f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075f2:	2900      	cmp	r1, #0
 80075f4:	d044      	beq.n	8007680 <_free_r+0x90>
 80075f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075fa:	9001      	str	r0, [sp, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f1a1 0404 	sub.w	r4, r1, #4
 8007602:	bfb8      	it	lt
 8007604:	18e4      	addlt	r4, r4, r3
 8007606:	f000 f913 	bl	8007830 <__malloc_lock>
 800760a:	4a1e      	ldr	r2, [pc, #120]	; (8007684 <_free_r+0x94>)
 800760c:	9801      	ldr	r0, [sp, #4]
 800760e:	6813      	ldr	r3, [r2, #0]
 8007610:	b933      	cbnz	r3, 8007620 <_free_r+0x30>
 8007612:	6063      	str	r3, [r4, #4]
 8007614:	6014      	str	r4, [r2, #0]
 8007616:	b003      	add	sp, #12
 8007618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800761c:	f000 b90e 	b.w	800783c <__malloc_unlock>
 8007620:	42a3      	cmp	r3, r4
 8007622:	d908      	bls.n	8007636 <_free_r+0x46>
 8007624:	6825      	ldr	r5, [r4, #0]
 8007626:	1961      	adds	r1, r4, r5
 8007628:	428b      	cmp	r3, r1
 800762a:	bf01      	itttt	eq
 800762c:	6819      	ldreq	r1, [r3, #0]
 800762e:	685b      	ldreq	r3, [r3, #4]
 8007630:	1949      	addeq	r1, r1, r5
 8007632:	6021      	streq	r1, [r4, #0]
 8007634:	e7ed      	b.n	8007612 <_free_r+0x22>
 8007636:	461a      	mov	r2, r3
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	b10b      	cbz	r3, 8007640 <_free_r+0x50>
 800763c:	42a3      	cmp	r3, r4
 800763e:	d9fa      	bls.n	8007636 <_free_r+0x46>
 8007640:	6811      	ldr	r1, [r2, #0]
 8007642:	1855      	adds	r5, r2, r1
 8007644:	42a5      	cmp	r5, r4
 8007646:	d10b      	bne.n	8007660 <_free_r+0x70>
 8007648:	6824      	ldr	r4, [r4, #0]
 800764a:	4421      	add	r1, r4
 800764c:	1854      	adds	r4, r2, r1
 800764e:	42a3      	cmp	r3, r4
 8007650:	6011      	str	r1, [r2, #0]
 8007652:	d1e0      	bne.n	8007616 <_free_r+0x26>
 8007654:	681c      	ldr	r4, [r3, #0]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	6053      	str	r3, [r2, #4]
 800765a:	4421      	add	r1, r4
 800765c:	6011      	str	r1, [r2, #0]
 800765e:	e7da      	b.n	8007616 <_free_r+0x26>
 8007660:	d902      	bls.n	8007668 <_free_r+0x78>
 8007662:	230c      	movs	r3, #12
 8007664:	6003      	str	r3, [r0, #0]
 8007666:	e7d6      	b.n	8007616 <_free_r+0x26>
 8007668:	6825      	ldr	r5, [r4, #0]
 800766a:	1961      	adds	r1, r4, r5
 800766c:	428b      	cmp	r3, r1
 800766e:	bf04      	itt	eq
 8007670:	6819      	ldreq	r1, [r3, #0]
 8007672:	685b      	ldreq	r3, [r3, #4]
 8007674:	6063      	str	r3, [r4, #4]
 8007676:	bf04      	itt	eq
 8007678:	1949      	addeq	r1, r1, r5
 800767a:	6021      	streq	r1, [r4, #0]
 800767c:	6054      	str	r4, [r2, #4]
 800767e:	e7ca      	b.n	8007616 <_free_r+0x26>
 8007680:	b003      	add	sp, #12
 8007682:	bd30      	pop	{r4, r5, pc}
 8007684:	20001dcc 	.word	0x20001dcc

08007688 <sbrk_aligned>:
 8007688:	b570      	push	{r4, r5, r6, lr}
 800768a:	4e0e      	ldr	r6, [pc, #56]	; (80076c4 <sbrk_aligned+0x3c>)
 800768c:	460c      	mov	r4, r1
 800768e:	6831      	ldr	r1, [r6, #0]
 8007690:	4605      	mov	r5, r0
 8007692:	b911      	cbnz	r1, 800769a <sbrk_aligned+0x12>
 8007694:	f000 f8bc 	bl	8007810 <_sbrk_r>
 8007698:	6030      	str	r0, [r6, #0]
 800769a:	4621      	mov	r1, r4
 800769c:	4628      	mov	r0, r5
 800769e:	f000 f8b7 	bl	8007810 <_sbrk_r>
 80076a2:	1c43      	adds	r3, r0, #1
 80076a4:	d00a      	beq.n	80076bc <sbrk_aligned+0x34>
 80076a6:	1cc4      	adds	r4, r0, #3
 80076a8:	f024 0403 	bic.w	r4, r4, #3
 80076ac:	42a0      	cmp	r0, r4
 80076ae:	d007      	beq.n	80076c0 <sbrk_aligned+0x38>
 80076b0:	1a21      	subs	r1, r4, r0
 80076b2:	4628      	mov	r0, r5
 80076b4:	f000 f8ac 	bl	8007810 <_sbrk_r>
 80076b8:	3001      	adds	r0, #1
 80076ba:	d101      	bne.n	80076c0 <sbrk_aligned+0x38>
 80076bc:	f04f 34ff 	mov.w	r4, #4294967295
 80076c0:	4620      	mov	r0, r4
 80076c2:	bd70      	pop	{r4, r5, r6, pc}
 80076c4:	20001dd0 	.word	0x20001dd0

080076c8 <_malloc_r>:
 80076c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076cc:	1ccd      	adds	r5, r1, #3
 80076ce:	f025 0503 	bic.w	r5, r5, #3
 80076d2:	3508      	adds	r5, #8
 80076d4:	2d0c      	cmp	r5, #12
 80076d6:	bf38      	it	cc
 80076d8:	250c      	movcc	r5, #12
 80076da:	2d00      	cmp	r5, #0
 80076dc:	4607      	mov	r7, r0
 80076de:	db01      	blt.n	80076e4 <_malloc_r+0x1c>
 80076e0:	42a9      	cmp	r1, r5
 80076e2:	d905      	bls.n	80076f0 <_malloc_r+0x28>
 80076e4:	230c      	movs	r3, #12
 80076e6:	603b      	str	r3, [r7, #0]
 80076e8:	2600      	movs	r6, #0
 80076ea:	4630      	mov	r0, r6
 80076ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076f0:	4e2e      	ldr	r6, [pc, #184]	; (80077ac <_malloc_r+0xe4>)
 80076f2:	f000 f89d 	bl	8007830 <__malloc_lock>
 80076f6:	6833      	ldr	r3, [r6, #0]
 80076f8:	461c      	mov	r4, r3
 80076fa:	bb34      	cbnz	r4, 800774a <_malloc_r+0x82>
 80076fc:	4629      	mov	r1, r5
 80076fe:	4638      	mov	r0, r7
 8007700:	f7ff ffc2 	bl	8007688 <sbrk_aligned>
 8007704:	1c43      	adds	r3, r0, #1
 8007706:	4604      	mov	r4, r0
 8007708:	d14d      	bne.n	80077a6 <_malloc_r+0xde>
 800770a:	6834      	ldr	r4, [r6, #0]
 800770c:	4626      	mov	r6, r4
 800770e:	2e00      	cmp	r6, #0
 8007710:	d140      	bne.n	8007794 <_malloc_r+0xcc>
 8007712:	6823      	ldr	r3, [r4, #0]
 8007714:	4631      	mov	r1, r6
 8007716:	4638      	mov	r0, r7
 8007718:	eb04 0803 	add.w	r8, r4, r3
 800771c:	f000 f878 	bl	8007810 <_sbrk_r>
 8007720:	4580      	cmp	r8, r0
 8007722:	d13a      	bne.n	800779a <_malloc_r+0xd2>
 8007724:	6821      	ldr	r1, [r4, #0]
 8007726:	3503      	adds	r5, #3
 8007728:	1a6d      	subs	r5, r5, r1
 800772a:	f025 0503 	bic.w	r5, r5, #3
 800772e:	3508      	adds	r5, #8
 8007730:	2d0c      	cmp	r5, #12
 8007732:	bf38      	it	cc
 8007734:	250c      	movcc	r5, #12
 8007736:	4629      	mov	r1, r5
 8007738:	4638      	mov	r0, r7
 800773a:	f7ff ffa5 	bl	8007688 <sbrk_aligned>
 800773e:	3001      	adds	r0, #1
 8007740:	d02b      	beq.n	800779a <_malloc_r+0xd2>
 8007742:	6823      	ldr	r3, [r4, #0]
 8007744:	442b      	add	r3, r5
 8007746:	6023      	str	r3, [r4, #0]
 8007748:	e00e      	b.n	8007768 <_malloc_r+0xa0>
 800774a:	6822      	ldr	r2, [r4, #0]
 800774c:	1b52      	subs	r2, r2, r5
 800774e:	d41e      	bmi.n	800778e <_malloc_r+0xc6>
 8007750:	2a0b      	cmp	r2, #11
 8007752:	d916      	bls.n	8007782 <_malloc_r+0xba>
 8007754:	1961      	adds	r1, r4, r5
 8007756:	42a3      	cmp	r3, r4
 8007758:	6025      	str	r5, [r4, #0]
 800775a:	bf18      	it	ne
 800775c:	6059      	strne	r1, [r3, #4]
 800775e:	6863      	ldr	r3, [r4, #4]
 8007760:	bf08      	it	eq
 8007762:	6031      	streq	r1, [r6, #0]
 8007764:	5162      	str	r2, [r4, r5]
 8007766:	604b      	str	r3, [r1, #4]
 8007768:	4638      	mov	r0, r7
 800776a:	f104 060b 	add.w	r6, r4, #11
 800776e:	f000 f865 	bl	800783c <__malloc_unlock>
 8007772:	f026 0607 	bic.w	r6, r6, #7
 8007776:	1d23      	adds	r3, r4, #4
 8007778:	1af2      	subs	r2, r6, r3
 800777a:	d0b6      	beq.n	80076ea <_malloc_r+0x22>
 800777c:	1b9b      	subs	r3, r3, r6
 800777e:	50a3      	str	r3, [r4, r2]
 8007780:	e7b3      	b.n	80076ea <_malloc_r+0x22>
 8007782:	6862      	ldr	r2, [r4, #4]
 8007784:	42a3      	cmp	r3, r4
 8007786:	bf0c      	ite	eq
 8007788:	6032      	streq	r2, [r6, #0]
 800778a:	605a      	strne	r2, [r3, #4]
 800778c:	e7ec      	b.n	8007768 <_malloc_r+0xa0>
 800778e:	4623      	mov	r3, r4
 8007790:	6864      	ldr	r4, [r4, #4]
 8007792:	e7b2      	b.n	80076fa <_malloc_r+0x32>
 8007794:	4634      	mov	r4, r6
 8007796:	6876      	ldr	r6, [r6, #4]
 8007798:	e7b9      	b.n	800770e <_malloc_r+0x46>
 800779a:	230c      	movs	r3, #12
 800779c:	603b      	str	r3, [r7, #0]
 800779e:	4638      	mov	r0, r7
 80077a0:	f000 f84c 	bl	800783c <__malloc_unlock>
 80077a4:	e7a1      	b.n	80076ea <_malloc_r+0x22>
 80077a6:	6025      	str	r5, [r4, #0]
 80077a8:	e7de      	b.n	8007768 <_malloc_r+0xa0>
 80077aa:	bf00      	nop
 80077ac:	20001dcc 	.word	0x20001dcc

080077b0 <_realloc_r>:
 80077b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077b4:	4680      	mov	r8, r0
 80077b6:	4614      	mov	r4, r2
 80077b8:	460e      	mov	r6, r1
 80077ba:	b921      	cbnz	r1, 80077c6 <_realloc_r+0x16>
 80077bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077c0:	4611      	mov	r1, r2
 80077c2:	f7ff bf81 	b.w	80076c8 <_malloc_r>
 80077c6:	b92a      	cbnz	r2, 80077d4 <_realloc_r+0x24>
 80077c8:	f7ff ff12 	bl	80075f0 <_free_r>
 80077cc:	4625      	mov	r5, r4
 80077ce:	4628      	mov	r0, r5
 80077d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077d4:	f000 f838 	bl	8007848 <_malloc_usable_size_r>
 80077d8:	4284      	cmp	r4, r0
 80077da:	4607      	mov	r7, r0
 80077dc:	d802      	bhi.n	80077e4 <_realloc_r+0x34>
 80077de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80077e2:	d812      	bhi.n	800780a <_realloc_r+0x5a>
 80077e4:	4621      	mov	r1, r4
 80077e6:	4640      	mov	r0, r8
 80077e8:	f7ff ff6e 	bl	80076c8 <_malloc_r>
 80077ec:	4605      	mov	r5, r0
 80077ee:	2800      	cmp	r0, #0
 80077f0:	d0ed      	beq.n	80077ce <_realloc_r+0x1e>
 80077f2:	42bc      	cmp	r4, r7
 80077f4:	4622      	mov	r2, r4
 80077f6:	4631      	mov	r1, r6
 80077f8:	bf28      	it	cs
 80077fa:	463a      	movcs	r2, r7
 80077fc:	f7ff fed0 	bl	80075a0 <memcpy>
 8007800:	4631      	mov	r1, r6
 8007802:	4640      	mov	r0, r8
 8007804:	f7ff fef4 	bl	80075f0 <_free_r>
 8007808:	e7e1      	b.n	80077ce <_realloc_r+0x1e>
 800780a:	4635      	mov	r5, r6
 800780c:	e7df      	b.n	80077ce <_realloc_r+0x1e>
	...

08007810 <_sbrk_r>:
 8007810:	b538      	push	{r3, r4, r5, lr}
 8007812:	4d06      	ldr	r5, [pc, #24]	; (800782c <_sbrk_r+0x1c>)
 8007814:	2300      	movs	r3, #0
 8007816:	4604      	mov	r4, r0
 8007818:	4608      	mov	r0, r1
 800781a:	602b      	str	r3, [r5, #0]
 800781c:	f7f8 ffea 	bl	80007f4 <_sbrk>
 8007820:	1c43      	adds	r3, r0, #1
 8007822:	d102      	bne.n	800782a <_sbrk_r+0x1a>
 8007824:	682b      	ldr	r3, [r5, #0]
 8007826:	b103      	cbz	r3, 800782a <_sbrk_r+0x1a>
 8007828:	6023      	str	r3, [r4, #0]
 800782a:	bd38      	pop	{r3, r4, r5, pc}
 800782c:	20001dd4 	.word	0x20001dd4

08007830 <__malloc_lock>:
 8007830:	4801      	ldr	r0, [pc, #4]	; (8007838 <__malloc_lock+0x8>)
 8007832:	f000 b811 	b.w	8007858 <__retarget_lock_acquire_recursive>
 8007836:	bf00      	nop
 8007838:	20001dd8 	.word	0x20001dd8

0800783c <__malloc_unlock>:
 800783c:	4801      	ldr	r0, [pc, #4]	; (8007844 <__malloc_unlock+0x8>)
 800783e:	f000 b80c 	b.w	800785a <__retarget_lock_release_recursive>
 8007842:	bf00      	nop
 8007844:	20001dd8 	.word	0x20001dd8

08007848 <_malloc_usable_size_r>:
 8007848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800784c:	1f18      	subs	r0, r3, #4
 800784e:	2b00      	cmp	r3, #0
 8007850:	bfbc      	itt	lt
 8007852:	580b      	ldrlt	r3, [r1, r0]
 8007854:	18c0      	addlt	r0, r0, r3
 8007856:	4770      	bx	lr

08007858 <__retarget_lock_acquire_recursive>:
 8007858:	4770      	bx	lr

0800785a <__retarget_lock_release_recursive>:
 800785a:	4770      	bx	lr

0800785c <_init>:
 800785c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785e:	bf00      	nop
 8007860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007862:	bc08      	pop	{r3}
 8007864:	469e      	mov	lr, r3
 8007866:	4770      	bx	lr

08007868 <_fini>:
 8007868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800786a:	bf00      	nop
 800786c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800786e:	bc08      	pop	{r3}
 8007870:	469e      	mov	lr, r3
 8007872:	4770      	bx	lr
